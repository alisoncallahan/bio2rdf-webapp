@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix dc: <http://purl.org/dc/elements/1.1/>.
@prefix queryall_profile: <http://purl.org/queryall/profile:> .
@prefix queryall_query: <http://purl.org/queryall/query:> .
@prefix bio2rdf_provider: <http://bio2rdf.org/provider:> .
@prefix bio2rdf_query: <http://bio2rdf.org/query:> .
@prefix bio2rdf_rdfrule: <http://bio2rdf.org/rdfrule:> .
@prefix bio2rdf_ns: <http://bio2rdf.org/ns:> .

bio2rdf_query:dummyuniversalfilterquery a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "true"^^xsd:boolean ;
    queryall_query:isPageable "true"^^xsd:boolean ;
	dc:title "This query is designed to be used as a dummy, no communication query to provider filtering on entire results pools." ;
	queryall_query:includeDefaults "true"^^xsd:boolean ;
	queryall_query:inputRegex "^(.*)" ;
	queryall_query:templateString "" ;
	queryall_query:queryUriTemplateString "${defaultHostAddress}${input_1}" ;
	queryall_query:standardUriTemplateString "${defaultHostAddress}${input_1}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "" ;
	queryall_query:inRobotsTxt "false"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude .

bio2rdf_query:catchalldefault a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "true"^^xsd:boolean ;
	dc:title "Catch all default query definition. Do not enable this unless you want it to match everything." ;
	queryall_query:includeDefaults "true"^^xsd:boolean ;
	queryall_query:inputRegex "^(.+)" ;
	queryall_query:templateString "" ;
	queryall_query:queryUriTemplateString "${defaultHostAddress}${input_1}" ;
	queryall_query:standardUriTemplateString "${defaultHostAddress}${input_1}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_normalisedStandardUri}\"><ns0pred:seeAlso xmlns:ns0pred=\"http://www.w3.org/2000/01/rdf-schema#\">${xmlEncoded_endpointUrl}</ns0pred:seeAlso></rdf:Description>" ;
	queryall_query:inRobotsTxt "false"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:includeThenExclude .

bio2rdf_query:fasta a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "false"^^xsd:boolean ;
	dc:title "fasta" ;
	queryall_query:handleAllNamespaces "true"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^fasta/([\\w-]+):(.+)" ;
	queryall_query:templateString "" ;
	queryall_query:queryUriTemplateString "${defaultHostAddress}fasta/${input_1}${defaultSeparator}${input_2}" ;
	queryall_query:standardUriTemplateString "${defaultHostAddress}${input_1}${defaultSeparator}${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputUrlEncoded_normalisedStandardUri}\"><ns0pred:urlFasta xmlns:ns0pred=\"${defaultHostAddress}bio2rdf_resource:\">${xmlEncoded_endpointUrl}</ns0pred:urlFasta></rdf:Description>" ;
	queryall_query:inRobotsTxt "true"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int ;
	queryall_query:includeQueryType bio2rdf_query:fasta .
	

bio2rdf_query:fastainclude a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "false"^^xsd:boolean ;
	dc:title "fasta" ;
	queryall_query:handleAllNamespaces "true"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^([\\w-]+):(.+)" ;
	queryall_query:templateString "" ;
	queryall_query:queryUriTemplateString "${defaultHostAddress}fasta/${input_1}${defaultSeparator}${input_2}" ;
	queryall_query:standardUriTemplateString "${defaultHostAddress}${input_1}${defaultSeparator}${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputUrlEncoded_privateuppercase_normalisedStandardUri}\"><ns0pred:urlFastaList xmlns:ns0pred=\"${defaultHostAddress}bio2rdf_resource:\" rdf:resource=\"${xmlEncoded_inputUrlEncoded_privateuppercase_normalisedQueryUri}\"></ns0pred:urlFastaList></rdf:Description>" ;
	queryall_query:inRobotsTxt "true"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int ;
	queryall_query:includeQueryType bio2rdf_query:fastainclude .



bio2rdf_query:constructtwolevel a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "true"^^xsd:boolean ;
	dc:title "constructtwolevel" ;
    <http://www.w3.org/2000/01/rdf-schema#comment> "Provides a CONSTRUCT query that allows either one or two levels of introspection into the RDF structure." ;
	queryall_query:handleAllNamespaces "false"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^([\\w-]+):(.+)" ;
	queryall_query:templateString "CONSTRUCT { <${inputUrlEncoded_normalisedStandardUri}> ?p ?o . ?o ?p2 ?o2 . } WHERE { ${graphStart} <${inputUrlEncoded_endpointSpecificUri}> ?p ?o . OPTIONAL { ?o ?p2 ?o2 . } ${graphEnd}  } ${limit} ${sparqlOffset}" ;
	queryall_query:queryUriTemplateString "${defaultHostAddress}${input_1}${defaultSeparator}${input_2}" ;
	queryall_query:standardUriTemplateString "${defaultHostAddress}${input_1}${defaultSeparator}${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "" ;
	queryall_query:inRobotsTxt "false"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int ;
	queryall_query:includeQueryType bio2rdf_query:construct .

bio2rdf_query:xmlfromlowercase a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "false"^^xsd:boolean ;
	dc:title "xmlfromlowercase" ;
	queryall_query:handleAllNamespaces "true"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^xml/([\\w-]+):(.+)" ;
	queryall_query:templateString "" ;
	queryall_query:queryUriTemplateString "${defaultHostAddress}xml/${input_1}${defaultSeparator}${input_2}" ;
	queryall_query:standardUriTemplateString "${defaultHostAddress}${input_1}${defaultSeparator}${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputUrlEncoded_privateuppercase_normalisedStandardUri}\"><ns0pred:xmlUrl xmlns:ns0pred=\"${defaultHostAddress}bio2rdf_resource:\">${xmlEncoded_inputUrlEncoded_privateuppercase_normalisedQueryUri}</ns0pred:xmlUrl></rdf:Description>" ;
	queryall_query:inRobotsTxt "true"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int .

bio2rdf_query:linksbynamespace a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "true"^^xsd:boolean ;
	dc:title "linksns" ;
	queryall_query:handleAllNamespaces "true"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^linksns/([\\w-]+)/([\\w-]+):(.+)" ;
	queryall_query:templateString "CONSTRUCT { ?s ?p <${inputUrlEncoded_normalisedStandardUri}> . ?s a ?linkedRecordType . ?s <http://www.w3.org/2000/01/rdf-schema#label> ?label . ?s <http://purl.org/dc/elements/1.1/title> ?title . ?s <http://www.w3.org/2004/02/skos/core#prefLabel> ?skoslabel . } WHERE {  ${graphStart}  ?s ?p <${inputUrlEncoded_endpointSpecificUri}> . OPTIONAL { ?s a ?linkedRecordType . } OPTIONAL { ?s <http://www.w3.org/2000/01/rdf-schema#label> ?label . } OPTIONAL { ?s <http://purl.org/dc/elements/1.1/title> ?title . } OPTIONAL { ?s <http://www.w3.org/2004/02/skos/core#prefLabel> ?skoslabel . } ${graphEnd}  } ${limit} ${sparqlOffset}" ; 
	queryall_query:queryUriTemplateString "${defaultHostAddress}linksns/${input_1}/${input_2}:${input_3}" ;
	queryall_query:standardUriTemplateString "${defaultHostAddress}${input_2}:${input_3}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputUrlEncoded_normalisedStandardUri}\"><ns0pred:xNamespaceLinks xmlns:ns0pred=\"${defaultHostAddress}bio2rdf_resource:\" rdf:resource=\"${xmlEncoded_inputUrlEncoded_normalisedQueryUri}\"/><ns0pred:xCountLinks xmlns:ns0pred=\"${defaultHostAddress}bio2rdf_resource:\" rdf:resource=\"${defaultHostAddress}links/${xmlEncoded_urlEncoded_input_2}:${xmlEncoded_urlEncoded_input_3}\"/></rdf:Description>" ;
	queryall_query:inRobotsTxt "false"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int , "2"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int .

bio2rdf_query:fulllinksbynamespace a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "true"^^xsd:boolean ;
	dc:title "fulllinksns" ;
	queryall_query:handleAllNamespaces "true"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^fulllinksns/([\\w-]+)/([\\w-]+):(.+)" ;
	queryall_query:templateString "CONSTRUCT { ?s ?p <${inputUrlEncoded_normalisedStandardUri}> . ?s ?p2 ?o . } WHERE {  ${graphStart}  ?s ?p <${inputUrlEncoded_endpointSpecificUri}> . OPTIONAL { ?s ?p2 ?o . } ${graphEnd}  } ${limit} ${sparqlOffset}" ;
	queryall_query:queryUriTemplateString "${defaultHostAddress}fulllinksns/${input_1}/${input_2}:${input_3}" ;
	queryall_query:standardUriTemplateString "${defaultHostAddress}${input_2}:${input_3}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputUrlEncoded_normalisedStandardUri}\"><ns0pred:xNamespaceLinks xmlns:ns0pred=\"${defaultHostAddress}bio2rdf_resource:\" rdf:resource=\"${xmlEncoded_inputUrlEncoded_normalisedQueryUri}\"/><ns0pred:xCountLinks xmlns:ns0pred=\"${defaultHostAddress}bio2rdf_resource:\" rdf:resource=\"${defaultHostAddress}links/${xmlEncoded_urlEncoded_input_2}:${xmlEncoded_urlEncoded_input_3}\"/></rdf:Description>" ;
	queryall_query:inRobotsTxt "true"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int , "2"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int .

bio2rdf_query:provenancebykey a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "true"^^xsd:boolean ;
	dc:title "provenancebykey" ;
	queryall_query:handleAllNamespaces "true"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "false"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "true"^^xsd:boolean ;
	queryall_query:inputRegex "^provenancebykey/(.+)" ;
	queryall_query:templateString "CONSTRUCT { ?s queryall_provenance:elementKey <${inputUrlEncoded_normalisedStandardUri}> . ?s ?p2 ?o . } WHERE {  ${graphStart}  ?s ?p <${inputUrlEncoded_endpointSpecificUri}> . OPTIONAL { ?s ?p2 ?o . } ${graphEnd}  } ${limit} ${sparqlOffset}" ;
	queryall_query:queryUriTemplateString "${defaultHostAddress}provenancebykey/${input_1}" ;
	queryall_query:standardUriTemplateString "${defaultHostAddress}${input_1}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputUrlEncoded_normalisedStandardUri}\"><ns0pred:hasProvenanceRecords xmlns:ns0pred=\"${defaultHostAddress}bio2rdf_resource:\" rdf:resource=\"${xmlEncoded_inputUrlEncoded_normalisedQueryUri}\"/><ns0pred:xCountLinks xmlns:ns0pred=\"${defaultHostAddress}bio2rdf_resource:\" rdf:resource=\"${defaultHostAddress}links/${xmlEncoded_urlEncoded_input_2}:${xmlEncoded_urlEncoded_input_3}\"/></rdf:Description>" ;
	queryall_query:inRobotsTxt "true"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude .

bio2rdf_query:unsafelinksbynamespace a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "true"^^xsd:boolean ;
	dc:title "unsafelinksbynamespace" ;
	queryall_query:handleAllNamespaces "true"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^linksns/([\\w-]+)/([\\w-]+):(.+)" ;
	queryall_query:templateString "CONSTRUCT { ?s ?p <${ntriplesEncoded_normalisedStandardUri}> . ?s a ?linkedRecordType . ?s <http://www.w3.org/2000/01/rdf-schema#label> ?label . ?s <http://purl.org/dc/elements/1.1/title> ?title . ?s <http://www.w3.org/2004/02/skos/core#prefLabel> ?skoslabel . } WHERE {  ${graphStart}  ?s ?p <${ntriplesEncoded_endpointSpecificUri}> . OPTIONAL { ?s a ?linkedRecordType . } OPTIONAL { ?s <http://www.w3.org/2000/01/rdf-schema#label> ?label . } OPTIONAL { ?s <http://purl.org/dc/elements/1.1/title> ?title . } OPTIONAL { ?s <http://www.w3.org/2004/02/skos/core#prefLabel> ?skoslabel . } ${graphEnd}  } ${limit} ${sparqlOffset}" ;
	queryall_query:queryUriTemplateString "${defaultHostAddress}linksns/${input_1}/${input_2}:${input_3}" ;
	queryall_query:standardUriTemplateString "${defaultHostAddress}${input_2}:${input_3}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputUrlEncoded_normalisedStandardUri}\"><ns0pred:xNamespaceLinks xmlns:ns0pred=\"${defaultHostAddress}bio2rdf_resource:\" rdf:resource=\"${xmlEncoded_inputUrlEncoded_normalisedQueryUri}\"/><ns0pred:xCountLinks xmlns:ns0pred=\"${defaultHostAddress}bio2rdf_resource:\" rdf:resource=\"${defaultHostAddress}links/${xmlEncoded_urlEncoded_input_2}:${xmlEncoded_urlEncoded_input_3}\"/></rdf:Description>" ;
	queryall_query:inRobotsTxt "false"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int , "2"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int .

bio2rdf_query:plusurlencodedlinksbynamespace a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "true"^^xsd:boolean ;
	dc:title "plusurlencodedlinksbynamespace" ;
	queryall_query:handleAllNamespaces "true"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^linksns/([\\w-]+)/([\\w-]+):(.+)" ;
	queryall_query:templateString "CONSTRUCT { ?s ?p <${inputPlusUrlEncoded_normalisedStandardUri}> . ?s a ?linkedRecordType . ?s <http://www.w3.org/2000/01/rdf-schema#label> ?label . ?s <http://purl.org/dc/elements/1.1/title> ?title . ?s <http://www.w3.org/2004/02/skos/core#prefLabel> ?skoslabel . } WHERE {  ${graphStart}  ?s ?p <${inputPlusUrlEncoded_endpointSpecificUri}> . OPTIONAL { ?s a ?linkedRecordType . } OPTIONAL { ?s <http://www.w3.org/2000/01/rdf-schema#label> ?label . } OPTIONAL { ?s <http://purl.org/dc/elements/1.1/title> ?title . } OPTIONAL { ?s <http://www.w3.org/2004/02/skos/core#prefLabel> ?skoslabel . } ${graphEnd}  } ${limit} ${sparqlOffset}" ;
	queryall_query:queryUriTemplateString "${defaultHostAddress}linksns/${input_1}/${input_2}:${input_3}" ;
	queryall_query:standardUriTemplateString "${defaultHostAddress}${input_2}:${input_3}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputUrlEncoded_normalisedStandardUri}\"><ns0pred:xNamespaceLinks xmlns:ns0pred=\"${defaultHostAddress}bio2rdf_resource:\" rdf:resource=\"${xmlEncoded_inputUrlEncoded_normalisedQueryUri}\"/><ns0pred:xCountLinks xmlns:ns0pred=\"${defaultHostAddress}bio2rdf_resource:\" rdf:resource=\"${defaultHostAddress}links/${xmlEncoded_urlEncoded_input_2}:${xmlEncoded_urlEncoded_input_3}\"/></rdf:Description>" ;
	queryall_query:inRobotsTxt "false"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int , "2"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int .

bio2rdf_query:unsafeprimaryreverseconstruct a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "true"^^xsd:boolean ;
	dc:title "unsafeprimaryreverseconstruct" ;
	queryall_query:handleAllNamespaces "true"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^([\\w-]+):(.+)" ;
	queryall_query:templateString "CONSTRUCT { <${inputUrlEncoded_normalisedStandardUri}> <http://bio2rdf.org/bio2rdf_resource:linkedToFrom> ?s . } WHERE { ${graphStart} ?s ?p <${ntriplesEncoded_endpointSpecificUri}> . ${graphEnd}  } ${limit} ${sparqlOffset}" ;
	queryall_query:queryUriTemplateString "${defaultHostAddress}${input_1}${defaultSeparator}${input_2}" ;
	queryall_query:standardUriTemplateString "${defaultHostAddress}${input_1}${defaultSeparator}${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "" ;
	queryall_query:inRobotsTxt "false"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int ;
	queryall_query:includeQueryType bio2rdf_query:unsafeconstruct .

bio2rdf_query:unsafesecondaryreverseconstruct a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "true"^^xsd:boolean ;
	dc:title "unsafesecondaryreverseconstruct" ;
	queryall_query:handleAllNamespaces "true"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^([\\w-]+):(.+)" ;
	queryall_query:templateString "CONSTRUCT { <${normalisedStandardUri}> <http://bio2rdf.org/bio2rdf_resource:linkedToFrom> ?s . } WHERE { ${graphStart} ?s ?p <${ntriplesEncoded_endpointSpecificUri}> . ${graphEnd}  } ${limit} ${sparqlOffset}" ;
	queryall_query:queryUriTemplateString "${defaultHostAddress}${input_1}${defaultSeparator}${input_2}" ;
	queryall_query:standardUriTemplateString "${defaultHostAddress}${input_1}${defaultSeparator}${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "" ;
	queryall_query:inRobotsTxt "false"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int ;
	queryall_query:includeQueryType bio2rdf_query:unsafeconstruct .

bio2rdf_query:plusurlencodedprimaryreverseconstruct a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "true"^^xsd:boolean ;
	dc:title "plusurlencodedprimaryreverseconstruct" ;
	queryall_query:handleAllNamespaces "true"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^([\\w-]+):(.+)" ;
	queryall_query:templateString "CONSTRUCT { <${inputPlusUrlEncoded_normalisedStandardUri}> <http://bio2rdf.org/bio2rdf_resource:linkedToFrom> ?s . } WHERE { ${graphStart} ?s ?p <${inputPlusUrlEncoded_endpointSpecificUri}> . ${graphEnd}  } ${limit} ${sparqlOffset}" ;
	queryall_query:queryUriTemplateString "${defaultHostAddress}${input_1}${defaultSeparator}${input_2}" ;
	queryall_query:standardUriTemplateString "${defaultHostAddress}${input_1}${defaultSeparator}${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "" ;
	queryall_query:inRobotsTxt "false"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int ;
	queryall_query:includeQueryType bio2rdf_query:plusurlencodedconstruct .

bio2rdf_query:plusurlencodedsecondaryreverseconstruct a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "true"^^xsd:boolean ;
	dc:title "plusurlencodedsecondaryreverseconstruct" ;
	queryall_query:handleAllNamespaces "true"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^([\\w-]+):(.+)" ;
	queryall_query:templateString "CONSTRUCT { <${normalisedStandardUri}> <http://bio2rdf.org/bio2rdf_resource:linkedToFrom> ?s . } WHERE { ${graphStart} ?s ?p <${ntriplesEncoded_endpointSpecificUri}> . ${graphEnd}  } ${limit} ${sparqlOffset}" ;
	queryall_query:queryUriTemplateString "${defaultHostAddress}${input_1}${defaultSeparator}${input_2}" ;
	queryall_query:standardUriTemplateString "${defaultHostAddress}${input_1}${defaultSeparator}${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "" ;
	queryall_query:inRobotsTxt "false"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int ;
	queryall_query:includeQueryType bio2rdf_query:plusurlencodedconstruct .

bio2rdf_query:namespacebytype a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "true"^^xsd:boolean ;
	dc:title "typens" ;
	queryall_query:handleAllNamespaces "true"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^typens/([\\w-]+):(.+)" ;
	queryall_query:templateString "CONSTRUCT { ?s <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <${normalisedStandardUri}> . ?s <http://www.w3.org/2000/01/rdf-schema#label> ?label . ?s <http://purl.org/dc/elements/1.1/title> ?title . ?s <http://bio2rdf.org/ns/go#name> ?goName . ?s <http://www.w3.org/2004/02/skos/core#prefLabel> ?skoslabel . } WHERE { ${graphStart} ?s <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <${endpointSpecificUri}> . OPTIONAL { ?s <http://www.w3.org/2000/01/rdf-schema#label> ?label . } OPTIONAL { ?s <http://purl.org/dc/elements/1.1/title> ?title . } OPTIONAL { ?s <http://bio2rdf.org/ns/go#name> ?goName . } OPTIONAL { ?s <http://www.w3.org/2004/02/skos/core#prefLabel> ?skoslabel . } ${graphEnd} } ${limit} ${sparqlOffset}" ;
	queryall_query:queryUriTemplateString "${defaultHostAddress}typens/${input_1}${defaultSeparator}${input_2}" ;
	queryall_query:standardUriTemplateString "${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "" ;
	queryall_query:inRobotsTxt "true"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int .

bio2rdf_query:data a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "false"^^xsd:boolean ;
	dc:title "data" ;
	queryall_query:handleAllNamespaces "true"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^data/([\\w-]+):(.+)" ;
	queryall_query:templateString "" ;
	queryall_query:queryUriTemplateString "${defaultHostAddress}data/${input_1}${defaultSeparator}${input_2}" ;
	queryall_query:standardUriTemplateString "${defaultHostAddress}${input_1}${defaultSeparator}${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputUrlEncoded_normalisedStandardUri}\"><ns0pred:urlData xmlns:ns0pred=\"${defaultHostAddress}bio2rdf_resource:\">${xmlEncoded_inputUrlEncoded_normalisedQueryUri}</ns0pred:urlData></rdf:Description>" ;
	queryall_query:inRobotsTxt "true"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int .

bio2rdf_query:construct a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "true"^^xsd:boolean ;
	dc:title "construct" ;
	queryall_query:handleAllNamespaces "true"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^([\\w-]+):(.+)" ;
	queryall_query:templateString "CONSTRUCT { <${inputUrlEncoded_normalisedStandardUri}> ?p ?o . } WHERE { ${graphStart} <${inputUrlEncoded_endpointSpecificUri}> ?p ?o . ${graphEnd}  } ${limit} ${sparqlOffset}" ;
	queryall_query:queryUriTemplateString "${defaultHostAddress}${input_1}${defaultSeparator}${input_2}" ;
	queryall_query:standardUriTemplateString "${defaultHostAddress}${input_1}${defaultSeparator}${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputUrlEncoded_normalisedStandardUri}\"><ns0pred:sameAs xmlns:ns0pred=\"http://www.w3.org/2002/07/owl#\" rdf:resource=\"${xmlEncoded_inputUrlEncoded_endpointSpecificUri}\"/></rdf:Description>" ;
	queryall_query:inRobotsTxt "false"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int ;
	queryall_query:includeQueryType bio2rdf_query:construct .

bio2rdf_query:constructdnsonly a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "true"^^xsd:boolean ;
	dc:title "constructdnsonly" ;
	queryall_query:handleAllNamespaces "true"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^dnsonly/([\\w-]+):(.+)" ;
	queryall_query:templateString "CONSTRUCT { <${inputUrlEncoded_normalisedStandardUri}> ?p ?o . } WHERE { ${graphStart} <${inputUrlEncoded_endpointSpecificUri}> ?p ?o . ${graphEnd}  } ${limit} ${sparqlOffset}" ;
	queryall_query:queryUriTemplateString "${defaultHostAddress}${input_1}${defaultSeparator}${input_2}" ;
	queryall_query:standardUriTemplateString "${defaultHostAddress}${input_1}${defaultSeparator}${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "" ;
	queryall_query:inRobotsTxt "false"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int ;
	queryall_query:includeQueryType bio2rdf_query:construct .

bio2rdf_query:primaryreverseconstructfromdrugbankinchikey a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "true"^^xsd:boolean ;
	dc:title "primaryreverseconstructfromdrugbankinchikey" ;
	queryall_query:handleAllNamespaces "false"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^([\\w-]+):(.+)" ;
	queryall_query:templateString "CONSTRUCT { <${inputUrlEncoded_normalisedStandardUri}> <http://bio2rdf.org/bio2rdf_resource:linkedToFrom> ?s . ?s ?p ?o} WHERE { ${graphStart} ?s <http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/inchiKey> \"${urlEncoded_input_2}\" . ?s ?p ?o . ${graphEnd}  } ${limit} ${sparqlOffset}" ;
	queryall_query:queryUriTemplateString "${defaultHostAddress}${input_1}${defaultSeparator}${input_2}" ;
	queryall_query:standardUriTemplateString "${defaultHostAddress}${input_1}${defaultSeparator}${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputUrlEncoded_normalisedStandardUri}\"><ns0pred:sameAs xmlns:ns0pred=\"http://www.w3.org/2002/07/owl#\" rdf:resource=\"${xmlEncoded_inputUrlEncoded_endpointSpecificUri}\"/></rdf:Description>" ;
	queryall_query:inRobotsTxt "false"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:namespaceToHandle bio2rdf_ns:inchikey ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int ;
	queryall_query:includeQueryType bio2rdf_query:primaryreverseconstructfromdrugbankinchikey .

# TODO: FIXME: make this work for ATC codes and the prefix/suffix information about them found in wikipedia
bio2rdf_query:primaryreverseconstructfromdbpediaatctwopart a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "true"^^xsd:boolean ;
	dc:title "primaryreverseconstructfromdbpediaatc" ;
	queryall_query:handleAllNamespaces "false"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^([\\w-]+):([A-Z][A-Z]?[0-9]?[0-9]?[A-Z]?[A-Z]?[0-9]?[0-9]?)" ;
	queryall_query:templateString "CONSTRUCT { <${inputUrlEncoded_normalisedStandardUri}> <http://bio2rdf.org/bio2rdf_resource:linkedToFrom> ?s . ?s ?p ?o} WHERE { ${graphStart} ?s <http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/inchiKey> \"${urlEncoded_input_2}\" . ?s ?p ?o . ${graphEnd}  } ${limit} ${sparqlOffset}" ;
	queryall_query:queryUriTemplateString "${defaultHostAddress}${input_1}${defaultSeparator}${input_2}" ;
	queryall_query:standardUriTemplateString "${defaultHostAddress}${input_1}${defaultSeparator}${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputUrlEncoded_normalisedStandardUri}\"><ns0pred:sameAs xmlns:ns0pred=\"http://www.w3.org/2002/07/owl#\" rdf:resource=\"${xmlEncoded_inputUrlEncoded_endpointSpecificUri}\"/></rdf:Description>" ;
	queryall_query:inRobotsTxt "false"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:namespaceToHandle bio2rdf_ns:atc ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int ;
	queryall_query:includeQueryType bio2rdf_query:primaryreverseconstructfromdrugbankinchikey .

bio2rdf_query:primaryreverseconstructfromblueobeliskinchikey a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "true"^^xsd:boolean ;
	dc:title "primaryreverseconstructfromblueobeliskinchikey" ;
	queryall_query:handleAllNamespaces "false"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^([\\w-]+):(.+)" ;
	queryall_query:templateString "CONSTRUCT { <${inputUrlEncoded_normalisedStandardUri}> <http://bio2rdf.org/bio2rdf_resource:linkedToFrom> ?s . ?s ?p ?o} WHERE { ${graphStart} ?s <http://www.blueobelisk.org/chemistryblogs/inchikey> ?inchikey . FILTER(REGEX(?inchikey, \"${urlEncoded_input_2}\")) . ?s ?p ?o . ${graphEnd}  } ${limit} ${sparqlOffset}" ;
	queryall_query:queryUriTemplateString "${defaultHostAddress}${input_1}${defaultSeparator}${input_2}" ;
	queryall_query:standardUriTemplateString "${defaultHostAddress}${input_1}${defaultSeparator}${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputUrlEncoded_normalisedStandardUri}\"><ns0pred:sameAs xmlns:ns0pred=\"http://www.w3.org/2002/07/owl#\" rdf:resource=\"${xmlEncoded_inputUrlEncoded_endpointSpecificUri}\"/></rdf:Description>" ;
	queryall_query:inRobotsTxt "false"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:namespaceToHandle bio2rdf_ns:inchikey ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int ;
	queryall_query:includeQueryType bio2rdf_query:primaryreverseconstructfromblueobeliskinchikey .

bio2rdf_query:primaryreverseconstructfromblueobeliskinchi a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "true"^^xsd:boolean ;
	dc:title "primaryreverseconstructfromblueobeliskinchi" ;
	queryall_query:handleAllNamespaces "false"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^([\\w-]+):(.+)" ;
	queryall_query:templateString "CONSTRUCT { <${inputUrlEncoded_normalisedStandardUri}> <http://bio2rdf.org/bio2rdf_resource:linkedToFrom> ?s . ?s ?p ?o} WHERE { ${graphStart} ?s <http://www.blueobelisk.org/chemistryblogs/inchi> \"InChI=${plusUrlEncoded_input_2}\" . ?s ?p ?o . ${graphEnd}  } ${limit} ${sparqlOffset}" ;
	queryall_query:queryUriTemplateString "${defaultHostAddress}${input_1}${defaultSeparator}${input_2}" ;
	queryall_query:standardUriTemplateString "${defaultHostAddress}${input_1}${defaultSeparator}${plusUrlEncoded_input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputUrlEncoded_normalisedStandardUri}\"><ns0pred:sameAs xmlns:ns0pred=\"http://www.w3.org/2002/07/owl#\" rdf:resource=\"${xmlEncoded_inputUrlEncoded_endpointSpecificUri}\"/></rdf:Description>" ;
	queryall_query:inRobotsTxt "false"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:namespaceToHandle bio2rdf_ns:inchi ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int ;
	queryall_query:includeQueryType bio2rdf_query:primaryreverseconstructfromblueobeliskinchi .

bio2rdf_query:primaryreverseconstructfromiupacinchi a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "true"^^xsd:boolean ;
	dc:title "primaryreverseconstructfromiupacinchi" ;
	queryall_query:handleAllNamespaces "false"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^([\\w-]+):(.+)" ;
	queryall_query:templateString "CONSTRUCT { <${inputUrlEncoded_normalisedStandardUri}> <http://bio2rdf.org/bio2rdf_resource:linkedToFrom> ?s . ?s ?p ?o} WHERE { ${graphStart} ?s <http://www.iupac.org/inchi> \"InChI=${plusUrlEncoded_input_2}\" . ?s ?p ?o . ${graphEnd}  } ${limit} ${sparqlOffset}" ;
	queryall_query:queryUriTemplateString "${defaultHostAddress}${input_1}${defaultSeparator}${input_2}" ;
	queryall_query:standardUriTemplateString "${defaultHostAddress}${input_1}${defaultSeparator}${plusUrlEncoded_input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputUrlEncoded_normalisedStandardUri}\"><ns0pred:sameAs xmlns:ns0pred=\"http://www.w3.org/2002/07/owl#\" rdf:resource=\"${xmlEncoded_inputUrlEncoded_endpointSpecificUri}\"/></rdf:Description>" ;
	queryall_query:inRobotsTxt "false"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:namespaceToHandle bio2rdf_ns:inchi ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int ;
	queryall_query:includeQueryType bio2rdf_query:primaryreverseconstructfromiupacinchi .

bio2rdf_query:spectrumfrominchi a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "true"^^xsd:boolean ;
	dc:title "spectrumfrominchi" ;
	queryall_query:handleAllNamespaces "false"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^spectrumfrominchi/([\\w-]+):(.+)" ;
	queryall_query:templateString "CONSTRUCT { <${inputUrlEncoded_normalisedStandardUri}> <http://www.blueobelisk.org/chemistryblogs/inchi> \"InChI=${plusUrlEncoded_input_2}\" . ?s <http://www.blueobelisk.org/chemistryblogs/inchi> \"InChI=${plusUrlEncoded_input_2}\" . ?s <http://www.nmrshiftdb.org/onto#hasSpectrum> ?spectrum . ?spectrum ?p ?o} WHERE { ${graphStart} ?s <http://www.blueobelisk.org/chemistryblogs/inchi> \"InChI=${plusUrlEncoded_input_2}\" . ?s <http://www.nmrshiftdb.org/onto#hasSpectrum> ?spectrum . ?spectrum ?p ?o . ${graphEnd}  } ${limit} ${sparqlOffset}" ;
	queryall_query:queryUriTemplateString "${defaultHostAddress}spectrumfrominchi/${input_1}${defaultSeparator}${input_2}" ;
	queryall_query:standardUriTemplateString "${defaultHostAddress}${input_1}${defaultSeparator}${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputUrlEncoded_normalisedStandardUri}\"><ns0pred:sameAs xmlns:ns0pred=\"http://www.w3.org/2002/07/owl#\" rdf:resource=\"${xmlEncoded_inputUrlEncoded_endpointSpecificUri}\"/></rdf:Description>" ;
	queryall_query:inRobotsTxt "false"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:namespaceToHandle bio2rdf_ns:inchi ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int ;
	queryall_query:includeQueryType bio2rdf_query:spectrumfrominchi .

bio2rdf_query:spectrumfrominchikey a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "true"^^xsd:boolean ;
	dc:title "spectrumfrominchikey" ;
	queryall_query:handleAllNamespaces "false"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^spectrumfrominchikey/([\\w-]+):(.+)" ;
	queryall_query:templateString "CONSTRUCT { <${inputUrlEncoded_normalisedStandardUri}> <http://www.blueobelisk.org/chemistryblogs/inchikey> ?inchikey. ?s <http://www.blueobelisk.org/chemistryblogs/inchikey> ?inchikey . ?s <http://www.nmrshiftdb.org/onto#hasSpectrum> ?spectrum . ?spectrum ?p ?o} WHERE { ${graphStart} ?s <http://www.blueobelisk.org/chemistryblogs/inchikey> ?inchikey . FILTER(REGEX(?inchikey, \"${plusUrlEncoded_input_2}\")) . ?s <http://www.nmrshiftdb.org/onto#hasSpectrum> ?spectrum . ?spectrum ?p ?o . ${graphEnd}  } ${limit} ${sparqlOffset}" ;
	queryall_query:queryUriTemplateString "${defaultHostAddress}spectrumfrominchi/${input_1}${defaultSeparator}${input_2}" ;
	queryall_query:standardUriTemplateString "${defaultHostAddress}${input_1}${defaultSeparator}${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputUrlEncoded_normalisedStandardUri}\"><ns0pred:sameAs xmlns:ns0pred=\"http://www.w3.org/2002/07/owl#\" rdf:resource=\"${xmlEncoded_inputUrlEncoded_endpointSpecificUri}\"/></rdf:Description>" ;
	queryall_query:inRobotsTxt "false"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:namespaceToHandle bio2rdf_ns:inchikey ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int ;
	queryall_query:includeQueryType bio2rdf_query:spectrumfrominchikey .

bio2rdf_query:linksfromnmrshiftdbspectrumtype a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "true"^^xsd:boolean ;
	dc:title "linksfromnmrshiftdbspectrumtype" ;
	queryall_query:handleAllNamespaces "false"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^([\\w-]+):(.+)" ;
	queryall_query:templateString "CONSTRUCT { <${inputUrlEncoded_normalisedStandardUri}> <http://bio2rdf.org/bio2rdf_resource:linkedToFrom> ?s . } WHERE { ${graphStart} ?s <http://www.nmrshiftdb.org/onto#spectrumType> ?spectrumtype . FILTER(REGEX(?spectrumtype, \"${urlEncoded_input_2}\")) . ${graphEnd}  } ${limit} ${sparqlOffset}" ;
	queryall_query:queryUriTemplateString "${defaultHostAddress}${input_1}${defaultSeparator}${input_2}" ;
	queryall_query:standardUriTemplateString "${defaultHostAddress}${input_1}${defaultSeparator}${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputUrlEncoded_normalisedStandardUri}\"><ns0pred:sameAs xmlns:ns0pred=\"http://www.w3.org/2002/07/owl#\" rdf:resource=\"${xmlEncoded_inputUrlEncoded_endpointSpecificUri}\"/></rdf:Description>" ;
	queryall_query:inRobotsTxt "false"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:namespaceToHandle bio2rdf_ns:nmrshiftdb_spectrumtype ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int ;
	queryall_query:includeQueryType bio2rdf_query:linksfromnmrshiftdbspectrumtype .

bio2rdf_query:genbankinsertions a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "false"^^xsd:boolean ;
	dc:title "genbankinsertions" ;
	queryall_query:handleAllNamespaces "false"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^([\\w-]+):(.+)" ;
	queryall_query:templateString "" ;
	queryall_query:queryUriTemplateString "${defaultHostAddress}${input_1}${defaultSeparator}${input_2}" ;
	queryall_query:standardUriTemplateString "${defaultHostAddress}${input_1}${defaultSeparator}${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "" ;
	queryall_query:inRobotsTxt "false"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:namespaceToHandle bio2rdf_ns:genbank , bio2rdf_ns:gi , bio2rdf_ns:ncbi ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int ;
	queryall_query:includeQueryType bio2rdf_query:asn1 , bio2rdf_query:fasta , bio2rdf_query:genbankpartial , bio2rdf_query:genbankfull , bio2rdf_query:xmlfromlowercase , bio2rdf_query:imagefromlowercase , bio2rdf_query:relatedfromlowercase .

bio2rdf_query:nsinterlinksbetweentypes a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "false"^^xsd:boolean ;
	dc:title "namespacetypeinternallinks" ;
	queryall_query:handleAllNamespaces "true"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^namespacetypeinternallinks/([\\w-]+)" ;
	queryall_query:templateString "CONSTRUCT { <${inputUrlEncoded_normalisedQueryUri}> <http://bio2rdf.org/bio2rdf_resource:hasNamespaceTypeInternalLinkCountResult> <${defaultHostAddress}namespacetypeinternallinksresultref/${urlEncoded_endpointUrl}/${urlEncoded_graphUri}/${urlEncoded_input_1}> . <${defaultHostAddress}namespacetypeinternallinksresultref/${urlEncoded_endpointUrl}/${urlEncoded_graphUri}/${urlEncoded_input_1}> <http://bio2rdf.org/bio2rdf_resource:sparqlEndpointUrl> <${endpointUrl}> .  <${defaultHostAddress}namespacetypeinternallinksresultref/${urlEncoded_endpointUrl}/${urlEncoded_graphUri}/${urlEncoded_input_1}> <http://bio2rdf.org/bio2rdf_resource:linksFromNamespace> <${inputUrlEncoded_normalisedStandardUri}> .  <${defaultHostAddress}namespacetypeinternallinksresultref/${urlEncoded_endpointUrl}/${urlEncoded_graphUri}/${urlEncoded_input_1}> <http://bio2rdf.org/bio2rdf_resource:sparqlGraphUri> \"${graphUri}\" .  <${defaultHostAddress}namespacetypeinternallinksresultref/${urlEncoded_endpointUrl}/${urlEncoded_graphUri}/${urlEncoded_input_1}> <http://bio2rdf.org/bio2rdf_resource:hasLinkCount> `(SELECT DISTINCT ?origintype ?endtype COUNT(?s2) AS ?linkcount WHERE { ${graphStart} ?s ?p ?o . ?s a ?origintype . ?s2 ?p2 ?s . ?s2 a ?endtype . ${graphEnd} })` } where { ?s1 ?p1 ?o1 } limit 1" ;
	queryall_query:queryUriTemplateString "${defaultHostAddress}namespacetypeinternallinks/${urlEncoded_input_1}" ;
	queryall_query:standardUriTemplateString "${defaultHostAddress}ns:${urlEncoded_input_1}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputUrlEncoded_normalisedStandardUri}\"><ns0pred:xNamespaceTypeInternalLinks xmlns:ns0pred=\"${defaultHostAddress}bio2rdf_resource:\" rdf:resource=\"${xmlEncoded_inputUrlEncoded_normalisedQueryUri}\"/></rdf:Description>" ;
	queryall_query:inRobotsTxt "true"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:includeThenExclude ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int ;
	queryall_query:includeQueryType bio2rdf_query:namespacecount , bio2rdf_query:namespaceuricount .

bio2rdf_query:imagefromlowercase a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "false"^^xsd:boolean ;
	dc:title "imagefromlowercase" ;
	queryall_query:handleAllNamespaces "true"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^image/([\\w-]+):(.+)" ;
	queryall_query:templateString "" ;
	queryall_query:queryUriTemplateString "${defaultHostAddress}image/${input_1}${defaultSeparator}${input_2}" ;
	queryall_query:standardUriTemplateString "${defaultHostAddress}${input_1}${defaultSeparator}${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputUrlEncoded_privateuppercase_normalisedStandardUri}\"><ns0pred:urlImageList xmlns:ns0pred=\"${defaultHostAddress}bio2rdf_resource:\" rdf:resource=\"${xmlEncoded_inputUrlEncoded_privateuppercase_normalisedQueryUri\"></ns0pred:urlImageList></rdf:Description>" ;
	queryall_query:inRobotsTxt "true"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int .

bio2rdf_query:constructnodefaults a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "true"^^xsd:boolean ;
	dc:title "constructnodefaults" ;
	queryall_query:handleAllNamespaces "true"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^constructnodefaults/([\\w-]+):(.+)" ;
	queryall_query:templateString "CONSTRUCT { <${inputUrlEncoded_normalisedStandardUri}> ?p ?o . } WHERE { ${graphStart} <${inputUrlEncoded_endpointSpecificUri}> ?p ?o . ${graphEnd}  } ${limit} ${sparqlOffset}" ;
	queryall_query:queryUriTemplateString "${defaultHostAddress}constructnodefaults/${input_1}${defaultSeparator}${input_2}" ;
	queryall_query:standardUriTemplateString "${defaultHostAddress}${input_1}${defaultSeparator}${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "" ;
	queryall_query:inRobotsTxt "false"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int ;
	queryall_query:includeQueryType bio2rdf_query:construct .

bio2rdf_query:labelsearch a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "true"^^xsd:boolean ;
	dc:title "label" ;
	queryall_query:handleAllNamespaces "true"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^label/([\\w-]+):(.+)" ;
	queryall_query:templateString "CONSTRUCT { <${normalisedStandardUri}> <http://www.w3.org/2000/01/rdf-schema#label> ?label . <${normalisedStandardUri}> dc:title ?title . <${normalisedStandardUri}> <http://purl.uniprot.org/core/title> ?uniprotTitle .  <${endpointSpecificUri}> <http://purl.org/dc/terms/title> ?dctermstitle . <${normalisedStandardUri}> <http://www.w3.org/2004/02/skos/core#prefLabel> ?skoslabel . } WHERE { ${graphStart} OPTIONAL { <${endpointSpecificUri}> <http://www.w3.org/2000/01/rdf-schema#label> ?label . } OPTIONAL { <${endpointSpecificUri}> <http://purl.org/dc/elements/1.1/title> ?title . } OPTIONAL { <${endpointSpecificUri}> <http://purl.uniprot.org/core/title> ?uniprotTitle }  OPTIONAL{ <${endpointSpecificUri}> <http://purl.org/dc/terms/title> ?dctermstitle . } OPTIONAL { <${endpointSpecificUri}> <http://www.w3.org/2004/02/skos/core#prefLabel> ?skoslabel . } ${graphEnd} } ${limit} ${sparqlOffset}" ;
	queryall_query:queryUriTemplateString "${defaultHostAddress}label/${input_1}${defaultSeparator}${input_2}" ;
	queryall_query:standardUriTemplateString "${defaultHostAddress}${input_1}${defaultSeparator}${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputUrlEncoded_normalisedStandardUri}\"><ns0pred:hasLabelSearch xmlns:ns0pred=\"${xmlEncoded_defaultHostAddress}bio2rdf_resource:\" rdf:resource=\"${xmlEncoded_inputUrlEncoded_normalisedQueryUri}\"/></rdf:Description>" ;
	queryall_query:inRobotsTxt "false"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int .

bio2rdf_query:biopaxxrefresolution a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "true"^^xsd:boolean ;
	dc:title "biopaxxrefresolution" ;
	queryall_query:handleAllNamespaces "false"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
    queryall_query:namespaceToHandle bio2rdf_ns:cpath , bio2rdf_ns:reactome ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^([\\w-]+):(.+)" ;
	queryall_query:templateString "CONSTRUCT { <${normalisedStandardUri}> <http://bio2rdf.org/ns/biopax:XREF> ?xref . ?xref ?xrefpredicate ?xrefobject . <${normalisedStandardUri}> <http://bio2rdf.org/bio2rdf_resource:xRef> ?xrefrealuri . } WHERE { ${graphStart} <${endpointSpecificUri}> <http://bio2rdf.org/ns/biopax#XREF> ?xref . ?xref ?xrefpredicate ?xrefobject . OPTIONAL { ?xref <http://bio2rdf.org/ns/bio2rdf#xRef> ?xrefrealuri . } ${graphEnd} } ${limit} ${sparqlOffset}" ;
	queryall_query:queryUriTemplateString "${defaultHostAddress}label/${input_1}${defaultSeparator}${input_2}" ;
	queryall_query:standardUriTemplateString "${defaultHostAddress}${input_1}${defaultSeparator}${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputUrlEncoded_normalisedStandardUri}\"><ns0pred:hasLabelSearch xmlns:ns0pred=\"${xmlEncoded_defaultHostAddress}bio2rdf_resource:\" rdf:resource=\"${xmlEncoded_inputUrlEncoded_normalisedQueryUri}\"/></rdf:Description>" ;
	queryall_query:inRobotsTxt "false"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int .

bio2rdf_query:biopaxxrefreverselinksbynamespace a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "true"^^xsd:boolean ;
	dc:title "biopaxxrefreverselinksbynamespace" ;
	queryall_query:handleAllNamespaces "false"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
    queryall_query:namespaceToHandle bio2rdf_ns:cpath , bio2rdf_ns:reactome , bio2rdf_ns:biopax ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^linksns/([\\w-]+)/([\\w-]+):(.+)" ;
	queryall_query:templateString "CONSTRUCT { ?refuri <http://bio2rdf.org/ns/biopax#XREF> ?xref . ?refuri ?refpredicate ?refobject . ?xref ?xrefpredicate ?xrefobject . ?xref <http://bio2rdf.org/ns/bio2rdf#xRef> <${normalisedStandardUri}> . } WHERE { ${graphStart} ?refuri <http://bio2rdf.org/ns/biopax#XREF> ?xref . ?refuri ?refpredicate ?refobject . ?xref ?xrefpredicate ?xrefobject . ?xref <http://bio2rdf.org/ns/bio2rdf#xRef> <${endpointSpecificUri}> .  ${graphEnd} } ${limit} ${sparqlOffset}" ;
	queryall_query:queryUriTemplateString "${defaultHostAddress}linksns/${input_1}/${input_2}${defaultSeparator}${input_3}" ;
	queryall_query:standardUriTemplateString "${defaultHostAddress}${input_2}${defaultSeparator}${input_3}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputUrlEncoded_normalisedStandardUri}\"><ns0pred:hasLabelSearch xmlns:ns0pred=\"${xmlEncoded_defaultHostAddress}bio2rdf_resource:\" rdf:resource=\"${xmlEncoded_inputUrlEncoded_normalisedQueryUri}\"/></rdf:Description>" ;
	queryall_query:inRobotsTxt "false"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasPublicIdentifierIndex "2"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int .

bio2rdf_query:counttriplesfromlowercase a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "false"^^xsd:boolean ;
	dc:title "counttriplesfromlowercase" ;
	queryall_query:handleAllNamespaces "true"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "false"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^counttriples/([\\w-]+):(.+)" ;
	queryall_query:templateString "CONSTRUCT { <${inputUrlEncoded_privateuppercase_normalisedQueryUri}> <http://bio2rdf.org/bio2rdf_resource:hasTripleCountResult> <${defaultHostAddress}tripleresultref/${urlEncoded_endpointUrl}/${urlEncoded_graphUri}/${urlEncoded_input_1}:${urlEncoded_uppercase_input_2}> . <${defaultHostAddress}tripleresultref/${urlEncoded_endpointUrl}/${urlEncoded_graphUri}/${urlEncoded_input_1}:${urlEncoded_uppercase_input_2}> <http://bio2rdf.org/bio2rdf_resource:sparqlEndpointUrl> <${endpointUrl}> .  <${defaultHostAddress}tripleresultref/${urlEncoded_endpointUrl}/${urlEncoded_graphUri}/${urlEncoded_input_1}:${urlEncoded_uppercase_input_2}> <http://bio2rdf.org/bio2rdf_resource:sparqlGraphUri> \"${graphUri}\" . <${defaultHostAddress}tripleresultref/${urlEncoded_endpointUrl}/${urlEncoded_graphUri}/${urlEncoded_input_1}:${urlEncoded_uppercase_input_2}> <http://bio2rdf.org/bio2rdf_resource:hasTripleCount> `(select (count(?o)) as ?countO where { ${graphStart} <${inputUrlEncoded_privatelowercase_endpointSpecificUri}> ?p ?o . ${graphEnd} })` } where { ?s1 ?p1 ?o1 } limit 1" ;
	queryall_query:queryUriTemplateString "${defaultHostAddress}counttriples/${input_1}${defaultSeparator}${input_2}" ;
	queryall_query:standardUriTemplateString "${defaultHostAddress}${input_1}${defaultSeparator}${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputUrlEncoded_privateuppercase_normalisedStandardUri}\"><ns0pred:xCountTriples xmlns:ns0pred=\"${defaultHostAddress}bio2rdf_resource:\" rdf:resource=\"${xmlEncoded_inputUrlEncoded_privateuppercase_normalisedQueryUri}\"/><ns0pred:sameAs xmlns:ns0pred=\"http://www.w3.org/2002/07/owl#\" rdf:resource=\"${xmlEncoded_inputUrlEncoded_privatelowercase_endpointSpecificUri}\"/><ns0pred:sameAs xmlns:ns0pred=\"http://www.w3.org/2002/07/owl#\" rdf:resource=\"${xmlEncoded_inputUrlEncoded_privatelowercase_normalisedStandardUri}\"/></rdf:Description>" ;
	queryall_query:inRobotsTxt "true"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int ;
	queryall_query:includeQueryType bio2rdf_query:counttriplesfromlowercase , bio2rdf_query:constructfromlowercase .

bio2rdf_query:genbankfull a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "false"^^xsd:boolean ;
	dc:title "genbankfull" ;
	queryall_query:handleAllNamespaces "true"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^genbankfull/([\\w-]+):(.+)" ;
	queryall_query:templateString "" ;
	queryall_query:queryUriTemplateString "${defaultHostAddress}genbankfull/${input_1}${defaultSeparator}${input_2}" ;
	queryall_query:standardUriTemplateString "${defaultHostAddress}${input_1}${defaultSeparator}${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputUrlEncoded_privateuppercase_normalisedStandardUri}\"><ns0pred:genbankfullUrl xmlns:ns0pred=\"${defaultHostAddress}bio2rdf_resource:\">${xmlEncoded_inputUrlEncoded_privateuppercase_normalisedQueryUri}</ns0pred:genbankfullUrl></rdf:Description>" ;
	queryall_query:inRobotsTxt "true"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int .

bio2rdf_query:primaryreverseconstructfromlowercase a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "true"^^xsd:boolean ;
	dc:title "primaryreverseconstructfromlowercase" ;
	queryall_query:handleAllNamespaces "true"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^([\\w-]+):(.+)" ;
	queryall_query:templateString "CONSTRUCT { <${inputUrlEncoded_privateuppercase_normalisedStandardUri}> <http://bio2rdf.org/bio2rdf_resource:linkedToFrom> ?s . } WHERE { ${graphStart} ?s ?p <${inputUrlEncoded_privatelowercase_endpointSpecificUri}> . ${graphEnd}  } ${limit} ${sparqlOffset}" ;
	queryall_query:queryUriTemplateString "${defaultHostAddress}${input_1}${defaultSeparator}${input_2}" ;
	queryall_query:standardUriTemplateString "${defaultHostAddress}${input_1}${defaultSeparator}${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "" ;
	queryall_query:inRobotsTxt "false"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int ;
	queryall_query:includeQueryType bio2rdf_query:constructfromlowercase .

bio2rdf_query:prosite2golinks a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "true"^^xsd:boolean ;
	dc:title "prosite2golinks" ;
	queryall_query:handleAllNamespaces "false"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^links/([\\w-]+):(.+)" ;
	queryall_query:templateString "CONSTRUCT { ?goAnnotation <http://bio2rdf.org/go_resource:has_prosite_pattern> <${inputUrlEncoded_normalisedStandardUri}> .  } WHERE {  ${graphStart}   ?goAnnotation <http://www.geneontology.org/formats/oboInOwl#hasDbXref> ?o . ?o <http://www.geneontology.org/formats/oboInOwl#hasURI> \"${inputUrlEncoded_endpointSpecificUri}\"^^xsd:anyURI . ${graphEnd}  } ${limit} ${sparqlOffset}" ;
	queryall_query:queryUriTemplateString "${defaultHostAddress}links/${input_1}${defaultSeparator}${input_2}" ;
	queryall_query:standardUriTemplateString "${defaultHostAddress}${input_1}${defaultSeparator}${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "" ;
	queryall_query:inRobotsTxt "true"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:namespaceToHandle bio2rdf_ns:prosite ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int .

bio2rdf_query:unsafelinks a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "true"^^xsd:boolean ;
	dc:title "unsafelinks" ;
	queryall_query:handleAllNamespaces "false"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "false"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^links/([\\w-]+):(.+)" ;
	queryall_query:templateString "CONSTRUCT { ?s ?p <${normalisedStandardUri}> . ?s a ?linkedRecordType . ?s <http://www.w3.org/2000/01/rdf-schema#label> ?label . ?s <http://purl.org/dc/elements/1.1/title> ?title . ?s <http://www.w3.org/2004/02/skos/core#prefLabel> ?skoslabel . } WHERE {  ${graphStart}  ?s ?p <${endpointSpecificUri}> . OPTIONAL { ?s a ?linkedRecordType . } OPTIONAL { ?s <http://www.w3.org/2000/01/rdf-schema#label> ?label . } OPTIONAL { ?s <http://purl.org/dc/elements/1.1/title> ?title . } OPTIONAL { ?s <http://www.w3.org/2004/02/skos/core#prefLabel> ?skoslabel . } ${graphEnd}  } ${limit} ${sparqlOffset}" ;
	queryall_query:queryUriTemplateString "${defaultHostAddress}links/${input_1}${defaultSeparator}${input_2}" ;
	queryall_query:standardUriTemplateString "${defaultHostAddress}${input_1}${defaultSeparator}${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputUrlEncoded_normalisedStandardUri}\"><ns0pred:xLinks xmlns:ns0pred=\"${defaultHostAddress}bio2rdf_resource:\" rdf:resource=\"${xmlEncoded_inputUrlEncoded_normalisedQueryUri}\"/></rdf:Description>" ;
	queryall_query:inRobotsTxt "true"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int .

bio2rdf_query:plusurlencodedlinks a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "true"^^xsd:boolean ;
	dc:title "plusurlencodedlinks" ;
	queryall_query:handleAllNamespaces "false"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "false"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^links/([\\w-]+):(.+)" ;
	queryall_query:templateString "CONSTRUCT { ?s ?p <${inputPlusUrlEncoded_normalisedStandardUri}> . ?s a ?linkedRecordType . ?s <http://www.w3.org/2000/01/rdf-schema#label> ?label . ?s <http://purl.org/dc/elements/1.1/title> ?title . ?s <http://www.w3.org/2004/02/skos/core#prefLabel> ?skoslabel . } WHERE {  ${graphStart}  ?s ?p <${inputPlusUrlEncoded_endpointSpecificUri}> . OPTIONAL { ?s a ?linkedRecordType . } OPTIONAL { ?s <http://www.w3.org/2000/01/rdf-schema#label> ?label . } OPTIONAL { ?s <http://purl.org/dc/elements/1.1/title> ?title . } OPTIONAL { ?s <http://www.w3.org/2004/02/skos/core#prefLabel> ?skoslabel . } ${graphEnd}  } ${limit} ${sparqlOffset}" ;
	queryall_query:queryUriTemplateString "${defaultHostAddress}links/${input_1}${defaultSeparator}${input_2}" ;
	queryall_query:standardUriTemplateString "${defaultHostAddress}${input_1}${defaultSeparator}${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputPlusUrlEncoded_normalisedStandardUri}\"><ns0pred:xLinks xmlns:ns0pred=\"${defaultHostAddress}bio2rdf_resource:\" rdf:resource=\"${xmlEncoded_inputPlusUrlEncoded_normalisedQueryUri}\"/></rdf:Description>" ;
	queryall_query:inRobotsTxt "true"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int .

bio2rdf_query:labelsearchforgo a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "true"^^xsd:boolean ;
	dc:title "golabel" ;
	queryall_query:handleAllNamespaces "false"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^label/([\\w-]+):(.+)" ;
	queryall_query:templateString "CONSTRUCT { <${normalisedStandardUri}> <http://bio2rdf.org/go_resource:name> ?goName . } WHERE { ${graphStart}  <${endpointSpecificUri}> <http://bio2rdf.org/ns/go#name> ?goName ${graphEnd} } ${limit} ${sparqlOffset}" ;
	queryall_query:queryUriTemplateString "${defaultHostAddress}label/${input_1}${defaultSeparator}${input_2}" ;
	queryall_query:standardUriTemplateString "${defaultHostAddress}${input_1}${defaultSeparator}${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputUrlEncoded_normalisedStandardUri}\"><ns0pred:hasLabelSearch xmlns:ns0pred=\"${xmlEncoded_defaultHostAddress}bio2rdf_resource:\" rdf:resource=\"${xmlEncoded_inputUrlEncoded_normalisedQueryUri}\"/></rdf:Description>" ;
	queryall_query:inRobotsTxt "false"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:namespaceToHandle bio2rdf_ns:go ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int .

bio2rdf_query:pubmedcentral a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "false"^^xsd:boolean ;
	dc:title "pubmedcentral" ;
	queryall_query:handleAllNamespaces "false"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^pubmedcentral/([\\w-]+):(.+)" ;
	queryall_query:templateString "" ;
	queryall_query:queryUriTemplateString "${defaultHostAddress}pubmedcentral/${input_1}${defaultSeparator}${input_2}" ;
	queryall_query:standardUriTemplateString "${defaultHostAddress}${input_1}${defaultSeparator}${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputUrlEncoded_normalisedStandardUri}\"><ns0pred:pubmedcentralUrl xmlns:ns0pred=\"${defaultHostAddress}bio2rdf_resource:\">${xmlEncoded_inputUrlEncoded_normalisedQueryUri}</ns0pred:pubmedcentralUrl></rdf:Description>" ;
	queryall_query:inRobotsTxt "true"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:namespaceToHandle bio2rdf_ns:pubmed ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int .

bio2rdf_query:virtuosobifcontainssearch a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "true"^^xsd:boolean ;
	dc:title "virtuosobifcontainssearch" ;
	queryall_query:handleAllNamespaces "true"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "false"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^search/(.+)" ;
	queryall_query:templateString "CONSTRUCT { <${inputUrlEncoded_normalisedQueryUri}> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://bio2rdf.org/bio2rdf_resource:SearchResults> . <${inputUrlEncoded_normalisedQueryUri}> <http://bio2rdf.org/bio2rdf_resource:hasSearchResult> ?s .  <${inputUrlEncoded_normalisedQueryUri}> <http://www.w3.org/2000/01/rdf-schema#seeAlso> ?s . ?s <http://www.w3.org/2000/01/rdf-schema#label> ?label . ?s <http://purl.org/dc/elements/1.1/title> ?title . ?s <http://purl.org/dc/terms/title> ?dctermstitle . ?s <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> ?type . ?s <http://www.w3.org/2004/02/skos/core#prefLabel> ?skoslabel . ?s ?p ?o .  } WHERE { ${graphStart} ?s ?p ?o . FILTER(bif:contains(?o, '\"${ntriplesEncoded_input_1}\"')) OPTIONAL { ?s <http://www.w3.org/2000/01/rdf-schema#label> ?label . } OPTIONAL { ?s <http://purl.org/dc/elements/1.1/title> ?title . } OPTIONAL{ ?s <http://purl.org/dc/terms/title> ?dctermstitle . }  OPTIONAL{ ?s <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> ?type . } OPTIONAL { ?s <http://www.w3.org/2004/02/skos/core#prefLabel> ?skoslabel . } ${graphEnd} } ${limit} ${sparqlOffset}" ;
	queryall_query:queryUriTemplateString "${defaultHostAddress}search/${input_1}" ;
	queryall_query:standardUriTemplateString "${defaultHostAddress}search/${input_1}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputUrlEncoded_normalisedStandardUri}\"><ns0pred:hasSearchResults xmlns:ns0pred=\"${xmlEncoded_defaultHostAddress}bio2rdf_resource:\" rdf:resource=\"${xmlEncoded_inputUrlEncoded_normalisedQueryUri}\"/></rdf:Description>" ;
	queryall_query:inRobotsTxt "true"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude .

bio2rdf_query:sparqlregexsearch a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "true"^^xsd:boolean ;
	dc:title "sparqlregexsearch" ;
	queryall_query:handleAllNamespaces "true"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "false"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^search/(.+)" ;
	queryall_query:templateString "CONSTRUCT { <${inputUrlEncoded_normalisedQueryUri}> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://bio2rdf.org/bio2rdf_resource:SearchResults> . <${inputUrlEncoded_normalisedQueryUri}> <http://bio2rdf.org/bio2rdf_resource:hasSearchResult> ?s .  <${inputUrlEncoded_normalisedQueryUri}> <http://www.w3.org/2000/01/rdf-schema#seeAlso> ?s . ?s <http://www.w3.org/2000/01/rdf-schema#label> ?label . ?s <http://purl.org/dc/elements/1.1/title> ?title . ?s <http://purl.org/dc/terms/title> ?dctermstitle . ?s <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> ?type . ?s <http://www.w3.org/2004/02/skos/core#prefLabel> ?skoslabel . ?s ?p ?o .  } WHERE { ${graphStart} ?s ?p ?o . FILTER(regex(str(?o), \"${ntriplesEncoded_input_1}\")) OPTIONAL { ?s <http://www.w3.org/2000/01/rdf-schema#label> ?label . } OPTIONAL { ?s <http://purl.org/dc/elements/1.1/title> ?title . }  OPTIONAL{ ?s <http://purl.org/dc/terms/title> ?dctermstitle . } OPTIONAL{ ?s <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> ?type . } OPTIONAL { ?s <http://www.w3.org/2004/02/skos/core#prefLabel> ?skoslabel . } ${graphEnd} } ${limit} ${sparqlOffset}" ;
	queryall_query:queryUriTemplateString "${defaultHostAddress}search/${input_1}" ;
	queryall_query:standardUriTemplateString "${defaultHostAddress}search/${input_1}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputUrlEncoded_normalisedStandardUri}\"><ns0pred:hasSearchResults xmlns:ns0pred=\"${xmlEncoded_defaultHostAddress}bio2rdf_resource:\" rdf:resource=\"${xmlEncoded_inputUrlEncoded_normalisedQueryUri}\"/></rdf:Description>" ;
	queryall_query:inRobotsTxt "true"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude .

bio2rdf_query:rawrdf a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "false"^^xsd:boolean ;
	dc:title "rdf" ;
	queryall_query:handleAllNamespaces "true"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^rdf/([\\w-]+):(.+)" ;
	queryall_query:templateString "" ;
	queryall_query:queryUriTemplateString "${defaultHostAddress}rdf/${input_1}:${urlEncoded_input_2}" ;
	queryall_query:standardUriTemplateString "${defaultHostAddress}${input_1}:${urlEncoded_input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputUrlEncoded_normalisedStandardUri}\"><ns0pred:rawRdf xmlns:ns0pred=\"${defaultHostAddress}bio2rdf_resource:\" rdf:resource=\"${xmlEncoded_inputUrlEncoded_normalisedQueryUri}\"/></rdf:Description>" ;
	queryall_query:inRobotsTxt "false"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int .

bio2rdf_query:unsaferawrdf a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "false"^^xsd:boolean ;
	dc:title "rdf" ;
	queryall_query:handleAllNamespaces "false"^^xsd:boolean ;
    queryall_query:namespaceToHandle bio2rdf_ns:wikipedia ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^rdf/([\\w-]+):(.+)" ;
	queryall_query:templateString "" ;
	queryall_query:queryUriTemplateString "${defaultHostAddress}rdf/${input_1}:${urlEncoded_input_2}" ;
	queryall_query:standardUriTemplateString "${defaultHostAddress}${input_1}:${urlEncoded_input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputUrlEncoded_normalisedStandardUri}\"><ns0pred:rawRdf xmlns:ns0pred=\"${defaultHostAddress}bio2rdf_resource:\" rdf:resource=\"${xmlEncoded_inputUrlEncoded_normalisedQueryUri}\"/></rdf:Description>" ;
	queryall_query:inRobotsTxt "false"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int .

bio2rdf_query:xml a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "false"^^xsd:boolean ;
	dc:title "xml" ;
	queryall_query:handleAllNamespaces "true"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^xml/([\\w-]+):(.+)" ;
	queryall_query:templateString "" ;
	queryall_query:queryUriTemplateString "${defaultHostAddress}xml/${input_1}${defaultSeparator}${input_2}" ;
	queryall_query:standardUriTemplateString "${defaultHostAddress}${input_1}${defaultSeparator}${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputUrlEncoded_normalisedStandardUri}\"><ns0pred:xmlUrl xmlns:ns0pred=\"${defaultHostAddress}bio2rdf_resource:\">${xmlEncoded_inputUrlEncoded_normalisedQueryUri}</ns0pred:xmlUrl></rdf:Description>" ;
	queryall_query:inRobotsTxt "true"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int .

bio2rdf_query:unknownnamespace a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "true"^^xsd:boolean ;
    queryall_query:isPageable "false"^^xsd:boolean ;
	dc:title "unknownnamespace" ;
	queryall_query:handleAllNamespaces "false"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "false"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^unknownnamespace/([\\w-]+):(.+)" ;
	queryall_query:templateString "" ;
	queryall_query:queryUriTemplateString "${defaultHostAddress}${queryString}" ;
	queryall_query:standardUriTemplateString "${defaultHostAddress}${queryString}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputUrlEncoded_normalisedStandardUri}\"><rdf:type xmlns:ns0pred=\"${defaultHostAddress}bio2rdf_resource:\" rdf:resource=\"http://bio2rdf.org/bio2rdf_resource:Error\"/><rdf:type xmlns:ns0pred=\"${defaultHostAddress}bio2rdf_resource:\" rdf:resource=\"http://bio2rdf.org/bio2rdf_resource:UnknownNamespaceForThisQueryError\"/></rdf:Description>" ;
	queryall_query:inRobotsTxt "true"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int ;
	queryall_query:includeQueryType bio2rdf_query:unknownnamespace .

bio2rdf_query:countlinksfromlowercase a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "false"^^xsd:boolean ;
	dc:title "countlinksfromlowercase" ;
	queryall_query:handleAllNamespaces "true"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "false"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^countlinks/([\\w-]+):(.+)" ;
	queryall_query:templateString "CONSTRUCT { <${inputUrlEncoded_privateuppercase_normalisedQueryUri}> <http://bio2rdf.org/bio2rdf_resource:hasLinkCountResult> <${defaultHostAddress}linkresultref/${urlEncoded_endpointUrl}/${urlEncoded_graphUri}/${urlEncoded_input_1}:${urlEncoded_uppercase_input_2}> . <${defaultHostAddress}linkresultref/${urlEncoded_endpointUrl}/${urlEncoded_graphUri}/${urlEncoded_input_1}:${urlEncoded_uppercase_input_2}> <http://bio2rdf.org/bio2rdf_resource:sparqlEndpointUrl> <${endpointUrl}> .  <${defaultHostAddress}linkresultref/${urlEncoded_endpointUrl}/${urlEncoded_graphUri}/${urlEncoded_input_1}:${urlEncoded_uppercase_input_2}> <http://bio2rdf.org/bio2rdf_resource:sparqlGraphUri> \"${graphUri}\" . <${defaultHostAddress}linkresultref/${urlEncoded_endpointUrl}/${urlEncoded_graphUri}/${urlEncoded_input_1}:${urlEncoded_uppercase_input_2}> <http://bio2rdf.org/bio2rdf_resource:hasLinkCount> `(select (count(?s)) as ?countS where { ${graphStart} ?s ?p <${inputUrlEncoded_privatelowercase_endpointSpecificUri}> . ${graphEnd} })` } where { ?s1 ?p1 ?o1 } limit 1" ;
	queryall_query:queryUriTemplateString "${defaultHostAddress}countlinks/${input_1}${defaultSeparator}${input_2}" ;
	queryall_query:standardUriTemplateString "${defaultHostAddress}${input_1}${defaultSeparator}${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputUrlEncoded_privateuppercase_normalisedStandardUri}\"><ns0pred:xCountLinks xmlns:ns0pred=\"${defaultHostAddress}bio2rdf_resource:\" rdf:resource=\"${xmlEncoded_inputUrlEncoded_privateuppercase_normalisedQueryUri}\"/><ns0pred:sameAs xmlns:ns0pred=\"http://www.w3.org/2002/07/owl#\" rdf:resource=\"${xmlEncoded_inputUrlEncoded_privatelowercase_endpointSpecificUri}\"/><ns0pred:sameAs xmlns:ns0pred=\"http://www.w3.org/2002/07/owl#\" rdf:resource=\"${xmlEncoded_inputUrlEncoded_privatelowercase_normalisedStandardUri}\"/></rdf:Description>" ;
	queryall_query:inRobotsTxt "true"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int ;
	queryall_query:includeQueryType bio2rdf_query:countlinksfromlowercase , bio2rdf_query:constructfromlowercase .

bio2rdf_query:pubmedrefs a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "false"^^xsd:boolean ;
	dc:title "pubmedrefs" ;
	queryall_query:handleAllNamespaces "true"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^pubmedrefs/([\\w-]+):(.+)" ;
	queryall_query:templateString "" ;
	queryall_query:queryUriTemplateString "${defaultHostAddress}pubmedrefs/${input_1}${defaultSeparator}${input_2}" ;
	queryall_query:standardUriTemplateString "${defaultHostAddress}${input_1}${defaultSeparator}${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputUrlEncoded_privateuppercase_normalisedStandardUri}\"><ns0pred:pubmedrefsUrl xmlns:ns0pred=\"${defaultHostAddress}bio2rdf_resource:\">${xmlEncoded_inputUrlEncoded_privateuppercase_normalisedQueryUri}</ns0pred:pubmedrefsUrl></rdf:Description>" ;
	queryall_query:inRobotsTxt "true"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int .

bio2rdf_query:homologenelinks a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "true"^^xsd:boolean ;
	dc:title "homologenelinks" ;
	queryall_query:handleAllNamespaces "false"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "false"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^links/([\\w-]+):(.+)" ;
	queryall_query:templateString "CONSTRUCT { ?homologousGene <http://purl.org/science/owl/sciencecommons/has_homologous_gene_record>  <${inputUrlEncoded_normalisedStandardUri}>.  } WHERE {  ${graphStart}  ?s <http://purl.org/science/owl/sciencecommons/has_homologous_gene_record> <${inputUrlEncoded_endpointSpecificUri}> . ?s <http://purl.org/science/owl/sciencecommons/has_homologous_gene_record> ?homologousGene . ${graphEnd}  } ${limit} ${sparqlOffset}" ;
	queryall_query:queryUriTemplateString "${defaultHostAddress}links/${input_1}${defaultSeparator}${input_2}" ;
	queryall_query:standardUriTemplateString "${defaultHostAddress}${input_1}${defaultSeparator}${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "" ;
	queryall_query:inRobotsTxt "true"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:namespaceToHandle bio2rdf_ns:geneid ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int .

bio2rdf_query:image a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "false"^^xsd:boolean ;
	dc:title "image" ;
	queryall_query:handleAllNamespaces "true"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^image/([\\w-]+):(.+)" ;
	queryall_query:templateString "" ;
	queryall_query:queryUriTemplateString "${defaultHostAddress}image/${input_1}${defaultSeparator}${input_2}" ;
	queryall_query:standardUriTemplateString "${defaultHostAddress}${input_1}${defaultSeparator}${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputUrlEncoded_normalisedStandardUri}\"><ns0pred:urlImage xmlns:ns0pred=\"${defaultHostAddress}bio2rdf_resource:\">${xmlEncoded_endpointUrl}</ns0pred:urlImage></rdf:Description>" ;
	queryall_query:inRobotsTxt "true"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int ;
	queryall_query:includeQueryType bio2rdf_query:image .
	

bio2rdf_query:imageinclude a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "false"^^xsd:boolean ;
	dc:title "image" ;
	queryall_query:handleAllNamespaces "true"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^([\\w-]+):(.+)" ;
	queryall_query:templateString "" ;
	queryall_query:queryUriTemplateString "${defaultHostAddress}image/${input_1}${defaultSeparator}${input_2}" ;
	queryall_query:standardUriTemplateString "${defaultHostAddress}${input_1}${defaultSeparator}${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputUrlEncoded_normalisedStandardUri}\"><ns0pred:urlImageList xmlns:ns0pred=\"${defaultHostAddress}bio2rdf_resource:\" rdf:resource=\"${xmlEncoded_inputUrlEncoded_normalisedQueryUri}\"></ns0pred:urlImageList></rdf:Description>" ;
	queryall_query:inRobotsTxt "true"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int ;
	queryall_query:includeQueryType bio2rdf_query:imageinclude .


bio2rdf_query:homologeneconstruct a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "true"^^xsd:boolean ;
	dc:title "homologeneconstruct" ;
	queryall_query:handleAllNamespaces "false"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^([\\w-]+):(.+)" ;
	queryall_query:templateString "CONSTRUCT { <${inputUrlEncoded_normalisedStandardUri}> <http://purl.org/science/owl/sciencecommons/has_homologous_gene_record> ?homologousGene .  } WHERE {  ${graphStart}  ?s <http://purl.org/science/owl/sciencecommons/has_homologous_gene_record> <${inputUrlEncoded_endpointSpecificUri}> . ?s <http://purl.org/science/owl/sciencecommons/has_homologous_gene_record> ?homologousGene . ${graphEnd}  } ${limit} ${sparqlOffset}" ;
	queryall_query:queryUriTemplateString "${defaultHostAddress}${input_1}${defaultSeparator}${input_2}" ;
	queryall_query:standardUriTemplateString "${defaultHostAddress}${input_1}${defaultSeparator}${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "" ;
	queryall_query:inRobotsTxt "false"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:namespaceToHandle bio2rdf_ns:geneid ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int .

bio2rdf_query:ispy a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "false"^^xsd:boolean ;
	dc:title "ispy" ;
	queryall_query:handleAllNamespaces "true"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^ispy/([\\w-]+):(.+)" ;
	queryall_query:templateString "" ;
	queryall_query:queryUriTemplateString "${defaultHostAddress}ispy/${input_1}${defaultSeparator}${input_2}" ;
	queryall_query:standardUriTemplateString "${defaultHostAddress}${input_1}${defaultSeparator}${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputUrlEncoded_normalisedStandardUri}\"><ns0pred:ispyUrl xmlns:ns0pred=\"${defaultHostAddress}bio2rdf_resource:\">${xmlEncoded_inputUrlEncoded_normalisedQueryUri}</ns0pred:ispyUrl></rdf:Description>" ;
	queryall_query:inRobotsTxt "true"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int .

bio2rdf_query:related a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "false"^^xsd:boolean ;
	dc:title "related" ;
	queryall_query:handleAllNamespaces "true"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^related/([\\w-]+):(.+)" ;
	queryall_query:templateString "" ;
	queryall_query:queryUriTemplateString "${defaultHostAddress}related/${input_1}${defaultSeparator}${input_2}" ;
	queryall_query:standardUriTemplateString "${defaultHostAddress}${input_1}${defaultSeparator}${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputUrlEncoded_normalisedStandardUri}\"><ns0pred:relatedItemsUrl xmlns:ns0pred=\"${defaultHostAddress}bio2rdf_resource:\">${xmlEncoded_inputUrlEncoded_normalisedQueryUri}</ns0pred:relatedItemsUrl></rdf:Description>" ;
	queryall_query:inRobotsTxt "true"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int .

bio2rdf_query:proteinlinks a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "true"^^xsd:boolean ;
	dc:title "proteinlinks" ;
	queryall_query:handleAllNamespaces "false"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "false"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^proteinlinks/([\\w-]+):(.+)" ;
	queryall_query:templateString "CONSTRUCT { ?s ?p <${inputUrlEncoded_normalisedStandardUri}> . ?s a ?linkedRecordType . ?s <http://www.w3.org/2000/01/rdf-schema#label> ?label . ?s <http://purl.org/dc/elements/1.1/title> ?title . ?s <http://www.w3.org/2004/02/skos/core#prefLabel> ?skoslabel . } WHERE {  ${graphStart}  ?s ?p <${inputUrlEncoded_endpointSpecificUri}> . OPTIONAL { ?s a ?linkedRecordType . } OPTIONAL { ?s <http://www.w3.org/2000/01/rdf-schema#label> ?label . } OPTIONAL { ?s <http://purl.org/dc/elements/1.1/title> ?title . } OPTIONAL { ?s <http://www.w3.org/2004/02/skos/core#prefLabel> ?skoslabel . } ${graphEnd}  } ${limit} ${sparqlOffset}" ;
	queryall_query:queryUriTemplateString "${defaultHostAddress}proteinlinks/${input_1}${defaultSeparator}${input_2}" ;
	queryall_query:standardUriTemplateString "${defaultHostAddress}${input_1}${defaultSeparator}${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputUrlEncoded_normalisedStandardUri}\"><ns0pred:xProteinLinks xmlns:ns0pred=\"${defaultHostAddress}bio2rdf_resource:\" rdf:resource=\"${xmlEncoded_inputUrlEncoded_normalisedQueryUri}\"/></rdf:Description>" ;
	queryall_query:inRobotsTxt "true"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int .

bio2rdf_query:hubmed a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "false"^^xsd:boolean ;
	dc:title "hubmed" ;
	queryall_query:handleAllNamespaces "false"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^hubmed/([\\w-]+):(.+)" ;
	queryall_query:templateString "" ;
	queryall_query:queryUriTemplateString "${defaultHostAddress}hubmed/${input_1}${defaultSeparator}${input_2}" ;
	queryall_query:standardUriTemplateString "${defaultHostAddress}${input_1}${defaultSeparator}${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputUrlEncoded_normalisedStandardUri}\"><ns0pred:hubmedUrl xmlns:ns0pred=\"${defaultHostAddress}bio2rdf_resource:\">${xmlEncoded_inputUrlEncoded_normalisedQueryUri}</ns0pred:hubmedUrl></rdf:Description>" ;
	queryall_query:inRobotsTxt "true"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:namespaceToHandle bio2rdf_ns:pubmed ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int .

bio2rdf_query:goinprositeconstruct a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "true"^^xsd:boolean ;
	dc:title "goinprositeconstruct" ;
	queryall_query:handleAllNamespaces "false"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^([\\w-]+):(.+)" ;
	queryall_query:templateString "CONSTRUCT { <${inputUrlEncoded_normalisedStandardUri}> <http://bio2rdf.org/go_resource:has_prosite_pattern> ?prositeReference .  } WHERE {  ${graphStart}  <${inputUrlEncoded_endpointSpecificUri}> <http://www.geneontology.org/formats/oboInOwl#hasDbXref> ?o . ?o <http://www.geneontology.org/formats/oboInOwl#hasURI>  ?prositeReference . ${graphEnd}  } ${limit} ${sparqlOffset}" ;
	queryall_query:queryUriTemplateString "${defaultHostAddress}${input_1}${defaultSeparator}${input_2}" ;
	queryall_query:standardUriTemplateString "${defaultHostAddress}${input_1}${defaultSeparator}${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "" ;
	queryall_query:inRobotsTxt "false"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:namespaceToHandle bio2rdf_ns:go ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int .

bio2rdf_query:unsafeconstruct a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "true"^^xsd:boolean ;
	dc:title "unsafeconstruct" ;
	queryall_query:handleAllNamespaces "true"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^([\\w-]+):(.+)" ;
	queryall_query:templateString "CONSTRUCT { <${normalisedStandardUri}> ?p ?o . } WHERE { ${graphStart} <${ntriplesEncoded_endpointSpecificUri}> ?p ?o . ${graphEnd}  } ${limit} ${sparqlOffset}" ;
	queryall_query:queryUriTemplateString "${defaultHostAddress}${input_1}${defaultSeparator}${input_2}" ;
	queryall_query:standardUriTemplateString "${defaultHostAddress}${input_1}${defaultSeparator}${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_ntriplesEncoded_normalisedStandardUri}\"><ns0pred:sameAs xmlns:ns0pred=\"http://www.w3.org/2002/07/owl#\" rdf:resource=\"${xmlEncoded_ntriplesEncoded_endpointSpecificUri}\"/></rdf:Description>" ;
	queryall_query:inRobotsTxt "false"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int ;
	queryall_query:includeQueryType bio2rdf_query:unsafeconstruct .

bio2rdf_query:plusurlencodedconstruct a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "true"^^xsd:boolean ;
	dc:title "plusurlencodedconstruct" ;
	queryall_query:handleAllNamespaces "true"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^([\\w-]+):(.+)" ;
	queryall_query:templateString "CONSTRUCT { <${inputPlusUrlEncoded_normalisedStandardUri}> ?p ?o . } WHERE { ${graphStart} <${inputPlusUrlEncoded_endpointSpecificUri}> ?p ?o . ${graphEnd}  } ${limit} ${sparqlOffset}" ;
	queryall_query:queryUriTemplateString "${defaultHostAddress}${input_1}${defaultSeparator}${input_2}" ;
	queryall_query:standardUriTemplateString "${defaultHostAddress}${input_1}${defaultSeparator}${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputPlusUrlEncoded_normalisedStandardUri}\"><ns0pred:sameAs xmlns:ns0pred=\"http://www.w3.org/2002/07/owl#\" rdf:resource=\"${xmlEncoded_inputPlusUrlEncoded_endpointSpecificUri}\"/></rdf:Description>" ;
	queryall_query:inRobotsTxt "false"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int ;
	queryall_query:includeQueryType bio2rdf_query:plusurlencodedconstruct .

bio2rdf_query:tags a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "true"^^xsd:boolean ;
	dc:title "tags" ;
	queryall_query:handleAllNamespaces "true"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "true"^^xsd:boolean ;
	queryall_query:inputRegex "^tags/([\\w-]+):(.+)" ;
	queryall_query:templateString "PREFIX tags: <http://www.holygoat.co.uk/owl/redwood/0.1/tags/> PREFIX terms: <http://purl.org/net/terms#> CONSTRUCT { ?taggingInstance rdf:type terms:TermInstance . ?taggingInstance terms:taggedBy ?foafUser . ?taggingInstance terms:taggedOn ?taggedOn . ?taggingInstance terms:subject <${inputUrlEncoded_normalisedStandardUri}> . ?taggingInstance terms:predicate ?termPredicate . ?taggingInstance terms:object ?termObject . ?taggingInstance terms:term ?tagLabelUri . ?tagLabelUri tags:name ?tagLabelName . } WHERE { ${graphStart} ?taggingInstance rdf:type terms:TermInstance . ?taggingInstance terms:taggedBy ?foafUser . ?taggingInstance terms:taggedOn ?taggedOn .         ?taggingInstance terms:subject <${inputUrlEncoded_endpointSpecificUri}> . OPTIONAL{ ?taggingInstance terms:predicate ?termPredicate .} OPTIONAL{?taggingInstance terms:object ?termObject .} ?taggingInstance terms:term ?tagLabelUri . ?tagLabelUri tags:name ?tagLabelName . FILTER(sameTerm(?foafUser, <http://purl.org/net/terms#AnonymousUser>)) ${graphEnd} } ${limit} ${sparqlOffset}" ;
	queryall_query:queryUriTemplateString "${defaultHostAddress}tags/${input_1}${defaultSeparator}${input_2}" ;
	queryall_query:standardUriTemplateString "${defaultHostAddress}${input_1}${defaultSeparator}${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputUrlEncoded_normalisedStandardUri}\"><ns0pred:xTags xmlns:ns0pred=\"${defaultHostAddress}bio2rdf_resource:\" rdf:resource=\"${xmlEncoded_inputUrlEncoded_normalisedQueryUri}\"/></rdf:Description>" ;
	queryall_query:inRobotsTxt "false"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:namespaceToHandle bio2rdf_ns:geneid , bio2rdf_ns:mquter_gene , bio2rdf_ns:go , bio2rdf_ns:keywords , bio2rdf_ns:term , bio2rdf_ns:terminstance ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int ;
	queryall_query:includeQueryType bio2rdf_query:tags .

bio2rdf_query:goinprositelinks a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "true"^^xsd:boolean ;
	dc:title "goinprositelinks" ;
	queryall_query:handleAllNamespaces "false"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^links/([\\w-]+):(.+)" ;
	queryall_query:templateString "CONSTRUCT { ?prositeReference <http://bio2rdf.org/bio2rdf_resource:has_go_annotation> <${inputUrlEncoded_normalisedStandardUri}> .  } WHERE {  ${graphStart}  <${inputUrlEncoded_endpointSpecificUri}> <http://www.geneontology.org/formats/oboInOwl#hasDbXref> ?o . ?o <http://www.geneontology.org/formats/oboInOwl#hasURI> ?prositeReference . ${graphEnd}  } ${limit} ${sparqlOffset}" ;
	queryall_query:queryUriTemplateString "${defaultHostAddress}${input_1}${defaultSeparator}${input_2}" ;
	queryall_query:standardUriTemplateString "${defaultHostAddress}${input_1}${defaultSeparator}${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "" ;
	queryall_query:inRobotsTxt "true"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:namespaceToHandle bio2rdf_ns:go ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int .

bio2rdf_query:fulltext a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "false"^^xsd:boolean ;
	dc:title "fulltext" ;
	queryall_query:handleAllNamespaces "true"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^fulltext/([\\w-]+):(.+)" ;
	queryall_query:templateString "" ;
	queryall_query:queryUriTemplateString "${defaultHostAddress}fulltext/${input_1}${defaultSeparator}${input_2}" ;
	queryall_query:standardUriTemplateString "${defaultHostAddress}${input_1}${defaultSeparator}${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputUrlEncoded_privateuppercase_normalisedStandardUri}\"><ns0pred:fulltextUrl xmlns:ns0pred=\"${defaultHostAddress}bio2rdf_resource:\">${xmlEncoded_inputUrlEncoded_privateuppercase_normalisedQueryUri}</ns0pred:fulltextUrl></rdf:Description>" ;
	queryall_query:inRobotsTxt "true"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int .

bio2rdf_query:index a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "false"^^xsd:boolean ;
	dc:title "index" ;
	queryall_query:handleAllNamespaces "true"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^index/([\\w-]+):(.+)" ;
	queryall_query:templateString "" ;
	queryall_query:queryUriTemplateString "${defaultHostAddress}index/${input_1}:${urlEncoded_input_2}" ;
	queryall_query:standardUriTemplateString "${defaultHostAddress}${input_1}:${urlEncoded_input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "" ;
	queryall_query:inRobotsTxt "true"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int .

bio2rdf_query:countlinksbynamespace a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "false"^^xsd:boolean ;
	dc:title "countlinksns" ;
	queryall_query:handleAllNamespaces "true"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^countlinksns/([\\w-]+)/([\\w-]+):(.+)" ;
	queryall_query:templateString "CONSTRUCT { <${inputUrlEncoded_normalisedQueryUri}> <http://bio2rdf.org/bio2rdf_resource:hasNamespaceLinkCountResult> <${defaultHostAddress}linknsresultref/${urlEncoded_endpointUrl}/${urlEncoded_graphUri}/${urlEncoded_input_2}:${urlEncoded_input_3}> . <${defaultHostAddress}linknsresultref/${urlEncoded_endpointUrl}/${urlEncoded_graphUri}/${urlEncoded_input_2}:${urlEncoded_input_3}> <http://bio2rdf.org/bio2rdf_resource:sparqlEndpointUrl> <${endpointUrl}> .  <${defaultHostAddress}linknsresultref/${urlEncoded_endpointUrl}/${urlEncoded_graphUri}/${urlEncoded_input_2}:${urlEncoded_input_3}> <http://bio2rdf.org/bio2rdf_resource:linksFromNamespace> <${defaultHostAddress}ns:${urlEncoded_input_1}> .  <${defaultHostAddress}linknsresultref/${urlEncoded_endpointUrl}/${urlEncoded_graphUri}/${urlEncoded_input_2}:${urlEncoded_input_3}> <http://bio2rdf.org/bio2rdf_resource:sparqlGraphUri> \"${graphUri}\" .  <${defaultHostAddress}linknsresultref/${urlEncoded_endpointUrl}/${urlEncoded_graphUri}/${urlEncoded_input_2}:${urlEncoded_input_3}> <http://bio2rdf.org/bio2rdf_resource:hasLinkCount> `(select (count(?s)) as ?countS where { ${graphStart} ?s ?p <${inputUrlEncoded_endpointSpecificUri}> . ${graphEnd} })` } where { ?s1 ?p1 ?o1 } limit 1" ;
	queryall_query:queryUriTemplateString "${defaultHostAddress}countlinksns/${input_1}/${input_2}:${input_3}" ;
	queryall_query:standardUriTemplateString "${defaultHostAddress}${input_2}:${input_3}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputUrlEncoded_normalisedStandardUri}\"><ns0pred:xNamespaceCountLinks xmlns:ns0pred=\"${defaultHostAddress}bio2rdf_resource:\" rdf:resource=\"${xmlEncoded_inputUrlEncoded_normalisedQueryUri}\"/><ns0pred:xCountLinks xmlns:ns0pred=\"${defaultHostAddress}bio2rdf_resource:\" rdf:resource=\"${defaultHostAddress}countlinks/${xmlEncoded_urlEncoded_input_2}:${xmlEncoded_urlEncoded_input_3}\"/></rdf:Description>" ;
	queryall_query:inRobotsTxt "true"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int , "2"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int ;
	queryall_query:includeQueryType bio2rdf_query:countlinksbynamespace .

bio2rdf_query:genbankpartial a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "false"^^xsd:boolean ;
	dc:title "genbankpartial" ;
	queryall_query:handleAllNamespaces "true"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^genbankpartial/([\\w-]+):(.+)" ;
	queryall_query:templateString "" ;
	queryall_query:queryUriTemplateString "${defaultHostAddress}genbankpartial/${input_1}${defaultSeparator}${input_2}" ;
	queryall_query:standardUriTemplateString "${defaultHostAddress}${input_1}${defaultSeparator}${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputUrlEncoded_privateuppercase_normalisedStandardUri}\"><ns0pred:genbankpartialUrl xmlns:ns0pred=\"${defaultHostAddress}bio2rdf_resource:\">${xmlEncoded_inputUrlEncoded_privateuppercase_normalisedQueryUri}</ns0pred:genbankpartialUrl></rdf:Description>" ;
	queryall_query:inRobotsTxt "true"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int .

bio2rdf_query:primaryreverseconstruct a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "true"^^xsd:boolean ;
	dc:title "primaryreverseconstruct" ;
	queryall_query:handleAllNamespaces "true"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^([\\w-]+):(.+)" ;
	queryall_query:templateString "CONSTRUCT { <${inputUrlEncoded_normalisedStandardUri}> <http://bio2rdf.org/bio2rdf_resource:linkedToFrom> ?s . } WHERE { ${graphStart} ?s ?p <${inputUrlEncoded_endpointSpecificUri}> . ${graphEnd}  } ${limit} ${sparqlOffset}" ;
	queryall_query:queryUriTemplateString "${defaultHostAddress}${input_1}${defaultSeparator}${input_2}" ;
	queryall_query:standardUriTemplateString "${defaultHostAddress}${input_1}${defaultSeparator}${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputUrlEncoded_normalisedStandardUri}\"><ns0pred:sameAs xmlns:ns0pred=\"http://www.w3.org/2002/07/owl#\" rdf:resource=\"${xmlEncoded_inputUrlEncoded_endpointSpecificUri}\"/></rdf:Description>" ;
	queryall_query:inRobotsTxt "false"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int ;
	queryall_query:includeQueryType bio2rdf_query:primaryreverseconstruct .

bio2rdf_query:secondaryreverseconstruct a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "true"^^xsd:boolean ;
	dc:title "secondaryreverseconstruct" ;
	queryall_query:handleAllNamespaces "true"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^([\\w-]+):(.+)" ;
	queryall_query:templateString "CONSTRUCT { <${inputUrlEncoded_normalisedStandardUri}> <http://bio2rdf.org/bio2rdf_resource:linkedToFrom> ?s . } WHERE { ${graphStart} ?s ?p <${inputUrlEncoded_endpointSpecificUri}> . ${graphEnd}  } ${limit} ${sparqlOffset}" ;
	queryall_query:queryUriTemplateString "${defaultHostAddress}${input_1}${defaultSeparator}${input_2}" ;
	queryall_query:standardUriTemplateString "${defaultHostAddress}${input_1}${defaultSeparator}${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputUrlEncoded_normalisedStandardUri}\"><ns0pred:sameAs xmlns:ns0pred=\"http://www.w3.org/2002/07/owl#\" rdf:resource=\"${xmlEncoded_inputUrlEncoded_endpointSpecificUri}\"/></rdf:Description>" ;
	queryall_query:inRobotsTxt "false"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int ;
	queryall_query:includeQueryType bio2rdf_query:secondaryreverseconstruct .

bio2rdf_query:namespacecount a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "false"^^xsd:boolean ;
	dc:title "namespacecount" ;
	queryall_query:handleAllNamespaces "true"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "false"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^namespacecount/([\\w-]+)" ;
	queryall_query:templateString "SELECT (count(?s)) AS ?countS WHERE { ${graphStart} ?s ?p ?o . ${graphEnd} }" ;
	queryall_query:queryUriTemplateString "${defaultHostAddress}namespacecount/${urlEncoded_input_1}" ;
	queryall_query:standardUriTemplateString "${defaultHostAddress}ns/${urlEncoded_input_1}#" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputUrlEncoded_normalisedStandardUri}\"><ns0pred:xNamespaceSubjectUriCount xmlns:ns0pred=\"${defaultHostAddress}bio2rdf_resource:\" rdf:resource=\"${xmlEncoded_inputUrlEncoded_normalisedQueryUri}\"/></rdf:Description>" ;
	queryall_query:inRobotsTxt "true"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:includeThenExclude ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int .

bio2rdf_query:relatedfromlowercase a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "false"^^xsd:boolean ;
	dc:title "relatedfromlowercase" ;
	queryall_query:handleAllNamespaces "true"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^related/([\\w-]+):(.+)" ;
	queryall_query:templateString "" ;
	queryall_query:queryUriTemplateString "${defaultHostAddress}related/${input_1}${defaultSeparator}${input_2}" ;
	queryall_query:standardUriTemplateString "${defaultHostAddress}${input_1}${defaultSeparator}${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputUrlEncoded_privateuppercase_normalisedStandardUri}\"><ns0pred:relatedItems xmlns:ns0pred=\"${defaultHostAddress}bio2rdf_resource:\">${xmlEncoded_inputUrlEncoded_privateuppercase_normalisedQueryUri}</ns0pred:relatedItems></rdf:Description>" ;
	queryall_query:inRobotsTxt "true"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int .

bio2rdf_query:links a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "true"^^xsd:boolean ;
	dc:title "links" ;
	queryall_query:handleAllNamespaces "true"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "false"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^links/([\\w-]+):(.+)" ;
	queryall_query:templateString "CONSTRUCT { ?s ?p <${inputUrlEncoded_normalisedStandardUri}> . ?s a ?linkedRecordType . ?s <http://www.w3.org/2000/01/rdf-schema#label> ?label . ?s <http://purl.org/dc/elements/1.1/title> ?title . ?s <http://www.w3.org/2004/02/skos/core#prefLabel> ?skoslabel . } WHERE {  ${graphStart}  ?s ?p <${inputUrlEncoded_endpointSpecificUri}> . OPTIONAL { ?s a ?linkedRecordType . } OPTIONAL { ?s <http://www.w3.org/2000/01/rdf-schema#label> ?label . } OPTIONAL { ?s <http://purl.org/dc/elements/1.1/title> ?title . } OPTIONAL { ?s <http://www.w3.org/2004/02/skos/core#prefLabel> ?skoslabel . } ${graphEnd}  } ${limit} ${sparqlOffset}" ;
	queryall_query:queryUriTemplateString "${defaultHostAddress}links/${input_1}${defaultSeparator}${input_2}" ;
	queryall_query:standardUriTemplateString "${defaultHostAddress}${input_1}${defaultSeparator}${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputUrlEncoded_normalisedStandardUri}\"><ns0pred:xLinks xmlns:ns0pred=\"${defaultHostAddress}bio2rdf_resource:\" rdf:resource=\"${xmlEncoded_inputUrlEncoded_normalisedQueryUri}\"/></rdf:Description>" ;
	queryall_query:inRobotsTxt "true"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int .

bio2rdf_query:primaryreverseconstructfrompubcheminchi a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "true"^^xsd:boolean ;
	dc:title "primaryreverseconstructfrompubcheminchi" ;
	queryall_query:handleAllNamespaces "false"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^([\\w-]+):(.+)" ;
	queryall_query:templateString "CONSTRUCT { <${inputUrlEncoded_normalisedStandardUri}> <http://bio2rdf.org/bio2rdf_resource:linkedToFrom> ?s . ?s ?p ?o} WHERE { ${graphStart} ?s <${defaultHostAddress}ns/ns/ns/pubchem#InChI> \"InChI=${input_2}\" . ?s ?p ?o . ${graphEnd}  } ${limit} ${sparqlOffset}" ;
	queryall_query:queryUriTemplateString "${defaultHostAddress}${input_1}${defaultSeparator}${input_2}" ;
	queryall_query:standardUriTemplateString "${defaultHostAddress}${input_1}${defaultSeparator}${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputUrlEncoded_normalisedStandardUri}\"><ns0pred:sameAs xmlns:ns0pred=\"http://www.w3.org/2002/07/owl#\" rdf:resource=\"${xmlEncoded_inputUrlEncoded_endpointSpecificUri}\"/></rdf:Description>" ;
	queryall_query:inRobotsTxt "false"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:namespaceToHandle bio2rdf_ns:inchi ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int ;
	queryall_query:includeQueryType bio2rdf_query:primaryreverseconstructfrompubcheminchi .

bio2rdf_query:licensefromlowercase a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "false"^^xsd:boolean ;
	dc:title "licensefromlowercase" ;
	queryall_query:handleAllNamespaces "true"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^license/([\\w-]+):(.+)" ;
	queryall_query:templateString "" ;
	queryall_query:queryUriTemplateString "${defaultHostAddress}license/${input_1}${defaultSeparator}${input_2}" ;
	queryall_query:standardUriTemplateString "${defaultHostAddress}${input_1}${defaultSeparator}${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputUrlEncoded_privateuppercase_normalisedStandardUri}\"><ns0pred:rights xmlns:ns0pred=\"http://purl.org/dc/terms/\" rdf:resource=\"${xmlEncoded_endpointUrl}\"/></rdf:Description>" ;
	queryall_query:inRobotsTxt "true"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int ;
	queryall_query:includeQueryType bio2rdf_query:licensefromlowercase .

bio2rdf_query:lsidresolution a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "false"^^xsd:boolean ;
	dc:title "lsidresolution" ;
	queryall_query:handleAllNamespaces "true"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "true"^^xsd:boolean ;
	queryall_query:inputRegex "^lsid/([\\w-]+):(.+)" ;
	queryall_query:templateString "" ;
	queryall_query:queryUriTemplateString "urn:lsid:bio2rdf.org:${input_1}${defaultSeparator}${input_2}" ;
	queryall_query:standardUriTemplateString "${defaultHostAddress}${input_1}${defaultSeparator}${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputUrlEncoded_normalisedStandardUri}\"><ns0pred:xLsid xmlns:ns0pred=\"${defaultHostAddress}bio2rdf_resource:\" rdf:resource=\"${xmlEncoded_inputUrlEncoded_normalisedQueryUri}\"/><ns0pred:xProxyLsid xmlns:ns0pred=\"${defaultHostAddress}bio2rdf_resource:\" rdf:resource=\"${defaultHostAddress}urn:lsid:bio2rdf.org:${xmlEncoded_urlEncoded_input_1}:${xmlEncoded_urlEncoded_input_2}\"/></rdf:Description>" ;
	queryall_query:inRobotsTxt "false"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int ;
	queryall_query:includeQueryType bio2rdf_query:lsidresolution .

bio2rdf_query:asn1 a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "false"^^xsd:boolean ;
	dc:title "asn1" ;
	queryall_query:handleAllNamespaces "true"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^asn1/([\\w-]+):(.+)" ;
	queryall_query:templateString "" ;
	queryall_query:queryUriTemplateString "${defaultHostAddress}asn1/${input_1}${defaultSeparator}${input_2}" ;
	queryall_query:standardUriTemplateString "${defaultHostAddress}${input_1}${defaultSeparator}${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputUrlEncoded_privateuppercase_normalisedStandardUri}\"><ns0pred:asn1Url xmlns:ns0pred=\"${defaultHostAddress}bio2rdf_resource:\">${xmlEncoded_inputUrlEncoded_privateuppercase_normalisedQueryUri}</ns0pred:asn1Url></rdf:Description>" ;
	queryall_query:inRobotsTxt "true"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int .

bio2rdf_query:html a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "false"^^xsd:boolean ;
	dc:title "html" ;
	queryall_query:handleAllNamespaces "true"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^html/([\\w-]+):(.+)" ;
	queryall_query:templateString "" ;
	queryall_query:queryUriTemplateString "${defaultHostAddress}html/${input_1}${defaultSeparator}${input_2}" ;
	queryall_query:standardUriTemplateString "${defaultHostAddress}${input_1}${defaultSeparator}${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputUrlEncoded_normalisedStandardUri}\"><ns0pred:url xmlns:ns0pred=\"${defaultHostAddress}bio2rdf_resource:\">${xmlEncoded_endpointUrl}</ns0pred:url></rdf:Description>" ;
	queryall_query:inRobotsTxt "true"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int ;
	queryall_query:includeQueryType bio2rdf_query:html .

bio2rdf_query:htmlinclude a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "false"^^xsd:boolean ;
	dc:title "html" ;
	queryall_query:handleAllNamespaces "true"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^([\\w-]+):(.+)" ;
	queryall_query:templateString "" ;
	queryall_query:queryUriTemplateString "${defaultHostAddress}html/${input_1}${defaultSeparator}${input_2}" ;
	queryall_query:standardUriTemplateString "${defaultHostAddress}${input_1}${defaultSeparator}${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputUrlEncoded_normalisedStandardUri}\"><ns0pred:urlList xmlns:ns0pred=\"${defaultHostAddress}bio2rdf_resource:\" rdf:resource=\"${xmlEncoded_normalisedQueryUri}\"></ns0pred:urlList></rdf:Description>" ;
	queryall_query:inRobotsTxt "true"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int ;
	queryall_query:includeQueryType bio2rdf_query:htmlinclude .

bio2rdf_query:unsafehtml a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "false"^^xsd:boolean ;
	dc:title "unsafe html" ;
	queryall_query:handleAllNamespaces "true"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^html/([\\w-]+):(.+)" ;
	queryall_query:templateString "" ;
	queryall_query:queryUriTemplateString "${defaultHostAddress}html/${input_1}${defaultSeparator}${input_2}" ;
	queryall_query:standardUriTemplateString "${defaultHostAddress}${input_1}${defaultSeparator}${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_normalisedStandardUri}\"><ns0pred:url xmlns:ns0pred=\"${defaultHostAddress}bio2rdf_resource:\">${xmlEncoded_normalisedQueryUri}</ns0pred:url></rdf:Description>" ;
	queryall_query:inRobotsTxt "true"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int .

bio2rdf_query:namespaceuricount a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "false"^^xsd:boolean ;
	dc:title "namespaceuricount" ;
	queryall_query:handleAllNamespaces "true"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^namespaceuricount/([\\w-]+)" ;
	queryall_query:templateString "SELECT count(*) WHERE { ${graphStart} ?s ?p ?o . FILTER(isuri(?o)) ${graphEnd} }" ;
	queryall_query:queryUriTemplateString "${defaultHostAddress}namespaceuricount/${urlEncoded_input_1}" ;
	queryall_query:standardUriTemplateString "${defaultHostAddress}ns/${urlEncoded_input_1}#" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputUrlEncoded_normalisedStandardUri}\"><ns0pred:xNamespaceObjectUriCount xmlns:ns0pred=\"${defaultHostAddress}bio2rdf_resource:\" rdf:resource=\"${xmlEncoded_inputUrlEncoded_normalisedQueryUri}\"/></rdf:Description>" ;
	queryall_query:inRobotsTxt "true"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:includeThenExclude ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int ;
	queryall_query:includeQueryType bio2rdf_query:nsinterlinksbetweentypes , bio2rdf_query:namespacecount , bio2rdf_query:namespaceuricount .

bio2rdf_query:ihop a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "false"^^xsd:boolean ;
	dc:title "ihop" ;
	queryall_query:handleAllNamespaces "false"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^ihop/([\\w-]+):(.+)" ;
	queryall_query:templateString "" ;
	queryall_query:queryUriTemplateString "${defaultHostAddress}ihop/${input_1}${defaultSeparator}${input_2}" ;
	queryall_query:standardUriTemplateString "${defaultHostAddress}${input_1}${defaultSeparator}${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputUrlEncoded_normalisedStandardUri}\"><ns0pred:ihopUrl xmlns:ns0pred=\"${defaultHostAddress}bio2rdf_resource:\">${xmlEncoded_inputUrlEncoded_normalisedQueryUri} </ns0pred:ihopUrl></rdf:Description>" ;
	queryall_query:inRobotsTxt "true"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:namespaceToHandle bio2rdf_ns:pubmed ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int .

bio2rdf_query:constructfromlowercase a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "true"^^xsd:boolean ;
	dc:title "constructfromlowercase" ;
	queryall_query:handleAllNamespaces "true"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^([\\w-]+):(.+)" ;
	queryall_query:templateString "CONSTRUCT { <${inputUrlEncoded_privateuppercase_normalisedStandardUri}> ?p ?o . } WHERE { ${graphStart} <${inputUrlEncoded_privatelowercase_endpointSpecificUri}> ?p ?o . ${graphEnd}  } ${limit} ${sparqlOffset}" ;
	queryall_query:queryUriTemplateString "${defaultHostAddress}${input_1}${defaultSeparator}${input_2}" ;
	queryall_query:standardUriTemplateString "${defaultHostAddress}${input_1}${defaultSeparator}${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputUrlEncoded_privateuppercase_normalisedStandardUri}\"><ns0pred:sameAs xmlns:ns0pred=\"http://www.w3.org/2002/07/owl#\" rdf:resource=\"${xmlEncoded_inputUrlEncoded_privatelowercase_endpointSpecificUri}\"/><ns0pred:sameAs xmlns:ns0pred=\"http://www.w3.org/2002/07/owl#\" rdf:resource=\"${xmlEncoded_inputUrlEncoded_privatelowercase_normalisedStandardUri}\"/></rdf:Description>" ;
	queryall_query:inRobotsTxt "false"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int ;
	queryall_query:includeQueryType bio2rdf_query:constructfromlowercase .

bio2rdf_query:countlinksbynamespacefromlowercase a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "false"^^xsd:boolean ;
	dc:title "countlinksnsfromlowercase" ;
	queryall_query:handleAllNamespaces "true"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^countlinksns/([\\w-]+)/([\\w-]+):(.+)" ;
	queryall_query:templateString "CONSTRUCT { <${inputUrlEncoded_privateuppercase_normalisedQueryUri}> <http://bio2rdf.org/bio2rdf_resource:hasNamespaceLinkCountResult> <${defaultHostAddress}linknsresultref/${urlEncoded_endpointUrl}/${urlEncoded_graphUri}/${urlEncoded_input_2}:${urlEncoded_uppercase_input_3}> . <${defaultHostAddress}linknsresultref/${urlEncoded_endpointUrl}/${urlEncoded_graphUri}/${urlEncoded_input_2}:${urlEncoded_uppercase_input_3}> <http://bio2rdf.org/bio2rdf_resource:sparqlEndpointUrl> <${endpointUrl}> .  <${defaultHostAddress}linknsresultref/${urlEncoded_endpointUrl}/${urlEncoded_graphUri}/${urlEncoded_input_2}:${urlEncoded_uppercase_input_3}> <http://bio2rdf.org/bio2rdf_resource:linksFromNamespace> <${defaultHostAddress}ns:${urlEncoded_input_1}#> .  <${defaultHostAddress}linknsresultref/${urlEncoded_endpointUrl}/${urlEncoded_graphUri}/${urlEncoded_input_2}:${urlEncoded_uppercase_input_3}> <http://bio2rdf.org/bio2rdf_resource:sparqlGraphUri> \"${graphUri}\" .  <${defaultHostAddress}linknsresultref/${urlEncoded_endpointUrl}/${urlEncoded_graphUri}/${urlEncoded_input_2}:${urlEncoded_uppercase_input_3}> <http://bio2rdf.org/bio2rdf_resource:hasLinkCount> `(select (count(?s)) as ?countS where { ${graphStart} ?s ?p <${inputUrlEncoded_privatelowercase_endpointSpecificUri}> . ${graphEnd} })` } where { ?s1 ?p1 ?o1 } limit 1" ;
	queryall_query:queryUriTemplateString "${defaultHostAddress}countlinksns/${input_1}/${input_2}:${input_3}" ;
	queryall_query:standardUriTemplateString "${defaultHostAddress}${input_2}:${input_3}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputUrlEncoded_privateuppercase_normalisedStandardUri}\"><ns0pred:xNamespaceCountLinks xmlns:ns0pred=\"${defaultHostAddress}bio2rdf_resource:\" rdf:resource=\"${xmlEncoded_inputUrlEncoded_privateuppercase_normalisedQueryUri}\"/><ns0pred:xCountLinks xmlns:ns0pred=\"${defaultHostAddress}bio2rdf_resource:\" rdf:resource=\"${defaultHostAddress}countlinks/${xmlEncoded_urlEncoded_input_2}:${xmlEncoded_urlEncoded_uppercase_input_3}\"/><ns0pred:sameAs xmlns:ns0pred=\"http://www.w3.org/2002/07/owl#\" rdf:resource=\"${xmlEncoded_inputUrlEncoded_privatelowercase_endpointSpecificUri}\"/><ns0pred:sameAs xmlns:ns0pred=\"http://www.w3.org/2002/07/owl#\" rdf:resource=\"${xmlEncoded_inputUrlEncoded_privatelowercase_normalisedStandardUri}\"/></rdf:Description>" ;
	queryall_query:inRobotsTxt "true"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int , "2"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int ;
	queryall_query:includeQueryType bio2rdf_query:countlinksbynamespacefromlowercase .

bio2rdf_query:lsidproxyinsertion a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "false"^^xsd:boolean ;
	dc:title "lsidproxyinsertion" ;
	queryall_query:handleAllNamespaces "true"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "false"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^urn:lsid:bio2rdf.org:([\\w-]+):(.+)" ;
	queryall_query:templateString "" ;
	queryall_query:queryUriTemplateString "${defaultHostAddress}urn:lsid:bio2rdf.org:${input_1}:${input_2}" ;
	queryall_query:standardUriTemplateString "${defaultHostAddress}${input_1}:${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputUrlEncoded_normalisedStandardUri}\"><ns0pred:xProxyLsid xmlns:ns0pred=\"${defaultHostAddress}bio2rdf_resource:\" rdf:resource=\"${xmlEncoded_inputUrlEncoded_normalisedQueryUri}\"/></rdf:Description>" ;
	queryall_query:inRobotsTxt "false"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int ;
	queryall_query:includeQueryType bio2rdf_query:lsidproxyinsertion .

bio2rdf_query:linksfromlowercase a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "true"^^xsd:boolean ;
	dc:title "linksfromlowercase" ;
	queryall_query:handleAllNamespaces "true"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "false"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^links/([\\w-]+):(.+)" ;
	queryall_query:templateString "CONSTRUCT { ?s ?p <${inputUrlEncoded_privateuppercase_normalisedStandardUri}> . ?s a ?linkedRecordType . ?s <http://www.w3.org/2000/01/rdf-schema#label> ?label . ?s <http://purl.org/dc/elements/1.1/title> ?title . ?s <http://www.w3.org/2004/02/skos/core#prefLabel> ?skoslabel . } WHERE {  ${graphStart}  ?s ?p <${inputUrlEncoded_privatelowercase_endpointSpecificUri}> . OPTIONAL { ?s a ?linkedRecordType . } OPTIONAL { ?s <http://www.w3.org/2000/01/rdf-schema#label> ?label . } OPTIONAL { ?s <http://purl.org/dc/elements/1.1/title> ?title . } OPTIONAL { ?s <http://www.w3.org/2004/02/skos/core#prefLabel> ?skoslabel . }${graphEnd}  } ${limit} ${sparqlOffset}" ;
	queryall_query:queryUriTemplateString "${defaultHostAddress}links/${input_1}${defaultSeparator}${input_2}" ;
	queryall_query:standardUriTemplateString "${defaultHostAddress}${input_1}${defaultSeparator}${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputUrlEncoded_privateuppercase_normalisedStandardUri}\"><ns0pred:xLinks xmlns:ns0pred=\"${defaultHostAddress}bio2rdf_resource:\" rdf:resource=\"${xmlEncoded_inputUrlEncoded_privateuppercase_normalisedQueryUri}\"/><ns0pred:sameAs xmlns:ns0pred=\"http://www.w3.org/2002/07/owl#\" rdf:resource=\"${xmlEncoded_inputUrlEncoded_privatelowercase_endpointSpecificUri}\"/><ns0pred:sameAs xmlns:ns0pred=\"http://www.w3.org/2002/07/owl#\" rdf:resource=\"${xmlEncoded_inputUrlEncoded_privatelowercase_normalisedStandardUri}\"/></rdf:Description>" ;
	queryall_query:inRobotsTxt "true"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int .

bio2rdf_query:unknownquery a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "true"^^xsd:boolean ;
    queryall_query:isPageable "false"^^xsd:boolean ;
	dc:title "unknownquery" ;
	queryall_query:handleAllNamespaces "false"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "false"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^unknownquery/(.+)" ;
	queryall_query:templateString "" ;
	queryall_query:queryUriTemplateString "${defaultHostAddress}${queryString}" ;
	queryall_query:standardUriTemplateString "${defaultHostAddress}${queryString}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputUrlEncoded_normalisedStandardUri}\"><ns0pred:containsUnknownQuery xmlns:ns0pred=\"${defaultHostAddress}bio2rdf_resource:\" rdf:resource=\"${xmlEncoded_inputUrlEncoded_normalisedQueryUri}\"/><rdf:type xmlns:ns0pred=\"${defaultHostAddress}bio2rdf_resource:\" rdf:resource=\"http://bio2rdf.org/bio2rdf_resource:Error\"/><rdf:type xmlns:ns0pred=\"${defaultHostAddress}bio2rdf_resource:\" rdf:resource=\"http://bio2rdf.org/bio2rdf_resource:UnknownQueryError\"/></rdf:Description>" ;
	queryall_query:inRobotsTxt "true"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:hasPublicIdentifierIndex "0"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "0"^^xsd:int ;
	queryall_query:includeQueryType bio2rdf_query:unknownquery .

bio2rdf_query:htmlfromlowercase a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "false"^^xsd:boolean ;
	dc:title "htmlfromlowercase" ;
	queryall_query:handleAllNamespaces "true"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^html/([\\w-]+):(.+)" ;
	queryall_query:templateString "" ;
	queryall_query:queryUriTemplateString "${defaultHostAddress}html/${input_1}${defaultSeparator}${input_2}" ;
	queryall_query:standardUriTemplateString "${defaultHostAddress}${input_1}${defaultSeparator}${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputUrlEncoded_privateuppercase_normalisedStandardUri}\"><ns0pred:url xmlns:ns0pred=\"${defaultHostAddress}bio2rdf_resource:\">${xmlEncoded_inputUrlEncoded_privateuppercase_normalisedQueryUri}</ns0pred:url></rdf:Description>" ;
	queryall_query:inRobotsTxt "true"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int .

bio2rdf_query:linkstonamespace a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "true"^^xsd:boolean ;
	dc:title "linkstonamespace" ;
	queryall_query:handleAllNamespaces "true"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^linkstonamespace/([\\w-]+)/([\\w-]+):(.+)" ;
	queryall_query:templateString "CONSTRUCT { <${inputUrlEncoded_normalisedStandardUri}> ?p ?o . } WHERE { ${graphStart} <${inputUrlEncoded_endpointSpecificUri}> ?p ?o . FILTER ( isUri(?o) && regex( str(?o), \"${inputUrlEncoded_endpointSpecificQueryUri}\" ) ) ${graphEnd} } ${limit} ${sparqlOffset}" ;
	queryall_query:queryUriTemplateString "${defaultHostAddress}${input_1}${defaultSeparator}" ;
	queryall_query:standardUriTemplateString "${defaultHostAddress}${input_2}${defaultSeparator}${input_3}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputUrlEncoded_normalisedStandardUri}\"><ns0pred:xLinksToNamespace xmlns:ns0pred=\"${defaultHostAddress}bio2rdf_resource:\" rdf:resource=\"${defaultHostAddress}linkstonamespace/${xmlEncoded_urlEncoded_input_1}/${xmlEncoded_urlEncoded_input_2}${defaultSeparator}${xmlEncoded_urlEncoded_input_3}\"/></rdf:Description>" ;
	queryall_query:inRobotsTxt "true"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int , "2"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "2"^^xsd:int .

bio2rdf_query:unsafelinkstonamespace a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "true"^^xsd:boolean ;
	dc:title "unsafelinkstonamespace" ;
	queryall_query:handleAllNamespaces "true"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^linkstonamespace/([\\w-]+)/([\\w-]+):(.+)" ;
	queryall_query:templateString "CONSTRUCT { <${inputUrlEncoded_normalisedStandardUri}> ?p ?o . } WHERE { ${graphStart} <${inputUrlEncoded_endpointSpecificUri}> ?p ?o . FILTER ( isUri(?o) && regex( str(?o), \"${ntriplesEncoded_endpointSpecificQueryUri}\" ) ) ${graphEnd} } ${limit} ${sparqlOffset}" ;
	queryall_query:queryUriTemplateString "${defaultHostAddress}${input_1}${defaultSeparator}" ;
	queryall_query:standardUriTemplateString "${defaultHostAddress}${input_2}${defaultSeparator}${input_3}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputUrlEncoded_normalisedStandardUri}\"><ns0pred:xLinksToNamespace xmlns:ns0pred=\"${defaultHostAddress}bio2rdf_resource:\" rdf:resource=\"${defaultHostAddress}linkstonamespace/${xmlEncoded_urlEncoded_input_1}/${xmlEncoded_urlEncoded_input_2}${defaultSeparator}${xmlEncoded_urlEncoded_input_3}\"/></rdf:Description>" ;
	queryall_query:inRobotsTxt "true"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int , "2"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "2"^^xsd:int .

bio2rdf_query:homepage a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "false"^^xsd:boolean ;
	dc:title "homepage" ;
	queryall_query:handleAllNamespaces "true"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^homepage/([\\w-]+)" ;
	queryall_query:templateString "" ;
	queryall_query:queryUriTemplateString "${defaultHostAddress}homepage/${input_1}" ;
	queryall_query:standardUriTemplateString "${defaultHostAddress}ns:${input_1}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputUrlEncoded_privateuppercase_normalisedStandardUri}\"><ns0pred:homepageUrl xmlns:ns0pred=\"${defaultHostAddress}bio2rdf_resource:\">${xmlEncoded_inputUrlEncoded_privateuppercase_normalisedQueryUri}</ns0pred:homepageUrl></rdf:Description>" ;
	queryall_query:inRobotsTxt "true"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int .

bio2rdf_query:lsidstandardinsertion a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "false"^^xsd:boolean ;
	dc:title "lsidstandardinsertion" ;
	queryall_query:handleAllNamespaces "true"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "false"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^urn:lsid:bio2rdf.org:([\\w-]+):(.+)" ;
	queryall_query:templateString "" ;
	queryall_query:queryUriTemplateString "urn:lsid:bio2rdf.org:${input_1}:${input_2}" ;
	queryall_query:standardUriTemplateString "${defaultHostAddress}${input_1}:${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputUrlEncoded_normalisedStandardUri}\"><ns0pred:xLsid xmlns:ns0pred=\"${defaultHostAddress}bio2rdf_resource:\" rdf:resource=\"${xmlEncoded_inputUrlEncoded_normalisedQueryUri}\"/></rdf:Description>" ;
	queryall_query:inRobotsTxt "false"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int ;
	queryall_query:includeQueryType bio2rdf_query:lsidstandardinsertion .

bio2rdf_query:license a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "false"^^xsd:boolean ;
	dc:title "license" ;
	queryall_query:handleAllNamespaces "true"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^license/([\\w-]+):(.+)" ;
	queryall_query:templateString "" ;
	queryall_query:queryUriTemplateString "${defaultHostAddress}license/${input_1}${defaultSeparator}${input_2}" ;
	queryall_query:standardUriTemplateString "${defaultHostAddress}${input_1}${defaultSeparator}${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputPlusUrlEncoded_normalisedStandardUri}\"><ns0pred:rights xmlns:ns0pred=\"http://purl.org/dc/terms/\" rdf:resource=\"${xmlEncoded_endpointUrl}\"/></rdf:Description>" ;
	queryall_query:inRobotsTxt "true"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int ;
	queryall_query:includeQueryType bio2rdf_query:license .

bio2rdf_query:licenseendpoint a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "false"^^xsd:boolean ;
	dc:title "A direct reference to the endpoint without using a redirect URL" ;
	queryall_query:handleAllNamespaces "true"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^([\\w-]+):(.+)" ;
	queryall_query:templateString "" ;
	queryall_query:queryUriTemplateString "${defaultHostAddress}license/${input_1}${defaultSeparator}${input_2}" ;
	queryall_query:standardUriTemplateString "${defaultHostAddress}${input_1}${defaultSeparator}${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputUrlEncoded_normalisedStandardUri}\"><ns0pred:rights xmlns:ns0pred=\"http://purl.org/dc/terms/\" rdf:resource=\"${xmlEncoded_inputUrlEncoded_normalisedQueryUri}\"/></rdf:Description>" ;
	queryall_query:inRobotsTxt "true"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int ;
	queryall_query:includeQueryType bio2rdf_query:licenseendpoint .

bio2rdf_query:plusurlencodedlicense a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "false"^^xsd:boolean ;
	dc:title "license" ;
	queryall_query:handleAllNamespaces "true"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^license/([\\w-]+):(.+)" ;
	queryall_query:templateString "" ;
	queryall_query:queryUriTemplateString "${defaultHostAddress}license/${input_1}${defaultSeparator}${input_2}" ;
	queryall_query:standardUriTemplateString "${defaultHostAddress}${input_1}${defaultSeparator}${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputPlusUrlEncoded_normalisedStandardUri}\"><ns0pred:rights xmlns:ns0pred=\"http://purl.org/dc/terms/\" rdf:resource=\"${xmlEncoded_endpointUrl}\"/></rdf:Description>" ;
	queryall_query:inRobotsTxt "true"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int ;
    queryall_query:includeQueryType bio2rdf_query:plusurlencodedlicense .

bio2rdf_query:plusurlencodedlicenseendpoint a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "false"^^xsd:boolean ;
	dc:title "license" ;
	queryall_query:handleAllNamespaces "true"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^([\\w-]+):(.+)" ;
	queryall_query:templateString "" ;
	queryall_query:queryUriTemplateString "${defaultHostAddress}license/${input_1}${defaultSeparator}${input_2}" ;
	queryall_query:standardUriTemplateString "${defaultHostAddress}${input_1}${defaultSeparator}${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputPlusUrlEncoded_normalisedStandardUri}\"><ns0pred:rights xmlns:ns0pred=\"http://purl.org/dc/terms/\" rdf:resource=\"${xmlEncoded_inputPlusUrlEncoded_normalisedQueryUri}\"/></rdf:Description>" ;
	queryall_query:inRobotsTxt "true"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int ;
    queryall_query:includeQueryType bio2rdf_query:plusurlencodedlicenseendpoint .


bio2rdf_query:countlinks a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "false"^^xsd:boolean ;
	dc:title "countlinks" ;
	queryall_query:handleAllNamespaces "true"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "false"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^countlinks/([\\w-]+):(.+)" ;
	queryall_query:templateString "CONSTRUCT { <${inputUrlEncoded_normalisedQueryUri}> <http://bio2rdf.org/bio2rdf_resource:hasLinkCountResult> <${defaultHostAddress}linkresultref/${urlEncoded_endpointUrl}/${urlEncoded_graphUri}/${urlEncoded_input_1}:${urlEncoded_input_2}> . <${defaultHostAddress}linkresultref/${urlEncoded_endpointUrl}/${urlEncoded_graphUri}/${urlEncoded_input_1}:${urlEncoded_input_2}> <http://bio2rdf.org/bio2rdf_resource:sparqlEndpointUrl> <${endpointUrl}> .  <${defaultHostAddress}linkresultref/${urlEncoded_endpointUrl}/${urlEncoded_graphUri}/${urlEncoded_input_1}:${urlEncoded_input_2}> <http://bio2rdf.org/bio2rdf_resource:sparqlGraphUri> \"${graphUri}\" . <${defaultHostAddress}linkresultref/${urlEncoded_endpointUrl}/${urlEncoded_graphUri}/${urlEncoded_input_1}:${urlEncoded_input_2}> <http://bio2rdf.org/bio2rdf_resource:hasLinkCount> `(select (count(?s)) as ?countS where { ${graphStart} ?s ?p <${inputUrlEncoded_endpointSpecificUri}> . ${graphEnd} })` } where { ?s1 ?p1 ?o1 } limit 1" ;
	queryall_query:queryUriTemplateString "${defaultHostAddress}countlinks/${input_1}${defaultSeparator}${input_2}" ;
	queryall_query:standardUriTemplateString "${defaultHostAddress}${input_1}${defaultSeparator}${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputUrlEncoded_normalisedStandardUri}\"><ns0pred:xCountLinks xmlns:ns0pred=\"${defaultHostAddress}bio2rdf_resource:\" rdf:resource=\"${xmlEncoded_inputUrlEncoded_normalisedQueryUri}\"/></rdf:Description>" ;
	queryall_query:inRobotsTxt "true"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int ;
	queryall_query:includeQueryType bio2rdf_query:construct , bio2rdf_query:countlinks .

bio2rdf_query:virtuosobifcontainsquicksearchbynamespace a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "true"^^xsd:boolean ;
	dc:title "virtuosobifcontainsquicksearchbynamespace" ;
	queryall_query:handleAllNamespaces "true"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^quicksearchns/([\\w-]+)/(.+)" ;
	queryall_query:templateString "CONSTRUCT { <${inputUrlEncoded_normalisedQueryUri}> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://bio2rdf.org/bio2rdf_resource:SearchResults> . <${inputUrlEncoded_normalisedQueryUri}> <http://bio2rdf.org/bio2rdf_resource:hasSearchResult> ?s .  <${inputUrlEncoded_normalisedQueryUri}> <http://www.w3.org/2000/01/rdf-schema#seeAlso> ?s . ?s <http://www.w3.org/2000/01/rdf-schema#label> ?label . ?s <http://purl.org/dc/elements/1.1/title> ?title . ?s <http://purl.org/dc/terms/title> ?dctermstitle . ?s <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> ?type . ?s <http://www.w3.org/2004/02/skos/core#prefLabel> ?skoslabel . ?s ?p ?o .  } WHERE { ${graphStart} ?s ?p ?o . FILTER(bif:contains(?o, '\"${ntriplesEncoded_input_2}\"')) OPTIONAL { ?s <http://www.w3.org/2000/01/rdf-schema#label> ?label . } OPTIONAL { ?s <http://purl.org/dc/elements/1.1/title> ?title . }  OPTIONAL{ ?s <http://purl.org/dc/terms/title> ?dctermstitle . }  OPTIONAL{ ?s <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> ?type . } OPTIONAL { ?s <http://www.w3.org/2004/02/skos/core#prefLabel> ?skoslabel . } ${graphEnd} } ${quicklimit} ${sparqlOffset}" ;
	queryall_query:queryUriTemplateString "${defaultHostAddress}quicksearchns/${urlEncoded_input_1}/${urlEncoded_input_2}" ;
	queryall_query:standardUriTemplateString "${defaultHostAddress}quicksearchns/${urlEncoded_input_1}/${urlEncoded_input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputUrlEncoded_normalisedStandardUri}\"><ns0pred:hasGlobalSearch xmlns:ns0pred=\"${defaultHostAddress}bio2rdf_resource:\" rdf:resource=\"${defaultHostAddress}search/${xmlEncoded_urlEncoded_input_2}\"/></rdf:Description>" ;
	queryall_query:inRobotsTxt "true"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int ;
	queryall_query:includeQueryType bio2rdf_query:virtuosobifcontainssearchbynamespace .

bio2rdf_query:virtuosobifcontainssearchbynamespace a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "true"^^xsd:boolean ;
	dc:title "virtuosobifcontainssearchbynamespace" ;
	queryall_query:handleAllNamespaces "true"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^searchns/([\\w-]+)/(.+)" ;
	queryall_query:templateString "CONSTRUCT { <${inputUrlEncoded_normalisedQueryUri}> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://bio2rdf.org/bio2rdf_resource:SearchResults> . <${inputUrlEncoded_normalisedQueryUri}> <http://bio2rdf.org/bio2rdf_resource:hasSearchResult> ?s .  <${inputUrlEncoded_normalisedQueryUri}> <http://www.w3.org/2000/01/rdf-schema#seeAlso> ?s . ?s <http://www.w3.org/2000/01/rdf-schema#label> ?label . ?s <http://purl.org/dc/elements/1.1/title> ?title . ?s <http://purl.org/dc/terms/title> ?dctermstitle . ?s <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> ?type . ?s <http://www.w3.org/2004/02/skos/core#prefLabel> ?skoslabel . ?s ?p ?o .  } WHERE { ${graphStart} ?s ?p ?o . FILTER(bif:contains(?o, '\"${ntriplesEncoded_input_2}\"')) OPTIONAL { ?s <http://www.w3.org/2000/01/rdf-schema#label> ?label . } OPTIONAL { ?s <http://purl.org/dc/elements/1.1/title> ?title . }  OPTIONAL{ ?s <http://purl.org/dc/terms/title> ?dctermstitle . }  OPTIONAL{ ?s <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> ?type . } OPTIONAL { ?s <http://www.w3.org/2004/02/skos/core#prefLabel> ?skoslabel . } ${graphEnd} } ${limit} ${sparqlOffset}" ;
	queryall_query:queryUriTemplateString "${defaultHostAddress}searchns/${urlEncoded_input_1}/${urlEncoded_input_2}" ;
	queryall_query:standardUriTemplateString "${defaultHostAddress}searchns/${urlEncoded_input_1}/${urlEncoded_input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputUrlEncoded_normalisedStandardUri}\"><ns0pred:hasGlobalSearch xmlns:ns0pred=\"${defaultHostAddress}bio2rdf_resource:\" rdf:resource=\"${defaultHostAddress}search/${xmlEncoded_urlEncoded_input_2}\"/></rdf:Description>" ;
	queryall_query:inRobotsTxt "true"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int ;
	queryall_query:includeQueryType bio2rdf_query:virtuosobifcontainssearchbynamespace .

bio2rdf_query:sparqlregexsearchbynamespace a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "true"^^xsd:boolean ;
	dc:title "sparqlregexsearchbynamespace" ;
	queryall_query:handleAllNamespaces "true"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^searchns/([\\w-]+)/(.+)" ;
	queryall_query:templateString "CONSTRUCT { <${inputUrlEncoded_normalisedQueryUri}> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://bio2rdf.org/bio2rdf_resource:SearchResults> . <${inputUrlEncoded_normalisedQueryUri}> <http://bio2rdf.org/bio2rdf_resource:hasSearchResult> ?s .  <${inputUrlEncoded_normalisedQueryUri}> <http://www.w3.org/2000/01/rdf-schema#seeAlso> ?s . ?s <http://www.w3.org/2000/01/rdf-schema#label> ?label . ?s <http://purl.org/dc/elements/1.1/title> ?title . ?s <http://purl.org/dc/terms/title> ?dctermstitle . ?s <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> ?type . ?s <http://www.w3.org/2004/02/skos/core#prefLabel> ?skoslabel . ?s ?p ?o .  } WHERE { ${graphStart} ?s ?p ?o . FILTER(regex(str(?o), \"${ntriplesEncoded_input_2}\")) OPTIONAL { ?s <http://www.w3.org/2000/01/rdf-schema#label> ?label . } OPTIONAL { ?s <http://purl.org/dc/elements/1.1/title> ?title . } OPTIONAL{ ?s <http://purl.org/dc/terms/title> ?dctermstitle . } OPTIONAL{ ?s <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> ?type . } OPTIONAL { ?s <http://www.w3.org/2004/02/skos/core#prefLabel> ?skoslabel . } ${graphEnd} } ${limit} ${sparqlOffset}" ;
	queryall_query:queryUriTemplateString "${defaultHostAddress}searchns/${urlEncoded_input_1}/${urlEncoded_input_2}" ;
	queryall_query:standardUriTemplateString "${defaultHostAddress}searchns/${urlEncoded_input_1}/${urlEncoded_input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputUrlEncoded_normalisedStandardUri}\"><ns0pred:hasGlobalSearch xmlns:ns0pred=\"${defaultHostAddress}bio2rdf_resource:\" rdf:resource=\"${defaultHostAddress}search/${xmlEncoded_urlEncoded_input_2}\"/></rdf:Description>" ;
	queryall_query:inRobotsTxt "true"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int ;
	queryall_query:includeQueryType bio2rdf_query:sparqlregexsearchbynamespace .

bio2rdf_query:constructnoextras a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "true"^^xsd:boolean ;
	dc:title "constructnoextras" ;
	queryall_query:handleAllNamespaces "true"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "true"^^xsd:boolean ;
	queryall_query:inputRegex "^constructnoextras/([\\w-]+):(.+)" ;
	queryall_query:templateString "CONSTRUCT { <${inputUrlEncoded_normalisedStandardUri}> ?p ?o . } WHERE { ${graphStart} <${inputUrlEncoded_endpointSpecificUri}> ?p ?o . ${graphEnd}  } ${limit} ${sparqlOffset}" ;
	queryall_query:queryUriTemplateString "${defaultHostAddress}constructnoextras/${input_1}${defaultSeparator}${input_2}" ;
	queryall_query:standardUriTemplateString "${defaultHostAddress}${input_1}${defaultSeparator}${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "" ;
	queryall_query:inRobotsTxt "false"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int .

bio2rdf_query:constructnoinclude a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "true"^^xsd:boolean ;
	dc:title "constructnoextras" ;
	queryall_query:handleAllNamespaces "true"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "true"^^xsd:boolean ;
	queryall_query:inputRegex "^([\\w-]+):(.+)" ;
	queryall_query:templateString "CONSTRUCT { <${inputUrlEncoded_normalisedStandardUri}> ?p ?o . } WHERE { ${graphStart} <${inputUrlEncoded_endpointSpecificUri}> ?p ?o . ${graphEnd}  } ${limit} ${sparqlOffset}" ;
	queryall_query:queryUriTemplateString "${defaultHostAddress}constructnoextras/${input_1}${defaultSeparator}${input_2}" ;
	queryall_query:standardUriTemplateString "${defaultHostAddress}${input_1}${defaultSeparator}${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "" ;
	queryall_query:inRobotsTxt "false"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int .

bio2rdf_query:suppliers a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "false"^^xsd:boolean ;
	dc:title "suppliers" ;
	queryall_query:handleAllNamespaces "true"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^suppliers/([\\w-]+):(.+)" ;
	queryall_query:templateString "" ;
	queryall_query:queryUriTemplateString "${defaultHostAddress}suppliers/${input_1}${defaultSeparator}${input_2}" ;
	queryall_query:standardUriTemplateString "${defaultHostAddress}${input_1}${defaultSeparator}${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputUrlEncoded_normalisedStandardUri}\"><ns0pred:suppliers xmlns:ns0pred=\"${defaultHostAddress}bio2rdf_resource:\">${xmlEncoded_inputUrlEncoded_normalisedQueryUri}</ns0pred:suppliers></rdf:Description>" ;
	queryall_query:inRobotsTxt "true"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int .

bio2rdf_query:taglabels a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "true"^^xsd:boolean ;
	dc:title "taglabels" ;
	queryall_query:handleAllNamespaces "false"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^([\\w-]+):(.+)" ;
	queryall_query:templateString "PREFIX tags: <http://www.holygoat.co.uk/owl/redwood/0.1/tags/> PREFIX terms: <http://purl.org/net/terms#> CONSTRUCT { ?taggingInstance rdf:type terms:TermInstance . ?taggingInstance terms:subject <${inputUrlEncoded_normalisedStandardUri}> . ?taggingInstance terms:term ?tagLabelUri . ?tagLabelUri tags:name ?tagLabelName . } WHERE { ${graphStart} ?taggingInstance rdf:type terms:TermInstance . ?taggingInstance terms:taggedBy ?foafUser . ?taggingInstance terms:taggedOn ?taggedOn .         ?taggingInstance terms:subject <${inputUrlEncoded_endpointSpecificUri}> . OPTIONAL{ ?taggingInstance terms:predicate ?termPredicate .} OPTIONAL{?taggingInstance terms:object ?termObject .} ?taggingInstance terms:term ?tagLabelUri . ?tagLabelUri tags:name ?tagLabelName . FILTER(sameTerm(?foafUser, <http://purl.org/net/terms#AnonymousUser>)) ${graphEnd} } ${limit} ${sparqlOffset}" ;
	queryall_query:queryUriTemplateString "${defaultHostAddress}${input_1}${defaultSeparator}${input_2}" ;
	queryall_query:standardUriTemplateString "${defaultHostAddress}${input_1}${defaultSeparator}${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "" ;
	queryall_query:inRobotsTxt "false"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:namespaceToHandle bio2rdf_ns:geneid , bio2rdf_ns:mquter_gene , bio2rdf_ns:go , bio2rdf_ns:keywords , bio2rdf_ns:term , bio2rdf_ns:terminstance ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int .

bio2rdf_query:primaryreverseconstructfromdcidentifier a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "true"^^xsd:boolean ;
	dc:title "primaryreverseconstructfromdcidentifier" ;
	queryall_query:handleAllNamespaces "true"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^([\\w-]+):(.+)" ;
	queryall_query:templateString "CONSTRUCT { <${normalisedStandardUri}> <http://bio2rdf.org/bio2rdf_resource:linkedToFrom> ?s . ?s ?p ?o} WHERE { ${graphStart} ?s <http://purl.org/dc/elements/1.1/identifier> ?identifier . FILTER(str(?identifier) = \"${input_1}${defaultSeparator}${input_2}\") . ?s ?p ?o . ${graphEnd}  } ${limit} ${sparqlOffset}" ;
	queryall_query:queryUriTemplateString "${defaultHostAddress}${input_1}${defaultSeparator}${input_2}" ;
	queryall_query:standardUriTemplateString "${defaultHostAddress}${input_1}${defaultSeparator}${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputUrlEncoded_normalisedStandardUri}\"><ns0pred:sameAs xmlns:ns0pred=\"http://www.w3.org/2002/07/owl#\" rdf:resource=\"${xmlEncoded_inputUrlEncoded_endpointSpecificUri}\"/></rdf:Description>" ;
	queryall_query:inRobotsTxt "false"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int ;
	queryall_query:includeQueryType bio2rdf_query:primaryreverseconstructfromdcidentifier .

bio2rdf_query:primaryreverseconstructfromdoi a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "true"^^xsd:boolean ;
	dc:title "primaryreverseconstructfromdoi" ;
	queryall_query:handleAllNamespaces "false"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:namespaceToHandle bio2rdf_ns:doi ;
 	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^([\\w-]+):(.+)" ;
	queryall_query:templateString "CONSTRUCT { <${normalisedStandardUri}> <http://bio2rdf.org/bio2rdf_resource:linkedToFrom> ?s . ?s ?p ?o} WHERE { ${graphStart} ?s <http://purl.org/ontology/bibo/doi> ?doi . FILTER(?str(?doi) = \"${input_2}\") . ?s ?p ?o . ${graphEnd}  } ${limit} ${sparqlOffset}" ;
	queryall_query:queryUriTemplateString "${defaultHostAddress}${input_1}${defaultSeparator}${input_2}" ;
	queryall_query:standardUriTemplateString "${defaultHostAddress}${input_1}${defaultSeparator}${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputUrlEncoded_normalisedStandardUri}\"><ns0pred:sameAs xmlns:ns0pred=\"http://www.w3.org/2002/07/owl#\" rdf:resource=\"${xmlEncoded_inputUrlEncoded_endpointSpecificUri}\"/></rdf:Description>" ;
	queryall_query:inRobotsTxt "false"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int ;
	queryall_query:includeQueryType bio2rdf_query:primaryreverseconstructfromdoi .

bio2rdf_query:primaryreverseconstructfromdoifornmrshiftdbspectrum a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "true"^^xsd:boolean ;
	dc:title "primaryreverseconstructfromdoifornmrshiftdbspectrum" ;
	queryall_query:handleAllNamespaces "false"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:namespaceToHandle bio2rdf_ns:doi ;
 	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^([\\w-]+):(.+)" ;
	queryall_query:templateString "CONSTRUCT { <${normalisedStandardUri}> <http://bio2rdf.org/bio2rdf_resource:hasNMRSpectrum> ?spectrum . } WHERE { ${graphStart} ?bib <http://purl.org/ontology/bibo/doi> \"${input_2}\" . ?spectrum <http://purl.org/dc/elements/1.1/source> ?bib . ${graphEnd}  } ${limit} ${sparqlOffset}" ;
	queryall_query:queryUriTemplateString "${defaultHostAddress}${input_1}${defaultSeparator}${input_2}" ;
	queryall_query:standardUriTemplateString "${defaultHostAddress}${input_1}${defaultSeparator}${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputUrlEncoded_normalisedStandardUri}\"><ns0pred:sameAs xmlns:ns0pred=\"http://www.w3.org/2002/07/owl#\" rdf:resource=\"${xmlEncoded_inputUrlEncoded_endpointSpecificUri}\"/></rdf:Description>" ;
	queryall_query:inRobotsTxt "false"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int ;
	queryall_query:includeQueryType bio2rdf_query:primaryreverseconstructfromdoifornmrshiftdbspectrum .

bio2rdf_query:counttriples a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "false"^^xsd:boolean ;
	dc:title "counttriples" ;
	queryall_query:handleAllNamespaces "true"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "false"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^counttriples/([\\w-]+):(.+)" ;
	queryall_query:templateString "CONSTRUCT { <${inputUrlEncoded_normalisedQueryUri}> <http://bio2rdf.org/bio2rdf_resource:hasTripleCountResult> <${defaultHostAddress}tripleresultref/${urlEncoded_endpointUrl}/${urlEncoded_graphUri}/${urlEncoded_input_1}:${urlEncoded_input_2}> . <${defaultHostAddress}tripleresultref/${urlEncoded_endpointUrl}/${urlEncoded_graphUri}/${urlEncoded_input_1}:${urlEncoded_input_2}> <http://bio2rdf.org/bio2rdf_resource:sparqlEndpointUrl> <${endpointUrl}> .  <${defaultHostAddress}tripleresultref/${urlEncoded_endpointUrl}/${urlEncoded_graphUri}/${urlEncoded_input_1}:${urlEncoded_input_2}> <http://bio2rdf.org/bio2rdf_resource:sparqlGraphUri> \"${graphUri}\" . <${defaultHostAddress}tripleresultref/${urlEncoded_endpointUrl}/${urlEncoded_graphUri}/${urlEncoded_input_1}:${urlEncoded_input_2}> <http://bio2rdf.org/bio2rdf_resource:hasTripleCount> `(select (count(?o)) as ?countO where { ${graphStart} <${inputUrlEncoded_endpointSpecificUri}> ?p ?o . ${graphEnd} })` } where { ?s1 ?p1 ?o1 } limit 1" ;
	queryall_query:queryUriTemplateString "${defaultHostAddress}counttriples/${input_1}${defaultSeparator}${input_2}" ;
	queryall_query:standardUriTemplateString "${defaultHostAddress}${input_1}${defaultSeparator}${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputUrlEncoded_normalisedStandardUri}\"><ns0pred:xCountTriples xmlns:ns0pred=\"${defaultHostAddress}bio2rdf_resource:\" rdf:resource=\"${xmlEncoded_inputUrlEncoded_normalisedQueryUri}\"/></rdf:Description>" ;
	queryall_query:inRobotsTxt "true"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int ;
	queryall_query:includeQueryType bio2rdf_query:construct , bio2rdf_query:counttriples .

bio2rdf_query:prosite2goconstruct a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "true"^^xsd:boolean ;
	dc:title "prosite2goconstruct" ;
	queryall_query:handleAllNamespaces "false"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^([\\w-]+):(.+)" ;
	queryall_query:templateString "CONSTRUCT { <${inputUrlEncoded_normalisedStandardUri}> <http://bio2rdf.org/bio2rdf_resource:has_go_annotation> ?goAnnotation .  } WHERE {  ${graphStart}  ?goAnnotation <http://www.geneontology.org/formats/oboInOwl#hasDbXref> ?o . ?o <http://www.geneontology.org/formats/oboInOwl#hasURI> \"${inputUrlEncoded_endpointSpecificUri}\"^^xsd:anyURI . ${graphEnd}  } ${limit} ${sparqlOffset}" ;
	queryall_query:queryUriTemplateString "${defaultHostAddress}${input_1}${defaultSeparator}${input_2}" ;
	queryall_query:standardUriTemplateString "${defaultHostAddress}${input_1}${defaultSeparator}${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "" ;
	queryall_query:inRobotsTxt "false"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:namespaceToHandle bio2rdf_ns:prosite ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int .

bio2rdf_query:medline a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "false"^^xsd:boolean ;
	dc:title "medline" ;
	queryall_query:handleAllNamespaces "false"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^medline/([\\w-]+):(.+)" ;
	queryall_query:templateString "" ;
	queryall_query:queryUriTemplateString "${defaultHostAddress}medline/${input_1}${defaultSeparator}${input_2}" ;
	queryall_query:standardUriTemplateString "${defaultHostAddress}${input_1}${defaultSeparator}${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputUrlEncoded_normalisedStandardUri}\"><ns0pred:medlineUrl xmlns:ns0pred=\"${defaultHostAddress}bio2rdf_resource:\">${xmlEncoded_inputUrlEncoded_normalisedQueryUri}</ns0pred:medlineUrl></rdf:Description>" ;
	queryall_query:inRobotsTxt "true"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:namespaceToHandle bio2rdf_ns:pubmed ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int .

bio2rdf_query:similardrugsbygeneid a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "false"^^xsd:boolean ;
	dc:title "similardrugsbygeneid" ;
	queryall_query:handleAllNamespaces "false"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^similardrugsbygeneid/([\\w-]+):(.+)" ;
	queryall_query:templateString "" ;
	queryall_query:queryUriTemplateString "${defaultHostAddress}similardrugsbygeneid/${input_1}${defaultSeparator}${input_2}" ;
	queryall_query:standardUriTemplateString "${defaultHostAddress}${input_1}${defaultSeparator}${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputUrlEncoded_normalisedStandardUri}\"><ns0pred:hasSimilarDrugsUrl xmlns:ns0pred=\"${defaultHostAddress}bio2rdf_resource:\">${xmlEncoded_inputUrlEncoded_normalisedQueryUri}</ns0pred:hasSimilarDrugsUrl></rdf:Description>" ;
	queryall_query:inRobotsTxt "true"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:namespaceToHandle bio2rdf_ns:geneid ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int ;
	queryall_query:includeQueryType bio2rdf_query:similardrugsbygeneid .
	
bio2rdf_query:pandit a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "false"^^xsd:boolean ;
	dc:title "similardrugsbygeneid" ;
	queryall_query:handleAllNamespaces "false"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^pandit/([\\w-]+):(.+)" ;
	queryall_query:templateString "" ;
	queryall_query:queryUriTemplateString "${defaultHostAddress}pandit/${input_1}${defaultSeparator}${input_2}" ;
	queryall_query:standardUriTemplateString "${defaultHostAddress}${input_1}${defaultSeparator}${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputUrlEncoded_normalisedStandardUri}\"><ns0pred:hasPanditLinkUrl xmlns:ns0pred=\"${defaultHostAddress}bio2rdf_resource:\">${xmlEncoded_inputUrlEncoded_normalisedQueryUri}</ns0pred:hasSimilarDrugsUrl></rdf:Description>" ;
	queryall_query:inRobotsTxt "true"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:namespaceToHandle bio2rdf_ns:pfam ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int ;
	queryall_query:includeQueryType bio2rdf_query:pandit .
	


bio2rdf_query:I18NTest a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "false"^^xsd:boolean ;
	dc:title "i18n test" ;
	queryall_query:handleAllNamespaces "false"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "false"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "true"^^xsd:boolean ;
	queryall_query:inputRegex "^i18ntest/$" ;
	queryall_query:templateString "" ;
	queryall_query:queryUriTemplateString "${defaultHostAddress}i18test/" ;
	queryall_query:standardUriTemplateString "${defaultHostAddress}i18test/" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputUrlEncoded_normalisedStandardUri}\"><ns0pred:hasTestLiteral xmlns:ns0pred=\"${defaultHostAddress}bio2rdf_resource:\">Brisbane on Queenslandin osavaltion pÃ¤Ã¤kaupunki ja sen suurin kaupunki, mutta myÃ¶s koko Australian kolmanneksi suurin kaupunki vajaalla kahdella miljoonalla asukkaallaan. Kaupunki sijaitsee Tyynenmeren lÃ¤heisyydessÃ¤ Brisbane Riverin rannalla Moreton Bayn ja Australian Kordillieerien vÃ¤lisellÃ¤ rannikkotasangolla Queenslandin kaakkoisosassa.--ï¼ˆè‹±èªžï¼šBrisbaneï¼‰ï¼Œæ˜¯æ¾³å¤§åˆ©äºžæ˜†å£«è˜­å·žåºœåŸŽï¼Œä½�æ–¼æ¾³å¤§åˆ©äºžæœ¬åœŸçš„æ�±åŒ—éƒ¨ï¼ŒåŒ—ç·£é™½å…‰æµ·å²¸ï¼Œ å�—é„°åœ‹éš›è§€å…‰å‹�åœ°é»ƒé‡‘æµ·å²¸å¸‚ã€‚å¤§éƒ½æœƒäººå�£ï¼ˆåŒ…æ‹¬é€±åœ�çš„è¡›æ˜ŸåŸŽå¸‚ï¼‰194è�¬é¤˜ï¼Œæ˜¯æ¾³å¤§åˆ©äºžäººå�£ç¬¬ä¸‰å¤§éƒ½æœƒï¼Œåƒ…æ¬¡æ–¼é›ªæ¢¨èˆ‡å¢¨çˆ¾æœ¬ã€‚ å¸ƒé‡Œæ–¯æœ¬é� è¿‘å¤ªå¹³æ´‹ï¼Œæ�±é�¢æ¿±è‡¨å¡”æ–¯æ›¼æµ·ï¼Œæ˜¯ä¸€å€‹å¾žæµ·å²¸ç·šã€�æ²³å·�å’Œæ¸¯å�£å¾€è¥¿éƒ¨å…§é™¸ç™¼å±•çš„éƒ½å¸‚ã€‚å…¶å¸‚ä¸­å¿ƒä½�æ–¼å¸ƒé‡Œæ–¯æœ¬æ²³ç•”ï¼ˆBrisbane Riverï¼‰ï¼Œè©²å·žå�³ä»¥æ­¤ç‚ºæ”¿æ²»å’Œäº¤é€šä¸»è»¸å†�å�‘å�—åŒ—ä¼¸å±•é–‹ç™¼ã€‚å¸ƒé‡Œæ–¯æœ¬åœ‹å…§å¤–æ©Ÿå ´å’Œåœ‹éš›æµ·æ¸¯åº§è�½æ–¼å¸ƒé‡Œæ–¯æœ¬æ²³å�£å…©æ—�ã€‚ å¸ƒé‡Œæ–¯æœ¬æ˜¯1982å¹´è‹±è�¯é‚¦é�‹å‹•æœƒã€�1988å¹´ä¸–ç•Œå�šè¦½æœƒï¼Œä»¥å�Š2001å¹´ä¸–ç•Œå�‹èª¼é�‹å‹•æœƒï¼ˆGoodwill Gamesï¼‰çš„ä¸»è¾¦åŸŽå¸‚ã€‚Coolangatta, stad i Australien med 4 000 invÃ¥nare, i delstaten Queensland. Coolangatta var den fÃ¶rsta staden pÃ¥ Gold Coast och grundades i slutet av 1800-talet. Grannstaden Tweed Heads i New South Wales samverkar med Coolangatta och de bildar tillsammans Twin Town. Coolangatta ligger ca 100 mil norr om Sydney.Brisbane is the capital and most populous city in the Australian state of Queensland and the third most populous city in Australia. Brisbane's metropolitan area has an approximate population of 2 million. A resident of Brisbane is commonly known as a \"Brisbanite\". The Brisbane central business district stands on the original settlement and is situated inside a bend of the Brisbane River approximately 23 kilometres from its mouth at Moreton Bay.Brisbane est la capitale et la ville la plus peuplÃ©e de l'Ã‰tat du Queensland, en Australie. SituÃ©e Ã  environ 950 kilomÃ¨tres au nord de Sydney, sur le fleuve Brisbane, elle s'Ã©tend sur une plaine humide bordÃ©e de collines, limitÃ©e par Moreton Bay et les premiers contreforts de la cordillÃ¨re australienne. Ã€ quelques kilomÃ¨tres du centre-ville, le mont Coot-Tha accueille une plate-forme panoramique, un planetarium et des jardins botaniques.Ð‘Ñ€Ð¸Ì�Ñ�Ð±ÐµÐ½ â€” ÐºÑ€ÑƒÐ¿Ð½Ñ‹Ð¹ Ð³Ð¾Ñ€Ð¾Ð´ Ð½Ð° Ð²Ð¾Ñ�Ñ‚Ð¾Ñ‡Ð½Ð¾Ð¼ Ð¿Ð¾Ð±ÐµÑ€ÐµÐ¶ÑŒÐµ Ð�Ð²Ñ�Ñ‚Ñ€Ð°Ð»Ð¸Ð¸. Ð�Ð´Ð¼Ð¸Ð½Ð¸Ñ�Ñ‚Ñ€Ð°Ñ‚Ð¸Ð²Ð½Ñ‹Ð¹ Ñ†ÐµÐ½Ñ‚Ñ€ ÑˆÑ‚Ð°Ñ‚Ð° ÐšÐ²Ð¸Ð½Ñ�Ð»ÐµÐ½Ð´. Ð�Ð°Ñ�ÐµÐ»ÐµÐ½Ð¸Ðµ â€” 1,8 Ð¼Ð»Ð½. Ñ‡ÐµÐ»Ð¾Ð²ÐµÐº, Ñ�Ñ‚Ð¾ Ñ‚Ñ€ÐµÑ‚Ð¸Ð¹ Ð¿Ð¾ Ñ‡Ð¸Ñ�Ð»ÐµÐ½Ð½Ð¾Ñ�Ñ‚Ð¸ Ð³Ð¾Ñ€Ð¾Ð´ Ñ�Ñ‚Ñ€Ð°Ð½Ñ‹.Brisbane es la tercera ciudad mÃ¡s grande de Australia. Es la capital del estado de Queensland, en el noreste del paÃ­s y tiene aproximadamente 2 millones de habitantes (estimado en el 2009). Se encuentra al este de la Gran Cordillera Divisoria, al sureste de la cordillera Taylor y muy cercana a la bahÃ­a MoretÃ³n. Es atravesada por el rÃ­o Brisbane, que ha sido dragado para facilitar el trÃ¡nsito de barcos.Brisbane [/ËˆbÉ¹Éªz. bÉ™n/] er hovedstaden i den australske delstaten Queensland. Byen har ca. 1,8 millioner innbyggere, er Australias raskest voksende by og den tredje stÃ¸rste byen i Australia etter Sydney og Melbourne.ãƒ–ãƒªã‚¹ãƒ™ãƒ³ï¼ˆBrisbaneï¼‰ã�¯ã‚ªãƒ¼ã‚¹ãƒˆãƒ©ãƒªã‚¢é€£é‚¦ã‚¯ã‚¤ãƒ¼ãƒ³ã‚ºãƒ©ãƒ³ãƒ‰å·žå�—æ�±éƒ¨ï¼ˆã‚µã‚¦ã‚¹ãƒ»ã‚¤ãƒ¼ã‚¹ãƒˆãƒ»ã‚¯ã‚¤ãƒ¼ãƒ³ã‚ºãƒ©ãƒ³ãƒ‰åœ°åŸŸï¼‰ã�«ä½�ç½®ã�™ã‚‹å·žéƒ½ã€‚ ã‚·ãƒ‰ãƒ‹ãƒ¼ã€�ãƒ¡ãƒ«ãƒœãƒ«ãƒ³ã�«æ¬¡ã��ã‚ªãƒ¼ã‚¹ãƒˆãƒ©ãƒªã‚¢ç¬¬ä¸‰ã�®éƒ½å¸‚ã�§ã�‚ã‚Šã€�ã‚ªã‚»ã‚¢ãƒ‹ã‚¢æœ‰æ•°ã�®ä¸–ç•Œéƒ½å¸‚ã€‚ç�¾åœ°ã�§ã�®ç™ºéŸ³ã�¯[ËˆbrÉªzbÉ™n]ï¼ˆãƒ–ãƒªã‚ºãƒ™ãƒ³ï¼‰ã�§ã�‚ã‚‹ã�Œã€�ã�“ã�“ã�§ã�¯æ—¥æœ¬ã�®å¤–å‹™çœ�ã�®è¡¨è¨˜ã�«ã�ªã‚‰ã�£ã�Ÿã€‚Brisbane [ËˆbÉ¹ÉªzbÉ™n] â€“ miasto w Australii, stolica stanu Queensland, poÅ‚oÅ¼one u ujÅ›cia rzeki Brisbane do zatoki Moreton. Klimat subtropikalny z gorÄ…cymi, wilgotnymi latami i ciepÅ‚ymi, Å‚agodnymi zimami. WaÅ¼ny oÅ›rodek handlowy, naukowy (3 uniwersytety) i kulturalny (muzea, galeria sztuki); liczne parki (herbarium). Brisbane jest oÅ›rodkiem przemysÅ‚u rafineryjnego, stoczniowego i maszynowego. W mieÅ›cie znajduje siÄ™ polski konsulat honorowy.Brisbane is een stad in het oosten van AustraliÃ«. Het is de hoofdstad van de deelstaat Queensland. De stad is gelegen aan de oostkust van AustraliÃ« aan de Brisbane River, zo'n 20 kilometer verwijderd van Moreton Bay. Brisbane heeft 1.676.389 inwoners (2006) en is daarmee de derde stad van AustraliÃ«, na Sydney en Melbourne. Brisbane is vooral bij jonge toeristen populair vanwege de 2 grote uitgaansgebieden in de stad. In deze gebieden zijn veel clubs, bars, eetgelegenheden etc.Brisbane Ã¤r en stad i Australien med 1,9 miljoner invÃ¥nare. Den Ã¤r huvudstad i delstaten Queensland samt den tredje stÃ¶rsta staden i Australien och stÃ¶rsta stad i Queensland. Brisbane Ã¤r byggd utefter Brisbane River som slingrar sig igenom staden och korsas av flera broar. Namnet har staden fÃ¥tt efter Sir Thomas Brisbane, som var guvernÃ¶r i New South Wales Ã¥ren 1821-1825.Brisbane Ã© a capital do estado de Queensland e terceira maior cidade da AustrÃ¡lia.Brisbane Ã¨ la capitale dello stato del Queensland, in Australia. La cittÃ  di Brisbane conta circa 957.010 abitanti mentre la sua area metropolitana arriva ad avere quasi 2.000.000 di residenti, che la rendono, per popolazione, la terza area metropolitana dell'Australia e la prima del suo stato. La cittÃ  prende il nome da Sir Thomas Brisbane, governatore dello stato del Nuovo Galles del Sud dal 1821 al 1825.Brisbane [ËˆbÉ¹ÉªzbÉ™n] ist die Hauptstadt des Bundesstaates Queensland im Nordosten Australiens. Die Stadt liegt am Brisbane River nahe an dessen MÃ¼ndung in die Korallensee. Der Ballungsraum hat 1,73 Mio. Einwohner. Brisbane ist sowohl katholischer als auch anglikanischer Erzbischofssitz. Ein wichtiger Wirtschaftszweig ist die ErdÃ¶lindustrie. Brisbane wurde 1824 als Strafkolonie gegrÃ¼ndet und ist nach dem damaligen Gouverneur von New South Wales, Sir Thomas Brisbane benannt.</ns0pred:hasTestLiteral></rdf:Description>" ;
	queryall_query:inRobotsTxt "false"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:includeQueryType bio2rdf_query:I18NTest .





