@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix dc: <http://purl.org/dc/elements/1.1/>.
@prefix queryall_profile: <http://purl.org/queryall/profile:> .
@prefix queryall_query: <http://purl.org/queryall/query:> .
@prefix bio2rdf_provider: <http://bio2rdf.org/provider:> .
@prefix bio2rdf_query: <http://bio2rdf.org/query:> .
@prefix bio2rdf_rdfrule: <http://bio2rdf.org/rdfrule:> .
@prefix bio2rdf_ns: <http://bio2rdf.org/ns:> .

bio2rdf_query:dummyuniversalfilterquery a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "true"^^xsd:boolean ;
    queryall_query:isPageable "true"^^xsd:boolean ;
	dc:title "This query is designed to be used as a dummy, no communication query to provider filtering on entire results pools." ;
	queryall_query:includeDefaults "true"^^xsd:boolean ;
	queryall_query:inputRegex "^(.*)" ;
	queryall_query:templateString "" ;
	queryall_query:queryUriTemplateString "${defaultHostAddress}${input_1}" ;
	queryall_query:standardUriTemplateString "${defaultHostAddress}${input_1}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "" ;
	queryall_query:inRobotsTxt "false"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude .

bio2rdf_query:catchalldefault a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "true"^^xsd:boolean ;
	dc:title "Catch all default query definition. Do not enable this unless you want it to match everything." ;
	queryall_query:includeDefaults "true"^^xsd:boolean ;
	queryall_query:inputRegex "^(.+)" ;
	queryall_query:templateString "" ;
	queryall_query:queryUriTemplateString "${defaultHostAddress}${input_1}" ;
	queryall_query:standardUriTemplateString "${defaultHostAddress}${input_1}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_normalisedStandardUri}\"><ns0pred:seeAlso xmlns:ns0pred=\"http://www.w3.org/2000/01/rdf-schema#\">${xmlEncoded_endpointUrl}</ns0pred:seeAlso></rdf:Description>" ;
	queryall_query:inRobotsTxt "false"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:includeThenExclude .

bio2rdf_query:fasta a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "false"^^xsd:boolean ;
	dc:title "fasta" ;
	queryall_query:handleAllNamespaces "true"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^fasta/([\\w-]+):(.+)" ;
	queryall_query:templateString "" ;
	queryall_query:queryUriTemplateString "${authority}fasta/${input_1}${separator}${input_2}" ;
	queryall_query:standardUriTemplateString "${authority}${input_1}${separator}${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputUrlEncoded_normalisedStandardUri}\"><ns0pred:urlFasta xmlns:ns0pred=\"${defaultHostAddress}bio2rdf_resource:\">${xmlEncoded_endpointUrl}</ns0pred:urlFasta></rdf:Description>" ;
	queryall_query:inRobotsTxt "true"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int ;
	queryall_query:includeQueryType bio2rdf_query:fasta .
	

bio2rdf_query:fastainclude a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "false"^^xsd:boolean ;
	dc:title "fasta" ;
	queryall_query:handleAllNamespaces "true"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^([\\w-]+):(.+)" ;
	queryall_query:templateString "" ;
	queryall_query:queryUriTemplateString "${authority}fasta/${input_1}${separator}${input_2}" ;
	queryall_query:standardUriTemplateString "${authority}${input_1}${separator}${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputUrlEncoded_privateuppercase_normalisedStandardUri}\"><ns0pred:urlFastaList xmlns:ns0pred=\"${defaultHostAddress}bio2rdf_resource:\" rdf:resource=\"${xmlEncoded_inputUrlEncoded_privateuppercase_normalisedQueryUri}\"></ns0pred:urlFastaList></rdf:Description>" ;
	queryall_query:inRobotsTxt "true"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int ;
	queryall_query:includeQueryType bio2rdf_query:fastainclude .



bio2rdf_query:constructtwolevel a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "true"^^xsd:boolean ;
	dc:title "constructtwolevel" ;
    <http://www.w3.org/2000/01/rdf-schema#comment> "Provides a CONSTRUCT query that allows either one or two levels of introspection into the RDF structure." ;
	queryall_query:handleAllNamespaces "false"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^([\\w-]+):(.+)" ;
	queryall_query:templateString "CONSTRUCT { <${inputUrlEncoded_normalisedStandardUri}> ?p ?o . ?o ?p2 ?o2 . } WHERE { ${graphStart} <${inputUrlEncoded_endpointSpecificUri}> ?p ?o . OPTIONAL { ?o ?p2 ?o2 . } ${graphEnd}  } ${limit} ${sparqlOffset}" ;
	queryall_query:queryUriTemplateString "${authority}${input_1}${separator}${input_2}" ;
	queryall_query:standardUriTemplateString "${authority}${input_1}${separator}${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "" ;
	queryall_query:inRobotsTxt "false"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int ;
	queryall_query:includeQueryType bio2rdf_query:construct .

bio2rdf_query:xmlfromlowercase a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "false"^^xsd:boolean ;
	dc:title "xmlfromlowercase" ;
	queryall_query:handleAllNamespaces "true"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^xml/([\\w-]+):(.+)" ;
	queryall_query:templateString "" ;
	queryall_query:queryUriTemplateString "${authority}xml/${input_1}${separator}${input_2}" ;
	queryall_query:standardUriTemplateString "${authority}${input_1}${separator}${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputUrlEncoded_privateuppercase_normalisedStandardUri}\"><ns0pred:xmlUrl xmlns:ns0pred=\"${defaultHostAddress}bio2rdf_resource:\">${xmlEncoded_inputUrlEncoded_privateuppercase_normalisedQueryUri}</ns0pred:xmlUrl></rdf:Description>" ;
	queryall_query:inRobotsTxt "true"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int .

bio2rdf_query:linksbynamespace a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "true"^^xsd:boolean ;
	dc:title "linksns" ;
	queryall_query:handleAllNamespaces "true"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^linksns/([\\w-]+)/([\\w-]+):(.+)" ;
	queryall_query:templateString "CONSTRUCT { ?s ?p <${inputUrlEncoded_normalisedStandardUri}> . ?s a ?linkedRecordType . ?s <http://www.w3.org/2000/01/rdf-schema#label> ?label . ?s <http://purl.org/dc/elements/1.1/title> ?title . ?s <http://www.w3.org/2004/02/skos/core#prefLabel> ?skoslabel . } WHERE {  ${graphStart}  ?s ?p <${inputUrlEncoded_endpointSpecificUri}> . OPTIONAL { ?s a ?linkedRecordType . } OPTIONAL { ?s <http://www.w3.org/2000/01/rdf-schema#label> ?label . } OPTIONAL { ?s <http://purl.org/dc/elements/1.1/title> ?title . } OPTIONAL { ?s <http://www.w3.org/2004/02/skos/core#prefLabel> ?skoslabel . } ${graphEnd}  } ${limit} ${sparqlOffset}" ; 
	queryall_query:queryUriTemplateString "${authority}linksns/${input_1}/${input_2}${separator}${input_3}" ;
	queryall_query:standardUriTemplateString "${authority}${input_2}${separator}${input_3}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputUrlEncoded_normalisedStandardUri}\"><ns0pred:xNamespaceLinks xmlns:ns0pred=\"${defaultHostAddress}bio2rdf_resource:\" rdf:resource=\"${xmlEncoded_inputUrlEncoded_normalisedQueryUri}\"/><ns0pred:xCountLinks xmlns:ns0pred=\"${defaultHostAddress}bio2rdf_resource:\" rdf:resource=\"${defaultHostAddress}links/${xmlEncoded_urlEncoded_input_2}:${xmlEncoded_urlEncoded_input_3}\"/></rdf:Description>" ;
	queryall_query:inRobotsTxt "false"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int , "2"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int .

bio2rdf_query:fulllinksbynamespace a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "true"^^xsd:boolean ;
	dc:title "fulllinksns" ;
	queryall_query:handleAllNamespaces "true"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^fulllinksns/([\\w-]+)/([\\w-]+):(.+)" ;
	queryall_query:templateString "CONSTRUCT { ?s ?p <${inputUrlEncoded_normalisedStandardUri}> . ?s ?p2 ?o . } WHERE {  ${graphStart}  ?s ?p <${inputUrlEncoded_endpointSpecificUri}> . OPTIONAL { ?s ?p2 ?o . } ${graphEnd}  } ${limit} ${sparqlOffset}" ;
	queryall_query:queryUriTemplateString "${authority}fulllinksns/${input_1}/${input_2}${separator}${input_3}" ;
	queryall_query:standardUriTemplateString "${authority}${input_2}${separator}${input_3}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputUrlEncoded_normalisedStandardUri}\"><ns0pred:xNamespaceLinks xmlns:ns0pred=\"${defaultHostAddress}bio2rdf_resource:\" rdf:resource=\"${xmlEncoded_inputUrlEncoded_normalisedQueryUri}\"/><ns0pred:xCountLinks xmlns:ns0pred=\"${defaultHostAddress}bio2rdf_resource:\" rdf:resource=\"${defaultHostAddress}links/${xmlEncoded_urlEncoded_input_2}:${xmlEncoded_urlEncoded_input_3}\"/></rdf:Description>" ;
	queryall_query:inRobotsTxt "true"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int , "2"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int .

bio2rdf_query:provenancebykey a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "true"^^xsd:boolean ;
	dc:title "provenancebykey" ;
	queryall_query:handleAllNamespaces "true"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "false"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "true"^^xsd:boolean ;
	queryall_query:inputRegex "^provenancebykey/(.+)" ;
	queryall_query:templateString "CONSTRUCT { ?s queryall_provenance:elementKey <${inputUrlEncoded_normalisedStandardUri}> . ?s ?p2 ?o . } WHERE {  ${graphStart}  ?s ?p <${inputUrlEncoded_endpointSpecificUri}> . OPTIONAL { ?s ?p2 ?o . } ${graphEnd}  } ${limit} ${sparqlOffset}" ;
	queryall_query:queryUriTemplateString "${defaultHostAddress}provenancebykey/${input_1}" ;
	queryall_query:standardUriTemplateString "${defaultHostAddress}${input_1}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputUrlEncoded_normalisedStandardUri}\"><ns0pred:hasProvenanceRecords xmlns:ns0pred=\"${defaultHostAddress}bio2rdf_resource:\" rdf:resource=\"${xmlEncoded_inputUrlEncoded_normalisedQueryUri}\"/><ns0pred:xCountLinks xmlns:ns0pred=\"${defaultHostAddress}bio2rdf_resource:\" rdf:resource=\"${defaultHostAddress}links/${xmlEncoded_urlEncoded_input_2}:${xmlEncoded_urlEncoded_input_3}\"/></rdf:Description>" ;
	queryall_query:inRobotsTxt "true"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude .

bio2rdf_query:unsafelinksbynamespace a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "true"^^xsd:boolean ;
	dc:title "unsafelinksbynamespace" ;
	queryall_query:handleAllNamespaces "true"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^linksns/([\\w-]+)/([\\w-]+):(.+)" ;
	queryall_query:templateString "CONSTRUCT { ?s ?p <${ntriplesEncoded_normalisedStandardUri}> . ?s a ?linkedRecordType . ?s <http://www.w3.org/2000/01/rdf-schema#label> ?label . ?s <http://purl.org/dc/elements/1.1/title> ?title . ?s <http://www.w3.org/2004/02/skos/core#prefLabel> ?skoslabel . } WHERE {  ${graphStart}  ?s ?p <${ntriplesEncoded_endpointSpecificUri}> . OPTIONAL { ?s a ?linkedRecordType . } OPTIONAL { ?s <http://www.w3.org/2000/01/rdf-schema#label> ?label . } OPTIONAL { ?s <http://purl.org/dc/elements/1.1/title> ?title . } OPTIONAL { ?s <http://www.w3.org/2004/02/skos/core#prefLabel> ?skoslabel . } ${graphEnd}  } ${limit} ${sparqlOffset}" ;
	queryall_query:queryUriTemplateString "${authority}linksns/${input_1}/${input_2}${separator}${input_3}" ;
	queryall_query:standardUriTemplateString "${authority}${input_2}${separator}${input_3}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputUrlEncoded_normalisedStandardUri}\"><ns0pred:xNamespaceLinks xmlns:ns0pred=\"${defaultHostAddress}bio2rdf_resource:\" rdf:resource=\"${xmlEncoded_inputUrlEncoded_normalisedQueryUri}\"/><ns0pred:xCountLinks xmlns:ns0pred=\"${defaultHostAddress}bio2rdf_resource:\" rdf:resource=\"${defaultHostAddress}links/${xmlEncoded_urlEncoded_input_2}:${xmlEncoded_urlEncoded_input_3}\"/></rdf:Description>" ;
	queryall_query:inRobotsTxt "false"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int , "2"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int .

bio2rdf_query:plusurlencodedlinksbynamespace a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "true"^^xsd:boolean ;
	dc:title "plusurlencodedlinksbynamespace" ;
	queryall_query:handleAllNamespaces "true"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^linksns/([\\w-]+)/([\\w-]+):(.+)" ;
	queryall_query:templateString "CONSTRUCT { ?s ?p <${inputPlusUrlEncoded_normalisedStandardUri}> . ?s a ?linkedRecordType . ?s <http://www.w3.org/2000/01/rdf-schema#label> ?label . ?s <http://purl.org/dc/elements/1.1/title> ?title . ?s <http://www.w3.org/2004/02/skos/core#prefLabel> ?skoslabel . } WHERE {  ${graphStart}  ?s ?p <${inputPlusUrlEncoded_endpointSpecificUri}> . OPTIONAL { ?s a ?linkedRecordType . } OPTIONAL { ?s <http://www.w3.org/2000/01/rdf-schema#label> ?label . } OPTIONAL { ?s <http://purl.org/dc/elements/1.1/title> ?title . } OPTIONAL { ?s <http://www.w3.org/2004/02/skos/core#prefLabel> ?skoslabel . } ${graphEnd}  } ${limit} ${sparqlOffset}" ;
	queryall_query:queryUriTemplateString "${authority}linksns/${input_1}/${input_2}${separator}${input_3}" ;
	queryall_query:standardUriTemplateString "${authority}${input_2}${separator}${input_3}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputUrlEncoded_normalisedStandardUri}\"><ns0pred:xNamespaceLinks xmlns:ns0pred=\"${defaultHostAddress}bio2rdf_resource:\" rdf:resource=\"${xmlEncoded_inputUrlEncoded_normalisedQueryUri}\"/><ns0pred:xCountLinks xmlns:ns0pred=\"${defaultHostAddress}bio2rdf_resource:\" rdf:resource=\"${defaultHostAddress}links/${xmlEncoded_urlEncoded_input_2}:${xmlEncoded_urlEncoded_input_3}\"/></rdf:Description>" ;
	queryall_query:inRobotsTxt "false"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int , "2"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int .

bio2rdf_query:unsafeprimaryreverseconstruct a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "true"^^xsd:boolean ;
	dc:title "unsafeprimaryreverseconstruct" ;
	queryall_query:handleAllNamespaces "true"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^([\\w-]+):(.+)" ;
	queryall_query:templateString "CONSTRUCT { <${inputUrlEncoded_normalisedStandardUri}> <http://bio2rdf.org/bio2rdf_resource:linkedToFrom> ?s . } WHERE { ${graphStart} ?s ?p <${ntriplesEncoded_endpointSpecificUri}> . ${graphEnd}  } ${limit} ${sparqlOffset}" ;
	queryall_query:queryUriTemplateString "${authority}${input_1}${separator}${input_2}" ;
	queryall_query:standardUriTemplateString "${authority}${input_1}${separator}${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "" ;
	queryall_query:inRobotsTxt "false"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int ;
	queryall_query:includeQueryType bio2rdf_query:unsafeconstruct .

bio2rdf_query:unsafesecondaryreverseconstruct a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "true"^^xsd:boolean ;
	dc:title "unsafesecondaryreverseconstruct" ;
	queryall_query:handleAllNamespaces "true"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^([\\w-]+):(.+)" ;
	queryall_query:templateString "CONSTRUCT { <${normalisedStandardUri}> <http://bio2rdf.org/bio2rdf_resource:linkedToFrom> ?s . } WHERE { ${graphStart} ?s ?p <${ntriplesEncoded_endpointSpecificUri}> . ${graphEnd}  } ${limit} ${sparqlOffset}" ;
	queryall_query:queryUriTemplateString "${authority}${input_1}${separator}${input_2}" ;
	queryall_query:standardUriTemplateString "${authority}${input_1}${separator}${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "" ;
	queryall_query:inRobotsTxt "false"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int ;
	queryall_query:includeQueryType bio2rdf_query:unsafeconstruct .

bio2rdf_query:plusurlencodedprimaryreverseconstruct a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "true"^^xsd:boolean ;
	dc:title "plusurlencodedprimaryreverseconstruct" ;
	queryall_query:handleAllNamespaces "true"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^([\\w-]+):(.+)" ;
	queryall_query:templateString "CONSTRUCT { <${inputPlusUrlEncoded_normalisedStandardUri}> <http://bio2rdf.org/bio2rdf_resource:linkedToFrom> ?s . } WHERE { ${graphStart} ?s ?p <${inputPlusUrlEncoded_endpointSpecificUri}> . ${graphEnd}  } ${limit} ${sparqlOffset}" ;
	queryall_query:queryUriTemplateString "${authority}${input_1}${separator}${input_2}" ;
	queryall_query:standardUriTemplateString "${authority}${input_1}${separator}${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "" ;
	queryall_query:inRobotsTxt "false"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int ;
	queryall_query:includeQueryType bio2rdf_query:plusurlencodedconstruct .

bio2rdf_query:plusurlencodedsecondaryreverseconstruct a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "true"^^xsd:boolean ;
	dc:title "plusurlencodedsecondaryreverseconstruct" ;
	queryall_query:handleAllNamespaces "true"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^([\\w-]+):(.+)" ;
	queryall_query:templateString "CONSTRUCT { <${normalisedStandardUri}> <http://bio2rdf.org/bio2rdf_resource:linkedToFrom> ?s . } WHERE { ${graphStart} ?s ?p <${ntriplesEncoded_endpointSpecificUri}> . ${graphEnd}  } ${limit} ${sparqlOffset}" ;
	queryall_query:queryUriTemplateString "${authority}${input_1}${separator}${input_2}" ;
	queryall_query:standardUriTemplateString "${authority}${input_1}${separator}${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "" ;
	queryall_query:inRobotsTxt "false"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int ;
	queryall_query:includeQueryType bio2rdf_query:plusurlencodedconstruct .

bio2rdf_query:namespacebytype a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "true"^^xsd:boolean ;
	dc:title "typens" ;
	queryall_query:handleAllNamespaces "true"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^typens/([\\w-]+):(.+)" ;
	queryall_query:templateString "CONSTRUCT { ?s <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <${normalisedStandardUri}> . ?s <http://www.w3.org/2000/01/rdf-schema#label> ?label . ?s <http://purl.org/dc/elements/1.1/title> ?title . ?s <http://bio2rdf.org/ns/go#name> ?goName . ?s <http://www.w3.org/2004/02/skos/core#prefLabel> ?skoslabel . } WHERE { ${graphStart} ?s <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <${endpointSpecificUri}> . OPTIONAL { ?s <http://www.w3.org/2000/01/rdf-schema#label> ?label . } OPTIONAL { ?s <http://purl.org/dc/elements/1.1/title> ?title . } OPTIONAL { ?s <http://bio2rdf.org/ns/go#name> ?goName . } OPTIONAL { ?s <http://www.w3.org/2004/02/skos/core#prefLabel> ?skoslabel . } ${graphEnd} } ${limit} ${sparqlOffset}" ;
	queryall_query:queryUriTemplateString "${authority}typens/${input_1}${separator}${input_2}" ;
	queryall_query:standardUriTemplateString "${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "" ;
	queryall_query:inRobotsTxt "true"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int .

bio2rdf_query:data a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "false"^^xsd:boolean ;
	dc:title "data" ;
	queryall_query:handleAllNamespaces "true"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^data/([\\w-]+):(.+)" ;
	queryall_query:templateString "" ;
	queryall_query:queryUriTemplateString "${authority}data/${input_1}${separator}${input_2}" ;
	queryall_query:standardUriTemplateString "${authority}${input_1}${separator}${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputUrlEncoded_normalisedStandardUri}\"><ns0pred:urlData xmlns:ns0pred=\"${defaultHostAddress}bio2rdf_resource:\">${xmlEncoded_inputUrlEncoded_normalisedQueryUri}</ns0pred:urlData></rdf:Description>" ;
	queryall_query:inRobotsTxt "true"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int .

bio2rdf_query:construct a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "true"^^xsd:boolean ;
	dc:title "construct" ;
	queryall_query:handleAllNamespaces "true"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^([\\w-]+):(.+)" ;
	queryall_query:templateString "CONSTRUCT { <${inputUrlEncoded_normalisedStandardUri}> ?p ?o . } WHERE { ${graphStart} <${inputUrlEncoded_endpointSpecificUri}> ?p ?o . ${graphEnd}  } ${limit} ${sparqlOffset}" ;
	queryall_query:queryUriTemplateString "${authority}${input_1}${separator}${input_2}" ;
	queryall_query:standardUriTemplateString "${authority}${input_1}${separator}${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputUrlEncoded_normalisedStandardUri}\"><ns0pred:sameAs xmlns:ns0pred=\"http://www.w3.org/2002/07/owl#\" rdf:resource=\"${xmlEncoded_inputUrlEncoded_endpointSpecificUri}\"/></rdf:Description>" ;
	queryall_query:inRobotsTxt "false"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int ;
	queryall_query:includeQueryType bio2rdf_query:construct .

bio2rdf_query:constructdnsonly a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "true"^^xsd:boolean ;
	dc:title "constructdnsonly" ;
	queryall_query:handleAllNamespaces "true"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^dnsonly/([\\w-]+):(.+)" ;
	queryall_query:templateString "CONSTRUCT { <${inputUrlEncoded_normalisedStandardUri}> ?p ?o . } WHERE { ${graphStart} <${inputUrlEncoded_endpointSpecificUri}> ?p ?o . ${graphEnd}  } ${limit} ${sparqlOffset}" ;
	queryall_query:queryUriTemplateString "${authority}${input_1}${separator}${input_2}" ;
	queryall_query:standardUriTemplateString "${authority}${input_1}${separator}${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "" ;
	queryall_query:inRobotsTxt "false"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int ;
	queryall_query:includeQueryType bio2rdf_query:construct .

bio2rdf_query:primaryreverseconstructfromdrugbankinchikey a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "true"^^xsd:boolean ;
	dc:title "primaryreverseconstructfromdrugbankinchikey" ;
	queryall_query:handleAllNamespaces "false"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^([\\w-]+):(.+)" ;
	queryall_query:templateString "CONSTRUCT { <${inputUrlEncoded_normalisedStandardUri}> <http://bio2rdf.org/bio2rdf_resource:linkedToFrom> ?s . ?s ?p ?o} WHERE { ${graphStart} ?s <http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/inchiKey> \"${urlEncoded_input_2}\" . ?s ?p ?o . ${graphEnd}  } ${limit} ${sparqlOffset}" ;
	queryall_query:queryUriTemplateString "${authority}${input_1}${separator}${input_2}" ;
	queryall_query:standardUriTemplateString "${authority}${input_1}${separator}${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputUrlEncoded_normalisedStandardUri}\"><ns0pred:sameAs xmlns:ns0pred=\"http://www.w3.org/2002/07/owl#\" rdf:resource=\"${xmlEncoded_inputUrlEncoded_endpointSpecificUri}\"/></rdf:Description>" ;
	queryall_query:inRobotsTxt "false"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:namespaceToHandle bio2rdf_ns:inchikey ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int ;
	queryall_query:includeQueryType bio2rdf_query:primaryreverseconstructfromdrugbankinchikey .

# TODO: FIXME: make this work for ATC codes and the prefix/suffix information about them found in wikipedia
bio2rdf_query:primaryreverseconstructfromdbpediaatctwopart a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "true"^^xsd:boolean ;
	dc:title "primaryreverseconstructfromdbpediaatc" ;
	queryall_query:handleAllNamespaces "false"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^([\\w-]+):([A-Z][A-Z]?[0-9]?[0-9]?[A-Z]?[A-Z]?[0-9]?[0-9]?)" ;
	queryall_query:templateString "CONSTRUCT { <${inputUrlEncoded_normalisedStandardUri}> <http://bio2rdf.org/bio2rdf_resource:linkedToFrom> ?s . ?s ?p ?o} WHERE { ${graphStart} ?s <http://www4.wiwiss.fu-berlin.de/drugbank/resource/drugbank/inchiKey> \"${urlEncoded_input_2}\" . ?s ?p ?o . ${graphEnd}  } ${limit} ${sparqlOffset}" ;
	queryall_query:queryUriTemplateString "${authority}${input_1}${separator}${input_2}" ;
	queryall_query:standardUriTemplateString "${authority}${input_1}${separator}${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputUrlEncoded_normalisedStandardUri}\"><ns0pred:sameAs xmlns:ns0pred=\"http://www.w3.org/2002/07/owl#\" rdf:resource=\"${xmlEncoded_inputUrlEncoded_endpointSpecificUri}\"/></rdf:Description>" ;
	queryall_query:inRobotsTxt "false"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:namespaceToHandle bio2rdf_ns:atc ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int ;
	queryall_query:includeQueryType bio2rdf_query:primaryreverseconstructfromdrugbankinchikey .

bio2rdf_query:primaryreverseconstructfromblueobeliskinchikey a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "true"^^xsd:boolean ;
	dc:title "primaryreverseconstructfromblueobeliskinchikey" ;
	queryall_query:handleAllNamespaces "false"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^([\\w-]+):(.+)" ;
	queryall_query:templateString "CONSTRUCT { <${inputUrlEncoded_normalisedStandardUri}> <http://bio2rdf.org/bio2rdf_resource:linkedToFrom> ?s . ?s ?p ?o} WHERE { ${graphStart} ?s <http://www.blueobelisk.org/chemistryblogs/inchikey> ?inchikey . FILTER(REGEX(?inchikey, \"${urlEncoded_input_2}\")) . ?s ?p ?o . ${graphEnd}  } ${limit} ${sparqlOffset}" ;
	queryall_query:queryUriTemplateString "${authority}${input_1}${separator}${input_2}" ;
	queryall_query:standardUriTemplateString "${authority}${input_1}${separator}${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputUrlEncoded_normalisedStandardUri}\"><ns0pred:sameAs xmlns:ns0pred=\"http://www.w3.org/2002/07/owl#\" rdf:resource=\"${xmlEncoded_inputUrlEncoded_endpointSpecificUri}\"/></rdf:Description>" ;
	queryall_query:inRobotsTxt "false"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:namespaceToHandle bio2rdf_ns:inchikey ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int ;
	queryall_query:includeQueryType bio2rdf_query:primaryreverseconstructfromblueobeliskinchikey .

bio2rdf_query:primaryreverseconstructfromblueobeliskinchi a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "true"^^xsd:boolean ;
	dc:title "primaryreverseconstructfromblueobeliskinchi" ;
	queryall_query:handleAllNamespaces "false"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^([\\w-]+):(.+)" ;
	queryall_query:templateString "CONSTRUCT { <${inputUrlEncoded_normalisedStandardUri}> <http://bio2rdf.org/bio2rdf_resource:linkedToFrom> ?s . ?s ?p ?o} WHERE { ${graphStart} ?s <http://www.blueobelisk.org/chemistryblogs/inchi> \"InChI=${plusUrlEncoded_input_2}\" . ?s ?p ?o . ${graphEnd}  } ${limit} ${sparqlOffset}" ;
	queryall_query:queryUriTemplateString "${authority}${input_1}${separator}${input_2}" ;
	queryall_query:standardUriTemplateString "${authority}${input_1}${separator}${plusUrlEncoded_input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputUrlEncoded_normalisedStandardUri}\"><ns0pred:sameAs xmlns:ns0pred=\"http://www.w3.org/2002/07/owl#\" rdf:resource=\"${xmlEncoded_inputUrlEncoded_endpointSpecificUri}\"/></rdf:Description>" ;
	queryall_query:inRobotsTxt "false"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:namespaceToHandle bio2rdf_ns:inchi ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int ;
	queryall_query:includeQueryType bio2rdf_query:primaryreverseconstructfromblueobeliskinchi .

bio2rdf_query:primaryreverseconstructfromiupacinchi a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "true"^^xsd:boolean ;
	dc:title "primaryreverseconstructfromiupacinchi" ;
	queryall_query:handleAllNamespaces "false"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^([\\w-]+):(.+)" ;
	queryall_query:templateString "CONSTRUCT { <${inputUrlEncoded_normalisedStandardUri}> <http://bio2rdf.org/bio2rdf_resource:linkedToFrom> ?s . ?s ?p ?o} WHERE { ${graphStart} ?s <http://www.iupac.org/inchi> \"InChI=${plusUrlEncoded_input_2}\" . ?s ?p ?o . ${graphEnd}  } ${limit} ${sparqlOffset}" ;
	queryall_query:queryUriTemplateString "${authority}${input_1}${separator}${input_2}" ;
	queryall_query:standardUriTemplateString "${authority}${input_1}${separator}${plusUrlEncoded_input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputUrlEncoded_normalisedStandardUri}\"><ns0pred:sameAs xmlns:ns0pred=\"http://www.w3.org/2002/07/owl#\" rdf:resource=\"${xmlEncoded_inputUrlEncoded_endpointSpecificUri}\"/></rdf:Description>" ;
	queryall_query:inRobotsTxt "false"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:namespaceToHandle bio2rdf_ns:inchi ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int ;
	queryall_query:includeQueryType bio2rdf_query:primaryreverseconstructfromiupacinchi .

bio2rdf_query:spectrumfrominchi a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "true"^^xsd:boolean ;
	dc:title "spectrumfrominchi" ;
	queryall_query:handleAllNamespaces "false"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^spectrumfrominchi/([\\w-]+):(.+)" ;
	queryall_query:templateString "CONSTRUCT { <${inputUrlEncoded_normalisedStandardUri}> <http://www.blueobelisk.org/chemistryblogs/inchi> \"InChI=${plusUrlEncoded_input_2}\" . ?s <http://www.blueobelisk.org/chemistryblogs/inchi> \"InChI=${plusUrlEncoded_input_2}\" . ?s <http://www.nmrshiftdb.org/onto#hasSpectrum> ?spectrum . ?spectrum ?p ?o} WHERE { ${graphStart} ?s <http://www.blueobelisk.org/chemistryblogs/inchi> \"InChI=${plusUrlEncoded_input_2}\" . ?s <http://www.nmrshiftdb.org/onto#hasSpectrum> ?spectrum . ?spectrum ?p ?o . ${graphEnd}  } ${limit} ${sparqlOffset}" ;
	queryall_query:queryUriTemplateString "${authority}spectrumfrominchi/${input_1}${separator}${input_2}" ;
	queryall_query:standardUriTemplateString "${authority}${input_1}${separator}${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputUrlEncoded_normalisedStandardUri}\"><ns0pred:sameAs xmlns:ns0pred=\"http://www.w3.org/2002/07/owl#\" rdf:resource=\"${xmlEncoded_inputUrlEncoded_endpointSpecificUri}\"/></rdf:Description>" ;
	queryall_query:inRobotsTxt "false"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:namespaceToHandle bio2rdf_ns:inchi ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int ;
	queryall_query:includeQueryType bio2rdf_query:spectrumfrominchi .

bio2rdf_query:spectrumfrominchikey a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "true"^^xsd:boolean ;
	dc:title "spectrumfrominchikey" ;
	queryall_query:handleAllNamespaces "false"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^spectrumfrominchikey/([\\w-]+):(.+)" ;
	queryall_query:templateString "CONSTRUCT { <${inputUrlEncoded_normalisedStandardUri}> <http://www.blueobelisk.org/chemistryblogs/inchikey> ?inchikey. ?s <http://www.blueobelisk.org/chemistryblogs/inchikey> ?inchikey . ?s <http://www.nmrshiftdb.org/onto#hasSpectrum> ?spectrum . ?spectrum ?p ?o} WHERE { ${graphStart} ?s <http://www.blueobelisk.org/chemistryblogs/inchikey> ?inchikey . FILTER(REGEX(?inchikey, \"${plusUrlEncoded_input_2}\")) . ?s <http://www.nmrshiftdb.org/onto#hasSpectrum> ?spectrum . ?spectrum ?p ?o . ${graphEnd}  } ${limit} ${sparqlOffset}" ;
	queryall_query:queryUriTemplateString "${authority}spectrumfrominchi/${input_1}${separator}${input_2}" ;
	queryall_query:standardUriTemplateString "${authority}${input_1}${separator}${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputUrlEncoded_normalisedStandardUri}\"><ns0pred:sameAs xmlns:ns0pred=\"http://www.w3.org/2002/07/owl#\" rdf:resource=\"${xmlEncoded_inputUrlEncoded_endpointSpecificUri}\"/></rdf:Description>" ;
	queryall_query:inRobotsTxt "false"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:namespaceToHandle bio2rdf_ns:inchikey ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int ;
	queryall_query:includeQueryType bio2rdf_query:spectrumfrominchikey .

bio2rdf_query:linksfromnmrshiftdbspectrumtype a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "true"^^xsd:boolean ;
	dc:title "linksfromnmrshiftdbspectrumtype" ;
	queryall_query:handleAllNamespaces "false"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^([\\w-]+):(.+)" ;
	queryall_query:templateString "CONSTRUCT { <${inputUrlEncoded_normalisedStandardUri}> <http://bio2rdf.org/bio2rdf_resource:linkedToFrom> ?s . } WHERE { ${graphStart} ?s <http://www.nmrshiftdb.org/onto#spectrumType> ?spectrumtype . FILTER(REGEX(?spectrumtype, \"${urlEncoded_input_2}\")) . ${graphEnd}  } ${limit} ${sparqlOffset}" ;
	queryall_query:queryUriTemplateString "${authority}${input_1}${separator}${input_2}" ;
	queryall_query:standardUriTemplateString "${authority}${input_1}${separator}${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputUrlEncoded_normalisedStandardUri}\"><ns0pred:sameAs xmlns:ns0pred=\"http://www.w3.org/2002/07/owl#\" rdf:resource=\"${xmlEncoded_inputUrlEncoded_endpointSpecificUri}\"/></rdf:Description>" ;
	queryall_query:inRobotsTxt "false"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:namespaceToHandle bio2rdf_ns:nmrshiftdb_spectrumtype ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int ;
	queryall_query:includeQueryType bio2rdf_query:linksfromnmrshiftdbspectrumtype .

bio2rdf_query:genbankinsertions a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "false"^^xsd:boolean ;
	dc:title "genbankinsertions" ;
	queryall_query:handleAllNamespaces "false"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^([\\w-]+):(.+)" ;
	queryall_query:templateString "" ;
	queryall_query:queryUriTemplateString "${authority}${input_1}${separator}${input_2}" ;
	queryall_query:standardUriTemplateString "${authority}${input_1}${separator}${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "" ;
	queryall_query:inRobotsTxt "false"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:namespaceToHandle bio2rdf_ns:genbank , bio2rdf_ns:gi , bio2rdf_ns:ncbi ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int ;
	queryall_query:includeQueryType bio2rdf_query:asn1 , bio2rdf_query:fasta , bio2rdf_query:genbankpartial , bio2rdf_query:genbankfull , bio2rdf_query:xmlfromlowercase , bio2rdf_query:imagefromlowercase , bio2rdf_query:relatedfromlowercase .

bio2rdf_query:nsinterlinksbetweentypes a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "false"^^xsd:boolean ;
	dc:title "namespacetypeinternallinks" ;
	queryall_query:handleAllNamespaces "true"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^namespacetypeinternallinks/([\\w-]+)" ;
	queryall_query:templateString "CONSTRUCT { <${inputUrlEncoded_normalisedQueryUri}> <http://bio2rdf.org/bio2rdf_resource:hasNamespaceTypeInternalLinkCountResult> <${defaultHostAddress}namespacetypeinternallinksresultref/${urlEncoded_endpointUrl}/${urlEncoded_graphUri}/${urlEncoded_input_1}> . <${defaultHostAddress}namespacetypeinternallinksresultref/${urlEncoded_endpointUrl}/${urlEncoded_graphUri}/${urlEncoded_input_1}> <http://bio2rdf.org/bio2rdf_resource:sparqlEndpointUrl> <${endpointUrl}> .  <${defaultHostAddress}namespacetypeinternallinksresultref/${urlEncoded_endpointUrl}/${urlEncoded_graphUri}/${urlEncoded_input_1}> <http://bio2rdf.org/bio2rdf_resource:linksFromNamespace> <${inputUrlEncoded_normalisedStandardUri}> .  <${defaultHostAddress}namespacetypeinternallinksresultref/${urlEncoded_endpointUrl}/${urlEncoded_graphUri}/${urlEncoded_input_1}> <http://bio2rdf.org/bio2rdf_resource:sparqlGraphUri> \"${graphUri}\" .  <${defaultHostAddress}namespacetypeinternallinksresultref/${urlEncoded_endpointUrl}/${urlEncoded_graphUri}/${urlEncoded_input_1}> <http://bio2rdf.org/bio2rdf_resource:hasLinkCount> `(SELECT DISTINCT ?origintype ?endtype COUNT(?s2) AS ?linkcount WHERE { ${graphStart} ?s ?p ?o . ?s a ?origintype . ?s2 ?p2 ?s . ?s2 a ?endtype . ${graphEnd} })` } where { ?s1 ?p1 ?o1 } limit 1" ;
	queryall_query:queryUriTemplateString "${authority}namespacetypeinternallinks/${urlEncoded_input_1}" ;
	queryall_query:standardUriTemplateString "${authority}ns:${urlEncoded_input_1}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputUrlEncoded_normalisedStandardUri}\"><ns0pred:xNamespaceTypeInternalLinks xmlns:ns0pred=\"${defaultHostAddress}bio2rdf_resource:\" rdf:resource=\"${xmlEncoded_inputUrlEncoded_normalisedQueryUri}\"/></rdf:Description>" ;
	queryall_query:inRobotsTxt "true"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:includeThenExclude ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int ;
	queryall_query:includeQueryType bio2rdf_query:namespacecount , bio2rdf_query:namespaceuricount .

bio2rdf_query:imagefromlowercase a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "false"^^xsd:boolean ;
	dc:title "imagefromlowercase" ;
	queryall_query:handleAllNamespaces "true"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^image/([\\w-]+):(.+)" ;
	queryall_query:templateString "" ;
	queryall_query:queryUriTemplateString "${authority}image/${input_1}${separator}${input_2}" ;
	queryall_query:standardUriTemplateString "${authority}${input_1}${separator}${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputUrlEncoded_privateuppercase_normalisedStandardUri}\"><ns0pred:urlImageList xmlns:ns0pred=\"${defaultHostAddress}bio2rdf_resource:\" rdf:resource=\"${xmlEncoded_inputUrlEncoded_privateuppercase_normalisedQueryUri\"></ns0pred:urlImageList></rdf:Description>" ;
	queryall_query:inRobotsTxt "true"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int .

bio2rdf_query:constructnodefaults a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "true"^^xsd:boolean ;
	dc:title "constructnodefaults" ;
	queryall_query:handleAllNamespaces "true"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^constructnodefaults/([\\w-]+):(.+)" ;
	queryall_query:templateString "CONSTRUCT { <${inputUrlEncoded_normalisedStandardUri}> ?p ?o . } WHERE { ${graphStart} <${inputUrlEncoded_endpointSpecificUri}> ?p ?o . ${graphEnd}  } ${limit} ${sparqlOffset}" ;
	queryall_query:queryUriTemplateString "${authority}constructnodefaults/${input_1}${separator}${input_2}" ;
	queryall_query:standardUriTemplateString "${authority}${input_1}${separator}${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "" ;
	queryall_query:inRobotsTxt "false"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int ;
	queryall_query:includeQueryType bio2rdf_query:construct .

bio2rdf_query:labelsearch a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "true"^^xsd:boolean ;
	dc:title "label" ;
	queryall_query:handleAllNamespaces "true"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^label/([\\w-]+):(.+)" ;
	queryall_query:templateString "CONSTRUCT { <${normalisedStandardUri}> <http://www.w3.org/2000/01/rdf-schema#label> ?label . <${normalisedStandardUri}> dc:title ?title . <${normalisedStandardUri}> <http://purl.uniprot.org/core/title> ?uniprotTitle .  <${endpointSpecificUri}> <http://purl.org/dc/terms/title> ?dctermstitle . <${normalisedStandardUri}> <http://www.w3.org/2004/02/skos/core#prefLabel> ?skoslabel . } WHERE { ${graphStart} OPTIONAL { <${endpointSpecificUri}> <http://www.w3.org/2000/01/rdf-schema#label> ?label . } OPTIONAL { <${endpointSpecificUri}> <http://purl.org/dc/elements/1.1/title> ?title . } OPTIONAL { <${endpointSpecificUri}> <http://purl.uniprot.org/core/title> ?uniprotTitle }  OPTIONAL{ <${endpointSpecificUri}> <http://purl.org/dc/terms/title> ?dctermstitle . } OPTIONAL { <${endpointSpecificUri}> <http://www.w3.org/2004/02/skos/core#prefLabel> ?skoslabel . } ${graphEnd} } ${limit} ${sparqlOffset}" ;
	queryall_query:queryUriTemplateString "${authority}label/${input_1}${separator}${input_2}" ;
	queryall_query:standardUriTemplateString "${authority}${input_1}${separator}${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputUrlEncoded_normalisedStandardUri}\"><ns0pred:hasLabelSearch xmlns:ns0pred=\"${xmlEncoded_defaultHostAddress}bio2rdf_resource:\" rdf:resource=\"${xmlEncoded_inputUrlEncoded_normalisedQueryUri}\"/></rdf:Description>" ;
	queryall_query:inRobotsTxt "false"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int .

bio2rdf_query:biopaxxrefresolution a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "true"^^xsd:boolean ;
	dc:title "biopaxxrefresolution" ;
	queryall_query:handleAllNamespaces "false"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
    queryall_query:namespaceToHandle bio2rdf_ns:cpath , bio2rdf_ns:reactome ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^([\\w-]+):(.+)" ;
	queryall_query:templateString "CONSTRUCT { <${normalisedStandardUri}> <http://bio2rdf.org/ns/biopax:XREF> ?xref . ?xref ?xrefpredicate ?xrefobject . <${normalisedStandardUri}> <http://bio2rdf.org/bio2rdf_resource:xRef> ?xrefrealuri . } WHERE { ${graphStart} <${endpointSpecificUri}> <http://bio2rdf.org/ns/biopax#XREF> ?xref . ?xref ?xrefpredicate ?xrefobject . OPTIONAL { ?xref <http://bio2rdf.org/ns/bio2rdf#xRef> ?xrefrealuri . } ${graphEnd} } ${limit} ${sparqlOffset}" ;
	queryall_query:queryUriTemplateString "${authority}label/${input_1}${separator}${input_2}" ;
	queryall_query:standardUriTemplateString "${authority}${input_1}${separator}${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputUrlEncoded_normalisedStandardUri}\"><ns0pred:hasLabelSearch xmlns:ns0pred=\"${xmlEncoded_defaultHostAddress}bio2rdf_resource:\" rdf:resource=\"${xmlEncoded_inputUrlEncoded_normalisedQueryUri}\"/></rdf:Description>" ;
	queryall_query:inRobotsTxt "false"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int .

bio2rdf_query:biopaxxrefreverselinksbynamespace a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "true"^^xsd:boolean ;
	dc:title "biopaxxrefreverselinksbynamespace" ;
	queryall_query:handleAllNamespaces "false"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
    queryall_query:namespaceToHandle bio2rdf_ns:cpath , bio2rdf_ns:reactome , bio2rdf_ns:biopax ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^linksns/([\\w-]+)/([\\w-]+):(.+)" ;
	queryall_query:templateString "CONSTRUCT { ?refuri <http://bio2rdf.org/ns/biopax#XREF> ?xref . ?refuri ?refpredicate ?refobject . ?xref ?xrefpredicate ?xrefobject . ?xref <http://bio2rdf.org/ns/bio2rdf#xRef> <${normalisedStandardUri}> . } WHERE { ${graphStart} ?refuri <http://bio2rdf.org/ns/biopax#XREF> ?xref . ?refuri ?refpredicate ?refobject . ?xref ?xrefpredicate ?xrefobject . ?xref <http://bio2rdf.org/ns/bio2rdf#xRef> <${endpointSpecificUri}> .  ${graphEnd} } ${limit} ${sparqlOffset}" ;
	queryall_query:queryUriTemplateString "${authority}linksns/${input_1}/${input_2}${separator}${input_3}" ;
	queryall_query:standardUriTemplateString "${authority}${input_2}${separator}${input_3}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputUrlEncoded_normalisedStandardUri}\"><ns0pred:hasLabelSearch xmlns:ns0pred=\"${xmlEncoded_defaultHostAddress}bio2rdf_resource:\" rdf:resource=\"${xmlEncoded_inputUrlEncoded_normalisedQueryUri}\"/></rdf:Description>" ;
	queryall_query:inRobotsTxt "false"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasPublicIdentifierIndex "2"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int .

bio2rdf_query:counttriplesfromlowercase a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "false"^^xsd:boolean ;
	dc:title "counttriplesfromlowercase" ;
	queryall_query:handleAllNamespaces "true"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "false"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^counttriples/([\\w-]+):(.+)" ;
	queryall_query:templateString "CONSTRUCT { <${inputUrlEncoded_privateuppercase_normalisedQueryUri}> <http://bio2rdf.org/bio2rdf_resource:hasTripleCountResult> <${defaultHostAddress}tripleresultref/${urlEncoded_endpointUrl}/${urlEncoded_graphUri}/${urlEncoded_input_1}:${urlEncoded_uppercase_input_2}> . <${defaultHostAddress}tripleresultref/${urlEncoded_endpointUrl}/${urlEncoded_graphUri}/${urlEncoded_input_1}:${urlEncoded_uppercase_input_2}> <http://bio2rdf.org/bio2rdf_resource:sparqlEndpointUrl> <${endpointUrl}> .  <${defaultHostAddress}tripleresultref/${urlEncoded_endpointUrl}/${urlEncoded_graphUri}/${urlEncoded_input_1}:${urlEncoded_uppercase_input_2}> <http://bio2rdf.org/bio2rdf_resource:sparqlGraphUri> \"${graphUri}\" . <${defaultHostAddress}tripleresultref/${urlEncoded_endpointUrl}/${urlEncoded_graphUri}/${urlEncoded_input_1}:${urlEncoded_uppercase_input_2}> <http://bio2rdf.org/bio2rdf_resource:hasTripleCount> `(select (count(?o)) as ?countO where { ${graphStart} <${inputUrlEncoded_privatelowercase_endpointSpecificUri}> ?p ?o . ${graphEnd} })` } where { ?s1 ?p1 ?o1 } limit 1" ;
	queryall_query:queryUriTemplateString "${authority}counttriples/${input_1}${separator}${input_2}" ;
	queryall_query:standardUriTemplateString "${authority}${input_1}${separator}${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputUrlEncoded_privateuppercase_normalisedStandardUri}\"><ns0pred:xCountTriples xmlns:ns0pred=\"${defaultHostAddress}bio2rdf_resource:\" rdf:resource=\"${xmlEncoded_inputUrlEncoded_privateuppercase_normalisedQueryUri}\"/><ns0pred:sameAs xmlns:ns0pred=\"http://www.w3.org/2002/07/owl#\" rdf:resource=\"${xmlEncoded_inputUrlEncoded_privatelowercase_endpointSpecificUri}\"/><ns0pred:sameAs xmlns:ns0pred=\"http://www.w3.org/2002/07/owl#\" rdf:resource=\"${xmlEncoded_inputUrlEncoded_privatelowercase_normalisedStandardUri}\"/></rdf:Description>" ;
	queryall_query:inRobotsTxt "true"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int ;
	queryall_query:includeQueryType bio2rdf_query:counttriplesfromlowercase , bio2rdf_query:constructfromlowercase .

bio2rdf_query:genbankfull a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "false"^^xsd:boolean ;
	dc:title "genbankfull" ;
	queryall_query:handleAllNamespaces "true"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^genbankfull/([\\w-]+):(.+)" ;
	queryall_query:templateString "" ;
	queryall_query:queryUriTemplateString "${authority}genbankfull/${input_1}${separator}${input_2}" ;
	queryall_query:standardUriTemplateString "${authority}${input_1}${separator}${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputUrlEncoded_privateuppercase_normalisedStandardUri}\"><ns0pred:genbankfullUrl xmlns:ns0pred=\"${defaultHostAddress}bio2rdf_resource:\">${xmlEncoded_inputUrlEncoded_privateuppercase_normalisedQueryUri}</ns0pred:genbankfullUrl></rdf:Description>" ;
	queryall_query:inRobotsTxt "true"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int .

bio2rdf_query:primaryreverseconstructfromlowercase a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "true"^^xsd:boolean ;
	dc:title "primaryreverseconstructfromlowercase" ;
	queryall_query:handleAllNamespaces "true"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^([\\w-]+):(.+)" ;
	queryall_query:templateString "CONSTRUCT { <${inputUrlEncoded_privateuppercase_normalisedStandardUri}> <http://bio2rdf.org/bio2rdf_resource:linkedToFrom> ?s . } WHERE { ${graphStart} ?s ?p <${inputUrlEncoded_privatelowercase_endpointSpecificUri}> . ${graphEnd}  } ${limit} ${sparqlOffset}" ;
	queryall_query:queryUriTemplateString "${authority}${input_1}${separator}${input_2}" ;
	queryall_query:standardUriTemplateString "${authority}${input_1}${separator}${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "" ;
	queryall_query:inRobotsTxt "false"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int ;
	queryall_query:includeQueryType bio2rdf_query:constructfromlowercase .

bio2rdf_query:prosite2golinks a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "true"^^xsd:boolean ;
	dc:title "prosite2golinks" ;
	queryall_query:handleAllNamespaces "false"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^links/([\\w-]+):(.+)" ;
	queryall_query:templateString "CONSTRUCT { ?goAnnotation <http://bio2rdf.org/go_resource:has_prosite_pattern> <${inputUrlEncoded_normalisedStandardUri}> .  } WHERE {  ${graphStart}   ?goAnnotation <http://www.geneontology.org/formats/oboInOwl#hasDbXref> ?o . ?o <http://www.geneontology.org/formats/oboInOwl#hasURI> \"${inputUrlEncoded_endpointSpecificUri}\"^^xsd:anyURI . ${graphEnd}  } ${limit} ${sparqlOffset}" ;
	queryall_query:queryUriTemplateString "${authority}links/${input_1}${separator}${input_2}" ;
	queryall_query:standardUriTemplateString "${authority}${input_1}${separator}${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "" ;
	queryall_query:inRobotsTxt "true"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:namespaceToHandle bio2rdf_ns:prosite ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int .

bio2rdf_query:unsafelinks a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "true"^^xsd:boolean ;
	dc:title "unsafelinks" ;
	queryall_query:handleAllNamespaces "false"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "false"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^links/([\\w-]+):(.+)" ;
	queryall_query:templateString "CONSTRUCT { ?s ?p <${normalisedStandardUri}> . ?s a ?linkedRecordType . ?s <http://www.w3.org/2000/01/rdf-schema#label> ?label . ?s <http://purl.org/dc/elements/1.1/title> ?title . ?s <http://www.w3.org/2004/02/skos/core#prefLabel> ?skoslabel . } WHERE {  ${graphStart}  ?s ?p <${endpointSpecificUri}> . OPTIONAL { ?s a ?linkedRecordType . } OPTIONAL { ?s <http://www.w3.org/2000/01/rdf-schema#label> ?label . } OPTIONAL { ?s <http://purl.org/dc/elements/1.1/title> ?title . } OPTIONAL { ?s <http://www.w3.org/2004/02/skos/core#prefLabel> ?skoslabel . } ${graphEnd}  } ${limit} ${sparqlOffset}" ;
	queryall_query:queryUriTemplateString "${authority}links/${input_1}${separator}${input_2}" ;
	queryall_query:standardUriTemplateString "${authority}${input_1}${separator}${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputUrlEncoded_normalisedStandardUri}\"><ns0pred:xLinks xmlns:ns0pred=\"${defaultHostAddress}bio2rdf_resource:\" rdf:resource=\"${xmlEncoded_inputUrlEncoded_normalisedQueryUri}\"/></rdf:Description>" ;
	queryall_query:inRobotsTxt "true"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int .

bio2rdf_query:plusurlencodedlinks a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "true"^^xsd:boolean ;
	dc:title "plusurlencodedlinks" ;
	queryall_query:handleAllNamespaces "false"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "false"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^links/([\\w-]+):(.+)" ;
	queryall_query:templateString "CONSTRUCT { ?s ?p <${inputPlusUrlEncoded_normalisedStandardUri}> . ?s a ?linkedRecordType . ?s <http://www.w3.org/2000/01/rdf-schema#label> ?label . ?s <http://purl.org/dc/elements/1.1/title> ?title . ?s <http://www.w3.org/2004/02/skos/core#prefLabel> ?skoslabel . } WHERE {  ${graphStart}  ?s ?p <${inputPlusUrlEncoded_endpointSpecificUri}> . OPTIONAL { ?s a ?linkedRecordType . } OPTIONAL { ?s <http://www.w3.org/2000/01/rdf-schema#label> ?label . } OPTIONAL { ?s <http://purl.org/dc/elements/1.1/title> ?title . } OPTIONAL { ?s <http://www.w3.org/2004/02/skos/core#prefLabel> ?skoslabel . } ${graphEnd}  } ${limit} ${sparqlOffset}" ;
	queryall_query:queryUriTemplateString "${authority}links/${input_1}${separator}${input_2}" ;
	queryall_query:standardUriTemplateString "${authority}${input_1}${separator}${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputPlusUrlEncoded_normalisedStandardUri}\"><ns0pred:xLinks xmlns:ns0pred=\"${defaultHostAddress}bio2rdf_resource:\" rdf:resource=\"${xmlEncoded_inputPlusUrlEncoded_normalisedQueryUri}\"/></rdf:Description>" ;
	queryall_query:inRobotsTxt "true"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int .

bio2rdf_query:labelsearchforgo a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "true"^^xsd:boolean ;
	dc:title "golabel" ;
	queryall_query:handleAllNamespaces "false"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^label/([\\w-]+):(.+)" ;
	queryall_query:templateString "CONSTRUCT { <${normalisedStandardUri}> <http://bio2rdf.org/go_resource:name> ?goName . } WHERE { ${graphStart}  <${endpointSpecificUri}> <http://bio2rdf.org/ns/go#name> ?goName ${graphEnd} } ${limit} ${sparqlOffset}" ;
	queryall_query:queryUriTemplateString "${authority}label/${input_1}${separator}${input_2}" ;
	queryall_query:standardUriTemplateString "${authority}${input_1}${separator}${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputUrlEncoded_normalisedStandardUri}\"><ns0pred:hasLabelSearch xmlns:ns0pred=\"${xmlEncoded_defaultHostAddress}bio2rdf_resource:\" rdf:resource=\"${xmlEncoded_inputUrlEncoded_normalisedQueryUri}\"/></rdf:Description>" ;
	queryall_query:inRobotsTxt "false"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:namespaceToHandle bio2rdf_ns:go ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int .

bio2rdf_query:pubmedcentral a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "false"^^xsd:boolean ;
	dc:title "pubmedcentral" ;
	queryall_query:handleAllNamespaces "false"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^pubmedcentral/([\\w-]+):(.+)" ;
	queryall_query:templateString "" ;
	queryall_query:queryUriTemplateString "${authority}pubmedcentral/${input_1}${separator}${input_2}" ;
	queryall_query:standardUriTemplateString "${authority}${input_1}${separator}${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputUrlEncoded_normalisedStandardUri}\"><ns0pred:pubmedcentralUrl xmlns:ns0pred=\"${defaultHostAddress}bio2rdf_resource:\">${xmlEncoded_inputUrlEncoded_normalisedQueryUri}</ns0pred:pubmedcentralUrl></rdf:Description>" ;
	queryall_query:inRobotsTxt "true"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:namespaceToHandle bio2rdf_ns:pubmed ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int .

bio2rdf_query:virtuosobifcontainssearch a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "true"^^xsd:boolean ;
	dc:title "virtuosobifcontainssearch" ;
	queryall_query:handleAllNamespaces "true"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "false"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^search/(.+)" ;
	queryall_query:templateString "CONSTRUCT { <${inputUrlEncoded_normalisedQueryUri}> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://bio2rdf.org/bio2rdf_resource:SearchResults> . <${inputUrlEncoded_normalisedQueryUri}> <http://bio2rdf.org/bio2rdf_resource:hasSearchResult> ?s .  <${inputUrlEncoded_normalisedQueryUri}> <http://www.w3.org/2000/01/rdf-schema#seeAlso> ?s . ?s <http://www.w3.org/2000/01/rdf-schema#label> ?label . ?s <http://purl.org/dc/elements/1.1/title> ?title . ?s <http://purl.org/dc/terms/title> ?dctermstitle . ?s <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> ?type . ?s <http://www.w3.org/2004/02/skos/core#prefLabel> ?skoslabel . ?s ?p ?o .  } WHERE { ${graphStart} ?s ?p ?o . FILTER(bif:contains(?o, '\"${ntriplesEncoded_input_1}\"')) OPTIONAL { ?s <http://www.w3.org/2000/01/rdf-schema#label> ?label . } OPTIONAL { ?s <http://purl.org/dc/elements/1.1/title> ?title . } OPTIONAL{ ?s <http://purl.org/dc/terms/title> ?dctermstitle . }  OPTIONAL{ ?s <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> ?type . } OPTIONAL { ?s <http://www.w3.org/2004/02/skos/core#prefLabel> ?skoslabel . } ${graphEnd} } ${limit} ${sparqlOffset}" ;
	queryall_query:queryUriTemplateString "${defaultHostAddress}search/${input_1}" ;
	queryall_query:standardUriTemplateString "${defaultHostAddress}search/${input_1}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputUrlEncoded_normalisedStandardUri}\"><ns0pred:hasSearchResults xmlns:ns0pred=\"${xmlEncoded_defaultHostAddress}bio2rdf_resource:\" rdf:resource=\"${xmlEncoded_inputUrlEncoded_normalisedQueryUri}\"/></rdf:Description>" ;
	queryall_query:inRobotsTxt "true"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude .

bio2rdf_query:sparqlregexsearch a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "true"^^xsd:boolean ;
	dc:title "sparqlregexsearch" ;
	queryall_query:handleAllNamespaces "true"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "false"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^search/(.+)" ;
	queryall_query:templateString "CONSTRUCT { <${inputUrlEncoded_normalisedQueryUri}> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://bio2rdf.org/bio2rdf_resource:SearchResults> . <${inputUrlEncoded_normalisedQueryUri}> <http://bio2rdf.org/bio2rdf_resource:hasSearchResult> ?s .  <${inputUrlEncoded_normalisedQueryUri}> <http://www.w3.org/2000/01/rdf-schema#seeAlso> ?s . ?s <http://www.w3.org/2000/01/rdf-schema#label> ?label . ?s <http://purl.org/dc/elements/1.1/title> ?title . ?s <http://purl.org/dc/terms/title> ?dctermstitle . ?s <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> ?type . ?s <http://www.w3.org/2004/02/skos/core#prefLabel> ?skoslabel . ?s ?p ?o .  } WHERE { ${graphStart} ?s ?p ?o . FILTER(regex(str(?o), \"${ntriplesEncoded_input_1}\")) OPTIONAL { ?s <http://www.w3.org/2000/01/rdf-schema#label> ?label . } OPTIONAL { ?s <http://purl.org/dc/elements/1.1/title> ?title . }  OPTIONAL{ ?s <http://purl.org/dc/terms/title> ?dctermstitle . } OPTIONAL{ ?s <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> ?type . } OPTIONAL { ?s <http://www.w3.org/2004/02/skos/core#prefLabel> ?skoslabel . } ${graphEnd} } ${limit} ${sparqlOffset}" ;
	queryall_query:queryUriTemplateString "${defaultHostAddress}search/${input_1}" ;
	queryall_query:standardUriTemplateString "${defaultHostAddress}search/${input_1}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputUrlEncoded_normalisedStandardUri}\"><ns0pred:hasSearchResults xmlns:ns0pred=\"${xmlEncoded_defaultHostAddress}bio2rdf_resource:\" rdf:resource=\"${xmlEncoded_inputUrlEncoded_normalisedQueryUri}\"/></rdf:Description>" ;
	queryall_query:inRobotsTxt "true"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude .

bio2rdf_query:rawrdf a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "false"^^xsd:boolean ;
	dc:title "rdf" ;
	queryall_query:handleAllNamespaces "true"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^rdf/([\\w-]+):(.+)" ;
	queryall_query:templateString "" ;
	queryall_query:queryUriTemplateString "${authority}rdf/${input_1}${separator}${urlEncoded_input_2}" ;
	queryall_query:standardUriTemplateString "${authority}${input_1}${separator}${urlEncoded_input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputUrlEncoded_normalisedStandardUri}\"><ns0pred:rawRdf xmlns:ns0pred=\"${defaultHostAddress}bio2rdf_resource:\" rdf:resource=\"${xmlEncoded_inputUrlEncoded_normalisedQueryUri}\"/></rdf:Description>" ;
	queryall_query:inRobotsTxt "false"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int .

bio2rdf_query:unsaferawrdf a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "false"^^xsd:boolean ;
	dc:title "rdf" ;
	queryall_query:handleAllNamespaces "false"^^xsd:boolean ;
    queryall_query:namespaceToHandle bio2rdf_ns:wikipedia ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^rdf/([\\w-]+):(.+)" ;
	queryall_query:templateString "" ;
	queryall_query:queryUriTemplateString "${authority}rdf/${input_1}${separator}${urlEncoded_input_2}" ;
	queryall_query:standardUriTemplateString "${authority}${input_1}${separator}${urlEncoded_input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputUrlEncoded_normalisedStandardUri}\"><ns0pred:rawRdf xmlns:ns0pred=\"${defaultHostAddress}bio2rdf_resource:\" rdf:resource=\"${xmlEncoded_inputUrlEncoded_normalisedQueryUri}\"/></rdf:Description>" ;
	queryall_query:inRobotsTxt "false"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int .

bio2rdf_query:xml a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "false"^^xsd:boolean ;
	dc:title "xml" ;
	queryall_query:handleAllNamespaces "true"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^xml/([\\w-]+):(.+)" ;
	queryall_query:templateString "" ;
	queryall_query:queryUriTemplateString "${authority}xml/${input_1}${separator}${input_2}" ;
	queryall_query:standardUriTemplateString "${authority}${input_1}${separator}${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputUrlEncoded_normalisedStandardUri}\"><ns0pred:xmlUrl xmlns:ns0pred=\"${defaultHostAddress}bio2rdf_resource:\">${xmlEncoded_inputUrlEncoded_normalisedQueryUri}</ns0pred:xmlUrl></rdf:Description>" ;
	queryall_query:inRobotsTxt "true"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int .

bio2rdf_query:unknownnamespace a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "true"^^xsd:boolean ;
    queryall_query:isPageable "false"^^xsd:boolean ;
	dc:title "unknownnamespace" ;
	queryall_query:handleAllNamespaces "false"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "false"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^unknownnamespace/([\\w-]+):(.+)" ;
	queryall_query:templateString "" ;
	queryall_query:queryUriTemplateString "${defaultHostAddress}${queryString}" ;
	queryall_query:standardUriTemplateString "${defaultHostAddress}${queryString}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputUrlEncoded_normalisedStandardUri}\"><rdf:type xmlns:ns0pred=\"${defaultHostAddress}bio2rdf_resource:\" rdf:resource=\"http://bio2rdf.org/bio2rdf_resource:Error\"/><rdf:type xmlns:ns0pred=\"${defaultHostAddress}bio2rdf_resource:\" rdf:resource=\"http://bio2rdf.org/bio2rdf_resource:UnknownNamespaceForThisQueryError\"/></rdf:Description>" ;
	queryall_query:inRobotsTxt "true"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int ;
	queryall_query:includeQueryType bio2rdf_query:unknownnamespace .

bio2rdf_query:countlinksfromlowercase a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "false"^^xsd:boolean ;
	dc:title "countlinksfromlowercase" ;
	queryall_query:handleAllNamespaces "true"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "false"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^countlinks/([\\w-]+):(.+)" ;
	queryall_query:templateString "CONSTRUCT { <${inputUrlEncoded_privateuppercase_normalisedQueryUri}> <http://bio2rdf.org/bio2rdf_resource:hasLinkCountResult> <${defaultHostAddress}linkresultref/${urlEncoded_endpointUrl}/${urlEncoded_graphUri}/${urlEncoded_input_1}:${urlEncoded_uppercase_input_2}> . <${defaultHostAddress}linkresultref/${urlEncoded_endpointUrl}/${urlEncoded_graphUri}/${urlEncoded_input_1}:${urlEncoded_uppercase_input_2}> <http://bio2rdf.org/bio2rdf_resource:sparqlEndpointUrl> <${endpointUrl}> .  <${defaultHostAddress}linkresultref/${urlEncoded_endpointUrl}/${urlEncoded_graphUri}/${urlEncoded_input_1}:${urlEncoded_uppercase_input_2}> <http://bio2rdf.org/bio2rdf_resource:sparqlGraphUri> \"${graphUri}\" . <${defaultHostAddress}linkresultref/${urlEncoded_endpointUrl}/${urlEncoded_graphUri}/${urlEncoded_input_1}:${urlEncoded_uppercase_input_2}> <http://bio2rdf.org/bio2rdf_resource:hasLinkCount> `(select (count(?s)) as ?countS where { ${graphStart} ?s ?p <${inputUrlEncoded_privatelowercase_endpointSpecificUri}> . ${graphEnd} })` } where { ?s1 ?p1 ?o1 } limit 1" ;
	queryall_query:queryUriTemplateString "${authority}countlinks/${input_1}${separator}${input_2}" ;
	queryall_query:standardUriTemplateString "${authority}${input_1}${separator}${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputUrlEncoded_privateuppercase_normalisedStandardUri}\"><ns0pred:xCountLinks xmlns:ns0pred=\"${defaultHostAddress}bio2rdf_resource:\" rdf:resource=\"${xmlEncoded_inputUrlEncoded_privateuppercase_normalisedQueryUri}\"/><ns0pred:sameAs xmlns:ns0pred=\"http://www.w3.org/2002/07/owl#\" rdf:resource=\"${xmlEncoded_inputUrlEncoded_privatelowercase_endpointSpecificUri}\"/><ns0pred:sameAs xmlns:ns0pred=\"http://www.w3.org/2002/07/owl#\" rdf:resource=\"${xmlEncoded_inputUrlEncoded_privatelowercase_normalisedStandardUri}\"/></rdf:Description>" ;
	queryall_query:inRobotsTxt "true"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int ;
	queryall_query:includeQueryType bio2rdf_query:countlinksfromlowercase , bio2rdf_query:constructfromlowercase .

bio2rdf_query:pubmedrefs a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "false"^^xsd:boolean ;
	dc:title "pubmedrefs" ;
	queryall_query:handleAllNamespaces "true"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^pubmedrefs/([\\w-]+):(.+)" ;
	queryall_query:templateString "" ;
	queryall_query:queryUriTemplateString "${authority}pubmedrefs/${input_1}${separator}${input_2}" ;
	queryall_query:standardUriTemplateString "${authority}${input_1}${separator}${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputUrlEncoded_privateuppercase_normalisedStandardUri}\"><ns0pred:pubmedrefsUrl xmlns:ns0pred=\"${defaultHostAddress}bio2rdf_resource:\">${xmlEncoded_inputUrlEncoded_privateuppercase_normalisedQueryUri}</ns0pred:pubmedrefsUrl></rdf:Description>" ;
	queryall_query:inRobotsTxt "true"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int .

bio2rdf_query:homologenelinks a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "true"^^xsd:boolean ;
	dc:title "homologenelinks" ;
	queryall_query:handleAllNamespaces "false"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "false"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^links/([\\w-]+):(.+)" ;
	queryall_query:templateString "CONSTRUCT { ?homologousGene <http://purl.org/science/owl/sciencecommons/has_homologous_gene_record>  <${inputUrlEncoded_normalisedStandardUri}>.  } WHERE {  ${graphStart}  ?s <http://purl.org/science/owl/sciencecommons/has_homologous_gene_record> <${inputUrlEncoded_endpointSpecificUri}> . ?s <http://purl.org/science/owl/sciencecommons/has_homologous_gene_record> ?homologousGene . ${graphEnd}  } ${limit} ${sparqlOffset}" ;
	queryall_query:queryUriTemplateString "${authority}links/${input_1}${separator}${input_2}" ;
	queryall_query:standardUriTemplateString "${authority}${input_1}${separator}${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "" ;
	queryall_query:inRobotsTxt "true"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:namespaceToHandle bio2rdf_ns:geneid ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int .

bio2rdf_query:image a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "false"^^xsd:boolean ;
	dc:title "image" ;
	queryall_query:handleAllNamespaces "true"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^image/([\\w-]+):(.+)" ;
	queryall_query:templateString "" ;
	queryall_query:queryUriTemplateString "${authority}image/${input_1}${separator}${input_2}" ;
	queryall_query:standardUriTemplateString "${authority}${input_1}${separator}${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputUrlEncoded_normalisedStandardUri}\"><ns0pred:urlImage xmlns:ns0pred=\"${defaultHostAddress}bio2rdf_resource:\">${xmlEncoded_endpointUrl}</ns0pred:urlImage></rdf:Description>" ;
	queryall_query:inRobotsTxt "true"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int ;
	queryall_query:includeQueryType bio2rdf_query:image .
	

bio2rdf_query:imageinclude a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "false"^^xsd:boolean ;
	dc:title "image" ;
	queryall_query:handleAllNamespaces "true"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^([\\w-]+):(.+)" ;
	queryall_query:templateString "" ;
	queryall_query:queryUriTemplateString "${authority}image/${input_1}${separator}${input_2}" ;
	queryall_query:standardUriTemplateString "${authority}${input_1}${separator}${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputUrlEncoded_normalisedStandardUri}\"><ns0pred:urlImageList xmlns:ns0pred=\"${defaultHostAddress}bio2rdf_resource:\" rdf:resource=\"${xmlEncoded_inputUrlEncoded_normalisedQueryUri}\"></ns0pred:urlImageList></rdf:Description>" ;
	queryall_query:inRobotsTxt "true"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int ;
	queryall_query:includeQueryType bio2rdf_query:imageinclude .


bio2rdf_query:homologeneconstruct a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "true"^^xsd:boolean ;
	dc:title "homologeneconstruct" ;
	queryall_query:handleAllNamespaces "false"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^([\\w-]+):(.+)" ;
	queryall_query:templateString "CONSTRUCT { <${inputUrlEncoded_normalisedStandardUri}> <http://purl.org/science/owl/sciencecommons/has_homologous_gene_record> ?homologousGene .  } WHERE {  ${graphStart}  ?s <http://purl.org/science/owl/sciencecommons/has_homologous_gene_record> <${inputUrlEncoded_endpointSpecificUri}> . ?s <http://purl.org/science/owl/sciencecommons/has_homologous_gene_record> ?homologousGene . ${graphEnd}  } ${limit} ${sparqlOffset}" ;
	queryall_query:queryUriTemplateString "${authority}${input_1}${separator}${input_2}" ;
	queryall_query:standardUriTemplateString "${authority}${input_1}${separator}${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "" ;
	queryall_query:inRobotsTxt "false"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:namespaceToHandle bio2rdf_ns:geneid ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int .

bio2rdf_query:ispy a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "false"^^xsd:boolean ;
	dc:title "ispy" ;
	queryall_query:handleAllNamespaces "true"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^ispy/([\\w-]+):(.+)" ;
	queryall_query:templateString "" ;
	queryall_query:queryUriTemplateString "${authority}ispy/${input_1}${separator}${input_2}" ;
	queryall_query:standardUriTemplateString "${authority}${input_1}${separator}${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputUrlEncoded_normalisedStandardUri}\"><ns0pred:ispyUrl xmlns:ns0pred=\"${defaultHostAddress}bio2rdf_resource:\">${xmlEncoded_inputUrlEncoded_normalisedQueryUri}</ns0pred:ispyUrl></rdf:Description>" ;
	queryall_query:inRobotsTxt "true"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int .

bio2rdf_query:related a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "false"^^xsd:boolean ;
	dc:title "related" ;
	queryall_query:handleAllNamespaces "true"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^related/([\\w-]+):(.+)" ;
	queryall_query:templateString "" ;
	queryall_query:queryUriTemplateString "${authority}related/${input_1}${separator}${input_2}" ;
	queryall_query:standardUriTemplateString "${authority}${input_1}${separator}${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputUrlEncoded_normalisedStandardUri}\"><ns0pred:relatedItemsUrl xmlns:ns0pred=\"${defaultHostAddress}bio2rdf_resource:\">${xmlEncoded_inputUrlEncoded_normalisedQueryUri}</ns0pred:relatedItemsUrl></rdf:Description>" ;
	queryall_query:inRobotsTxt "true"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int .

bio2rdf_query:proteinlinks a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "true"^^xsd:boolean ;
	dc:title "proteinlinks" ;
	queryall_query:handleAllNamespaces "false"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "false"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^proteinlinks/([\\w-]+):(.+)" ;
	queryall_query:templateString "CONSTRUCT { ?s ?p <${inputUrlEncoded_normalisedStandardUri}> . ?s a ?linkedRecordType . ?s <http://www.w3.org/2000/01/rdf-schema#label> ?label . ?s <http://purl.org/dc/elements/1.1/title> ?title . ?s <http://www.w3.org/2004/02/skos/core#prefLabel> ?skoslabel . } WHERE {  ${graphStart}  ?s ?p <${inputUrlEncoded_endpointSpecificUri}> . OPTIONAL { ?s a ?linkedRecordType . } OPTIONAL { ?s <http://www.w3.org/2000/01/rdf-schema#label> ?label . } OPTIONAL { ?s <http://purl.org/dc/elements/1.1/title> ?title . } OPTIONAL { ?s <http://www.w3.org/2004/02/skos/core#prefLabel> ?skoslabel . } ${graphEnd}  } ${limit} ${sparqlOffset}" ;
	queryall_query:queryUriTemplateString "${authority}proteinlinks/${input_1}${separator}${input_2}" ;
	queryall_query:standardUriTemplateString "${authority}${input_1}${separator}${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputUrlEncoded_normalisedStandardUri}\"><ns0pred:xProteinLinks xmlns:ns0pred=\"${defaultHostAddress}bio2rdf_resource:\" rdf:resource=\"${xmlEncoded_inputUrlEncoded_normalisedQueryUri}\"/></rdf:Description>" ;
	queryall_query:inRobotsTxt "true"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int .

bio2rdf_query:hubmed a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "false"^^xsd:boolean ;
	dc:title "hubmed" ;
	queryall_query:handleAllNamespaces "false"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^hubmed/([\\w-]+):(.+)" ;
	queryall_query:templateString "" ;
	queryall_query:queryUriTemplateString "${authority}hubmed/${input_1}${separator}${input_2}" ;
	queryall_query:standardUriTemplateString "${authority}${input_1}${separator}${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputUrlEncoded_normalisedStandardUri}\"><ns0pred:hubmedUrl xmlns:ns0pred=\"${defaultHostAddress}bio2rdf_resource:\">${xmlEncoded_inputUrlEncoded_normalisedQueryUri}</ns0pred:hubmedUrl></rdf:Description>" ;
	queryall_query:inRobotsTxt "true"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:namespaceToHandle bio2rdf_ns:pubmed ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int .

bio2rdf_query:goinprositeconstruct a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "true"^^xsd:boolean ;
	dc:title "goinprositeconstruct" ;
	queryall_query:handleAllNamespaces "false"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^([\\w-]+):(.+)" ;
	queryall_query:templateString "CONSTRUCT { <${inputUrlEncoded_normalisedStandardUri}> <http://bio2rdf.org/go_resource:has_prosite_pattern> ?prositeReference .  } WHERE {  ${graphStart}  <${inputUrlEncoded_endpointSpecificUri}> <http://www.geneontology.org/formats/oboInOwl#hasDbXref> ?o . ?o <http://www.geneontology.org/formats/oboInOwl#hasURI>  ?prositeReference . ${graphEnd}  } ${limit} ${sparqlOffset}" ;
	queryall_query:queryUriTemplateString "${authority}${input_1}${separator}${input_2}" ;
	queryall_query:standardUriTemplateString "${authority}${input_1}${separator}${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "" ;
	queryall_query:inRobotsTxt "false"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:namespaceToHandle bio2rdf_ns:go ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int .

bio2rdf_query:unsafeconstruct a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "true"^^xsd:boolean ;
	dc:title "unsafeconstruct" ;
	queryall_query:handleAllNamespaces "true"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^([\\w-]+):(.+)" ;
	queryall_query:templateString "CONSTRUCT { <${normalisedStandardUri}> ?p ?o . } WHERE { ${graphStart} <${ntriplesEncoded_endpointSpecificUri}> ?p ?o . ${graphEnd}  } ${limit} ${sparqlOffset}" ;
	queryall_query:queryUriTemplateString "${authority}${input_1}${separator}${input_2}" ;
	queryall_query:standardUriTemplateString "${authority}${input_1}${separator}${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_ntriplesEncoded_normalisedStandardUri}\"><ns0pred:sameAs xmlns:ns0pred=\"http://www.w3.org/2002/07/owl#\" rdf:resource=\"${xmlEncoded_ntriplesEncoded_endpointSpecificUri}\"/></rdf:Description>" ;
	queryall_query:inRobotsTxt "false"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int ;
	queryall_query:includeQueryType bio2rdf_query:unsafeconstruct .

bio2rdf_query:plusurlencodedconstruct a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "true"^^xsd:boolean ;
	dc:title "plusurlencodedconstruct" ;
	queryall_query:handleAllNamespaces "true"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^([\\w-]+):(.+)" ;
	queryall_query:templateString "CONSTRUCT { <${inputPlusUrlEncoded_normalisedStandardUri}> ?p ?o . } WHERE { ${graphStart} <${inputPlusUrlEncoded_endpointSpecificUri}> ?p ?o . ${graphEnd}  } ${limit} ${sparqlOffset}" ;
	queryall_query:queryUriTemplateString "${authority}${input_1}${separator}${input_2}" ;
	queryall_query:standardUriTemplateString "${authority}${input_1}${separator}${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputPlusUrlEncoded_normalisedStandardUri}\"><ns0pred:sameAs xmlns:ns0pred=\"http://www.w3.org/2002/07/owl#\" rdf:resource=\"${xmlEncoded_inputPlusUrlEncoded_endpointSpecificUri}\"/></rdf:Description>" ;
	queryall_query:inRobotsTxt "false"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int ;
	queryall_query:includeQueryType bio2rdf_query:plusurlencodedconstruct .

bio2rdf_query:tags a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "true"^^xsd:boolean ;
	dc:title "tags" ;
	queryall_query:handleAllNamespaces "true"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "true"^^xsd:boolean ;
	queryall_query:inputRegex "^tags/([\\w-]+):(.+)" ;
	queryall_query:templateString "PREFIX tags: <http://www.holygoat.co.uk/owl/redwood/0.1/tags/> PREFIX terms: <http://purl.org/net/terms#> CONSTRUCT { ?taggingInstance rdf:type terms:TermInstance . ?taggingInstance terms:taggedBy ?foafUser . ?taggingInstance terms:taggedOn ?taggedOn . ?taggingInstance terms:subject <${inputUrlEncoded_normalisedStandardUri}> . ?taggingInstance terms:predicate ?termPredicate . ?taggingInstance terms:object ?termObject . ?taggingInstance terms:term ?tagLabelUri . ?tagLabelUri tags:name ?tagLabelName . } WHERE { ${graphStart} ?taggingInstance rdf:type terms:TermInstance . ?taggingInstance terms:taggedBy ?foafUser . ?taggingInstance terms:taggedOn ?taggedOn .         ?taggingInstance terms:subject <${inputUrlEncoded_endpointSpecificUri}> . OPTIONAL{ ?taggingInstance terms:predicate ?termPredicate .} OPTIONAL{?taggingInstance terms:object ?termObject .} ?taggingInstance terms:term ?tagLabelUri . ?tagLabelUri tags:name ?tagLabelName . FILTER(sameTerm(?foafUser, <http://purl.org/net/terms#AnonymousUser>)) ${graphEnd} } ${limit} ${sparqlOffset}" ;
	queryall_query:queryUriTemplateString "${authority}tags/${input_1}${separator}${input_2}" ;
	queryall_query:standardUriTemplateString "${authority}${input_1}${separator}${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputUrlEncoded_normalisedStandardUri}\"><ns0pred:xTags xmlns:ns0pred=\"${defaultHostAddress}bio2rdf_resource:\" rdf:resource=\"${xmlEncoded_inputUrlEncoded_normalisedQueryUri}\"/></rdf:Description>" ;
	queryall_query:inRobotsTxt "false"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:namespaceToHandle bio2rdf_ns:geneid , bio2rdf_ns:mquter_gene , bio2rdf_ns:go , bio2rdf_ns:keywords , bio2rdf_ns:term , bio2rdf_ns:terminstance ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int ;
	queryall_query:includeQueryType bio2rdf_query:tags .

bio2rdf_query:goinprositelinks a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "true"^^xsd:boolean ;
	dc:title "goinprositelinks" ;
	queryall_query:handleAllNamespaces "false"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^links/([\\w-]+):(.+)" ;
	queryall_query:templateString "CONSTRUCT { ?prositeReference <http://bio2rdf.org/bio2rdf_resource:has_go_annotation> <${inputUrlEncoded_normalisedStandardUri}> .  } WHERE {  ${graphStart}  <${inputUrlEncoded_endpointSpecificUri}> <http://www.geneontology.org/formats/oboInOwl#hasDbXref> ?o . ?o <http://www.geneontology.org/formats/oboInOwl#hasURI> ?prositeReference . ${graphEnd}  } ${limit} ${sparqlOffset}" ;
	queryall_query:queryUriTemplateString "${authority}${input_1}${separator}${input_2}" ;
	queryall_query:standardUriTemplateString "${authority}${input_1}${separator}${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "" ;
	queryall_query:inRobotsTxt "true"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:namespaceToHandle bio2rdf_ns:go ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int .

bio2rdf_query:fulltext a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "false"^^xsd:boolean ;
	dc:title "fulltext" ;
	queryall_query:handleAllNamespaces "true"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^fulltext/([\\w-]+):(.+)" ;
	queryall_query:templateString "" ;
	queryall_query:queryUriTemplateString "${authority}fulltext/${input_1}${separator}${input_2}" ;
	queryall_query:standardUriTemplateString "${authority}${input_1}${separator}${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputUrlEncoded_privateuppercase_normalisedStandardUri}\"><ns0pred:fulltextUrl xmlns:ns0pred=\"${defaultHostAddress}bio2rdf_resource:\">${xmlEncoded_inputUrlEncoded_privateuppercase_normalisedQueryUri}</ns0pred:fulltextUrl></rdf:Description>" ;
	queryall_query:inRobotsTxt "true"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int .

bio2rdf_query:index a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "false"^^xsd:boolean ;
	dc:title "index" ;
	queryall_query:handleAllNamespaces "true"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^index/([\\w-]+):(.+)" ;
	queryall_query:templateString "" ;
	queryall_query:queryUriTemplateString "${authority}index/${input_1}${separator}${urlEncoded_input_2}" ;
	queryall_query:standardUriTemplateString "${authority}${input_1}${separator}${urlEncoded_input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "" ;
	queryall_query:inRobotsTxt "true"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int .

bio2rdf_query:countlinksbynamespace a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "false"^^xsd:boolean ;
	dc:title "countlinksns" ;
	queryall_query:handleAllNamespaces "true"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^countlinksns/([\\w-]+)/([\\w-]+):(.+)" ;
	queryall_query:templateString "CONSTRUCT { <${inputUrlEncoded_normalisedQueryUri}> <http://bio2rdf.org/bio2rdf_resource:hasNamespaceLinkCountResult> <${defaultHostAddress}linknsresultref/${urlEncoded_endpointUrl}/${urlEncoded_graphUri}/${urlEncoded_input_2}:${urlEncoded_input_3}> . <${defaultHostAddress}linknsresultref/${urlEncoded_endpointUrl}/${urlEncoded_graphUri}/${urlEncoded_input_2}:${urlEncoded_input_3}> <http://bio2rdf.org/bio2rdf_resource:sparqlEndpointUrl> <${endpointUrl}> .  <${defaultHostAddress}linknsresultref/${urlEncoded_endpointUrl}/${urlEncoded_graphUri}/${urlEncoded_input_2}:${urlEncoded_input_3}> <http://bio2rdf.org/bio2rdf_resource:linksFromNamespace> <${defaultHostAddress}ns:${urlEncoded_input_1}> .  <${defaultHostAddress}linknsresultref/${urlEncoded_endpointUrl}/${urlEncoded_graphUri}/${urlEncoded_input_2}:${urlEncoded_input_3}> <http://bio2rdf.org/bio2rdf_resource:sparqlGraphUri> \"${graphUri}\" .  <${defaultHostAddress}linknsresultref/${urlEncoded_endpointUrl}/${urlEncoded_graphUri}/${urlEncoded_input_2}:${urlEncoded_input_3}> <http://bio2rdf.org/bio2rdf_resource:hasLinkCount> `(select (count(?s)) as ?countS where { ${graphStart} ?s ?p <${inputUrlEncoded_endpointSpecificUri}> . ${graphEnd} })` } where { ?s1 ?p1 ?o1 } limit 1" ;
	queryall_query:queryUriTemplateString "${authority}countlinksns/${input_1}/${input_2}${separator}${input_3}" ;
	queryall_query:standardUriTemplateString "${authority}${input_2}${separator}${input_3}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputUrlEncoded_normalisedStandardUri}\"><ns0pred:xNamespaceCountLinks xmlns:ns0pred=\"${defaultHostAddress}bio2rdf_resource:\" rdf:resource=\"${xmlEncoded_inputUrlEncoded_normalisedQueryUri}\"/><ns0pred:xCountLinks xmlns:ns0pred=\"${defaultHostAddress}bio2rdf_resource:\" rdf:resource=\"${defaultHostAddress}countlinks/${xmlEncoded_urlEncoded_input_2}:${xmlEncoded_urlEncoded_input_3}\"/></rdf:Description>" ;
	queryall_query:inRobotsTxt "true"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int , "2"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int ;
	queryall_query:includeQueryType bio2rdf_query:countlinksbynamespace .

bio2rdf_query:genbankpartial a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "false"^^xsd:boolean ;
	dc:title "genbankpartial" ;
	queryall_query:handleAllNamespaces "true"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^genbankpartial/([\\w-]+):(.+)" ;
	queryall_query:templateString "" ;
	queryall_query:queryUriTemplateString "${authority}genbankpartial/${input_1}${separator}${input_2}" ;
	queryall_query:standardUriTemplateString "${authority}${input_1}${separator}${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputUrlEncoded_privateuppercase_normalisedStandardUri}\"><ns0pred:genbankpartialUrl xmlns:ns0pred=\"${defaultHostAddress}bio2rdf_resource:\">${xmlEncoded_inputUrlEncoded_privateuppercase_normalisedQueryUri}</ns0pred:genbankpartialUrl></rdf:Description>" ;
	queryall_query:inRobotsTxt "true"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int .

bio2rdf_query:primaryreverseconstruct a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "true"^^xsd:boolean ;
	dc:title "primaryreverseconstruct" ;
	queryall_query:handleAllNamespaces "true"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^([\\w-]+):(.+)" ;
	queryall_query:templateString "CONSTRUCT { <${inputUrlEncoded_normalisedStandardUri}> <http://bio2rdf.org/bio2rdf_resource:linkedToFrom> ?s . } WHERE { ${graphStart} ?s ?p <${inputUrlEncoded_endpointSpecificUri}> . ${graphEnd}  } ${limit} ${sparqlOffset}" ;
	queryall_query:queryUriTemplateString "${authority}${input_1}${separator}${input_2}" ;
	queryall_query:standardUriTemplateString "${authority}${input_1}${separator}${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputUrlEncoded_normalisedStandardUri}\"><ns0pred:sameAs xmlns:ns0pred=\"http://www.w3.org/2002/07/owl#\" rdf:resource=\"${xmlEncoded_inputUrlEncoded_endpointSpecificUri}\"/></rdf:Description>" ;
	queryall_query:inRobotsTxt "false"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int ;
	queryall_query:includeQueryType bio2rdf_query:primaryreverseconstruct .

bio2rdf_query:secondaryreverseconstruct a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "true"^^xsd:boolean ;
	dc:title "secondaryreverseconstruct" ;
	queryall_query:handleAllNamespaces "true"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^([\\w-]+):(.+)" ;
	queryall_query:templateString "CONSTRUCT { <${inputUrlEncoded_normalisedStandardUri}> <http://bio2rdf.org/bio2rdf_resource:linkedToFrom> ?s . } WHERE { ${graphStart} ?s ?p <${inputUrlEncoded_endpointSpecificUri}> . ${graphEnd}  } ${limit} ${sparqlOffset}" ;
	queryall_query:queryUriTemplateString "${authority}${input_1}${separator}${input_2}" ;
	queryall_query:standardUriTemplateString "${authority}${input_1}${separator}${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputUrlEncoded_normalisedStandardUri}\"><ns0pred:sameAs xmlns:ns0pred=\"http://www.w3.org/2002/07/owl#\" rdf:resource=\"${xmlEncoded_inputUrlEncoded_endpointSpecificUri}\"/></rdf:Description>" ;
	queryall_query:inRobotsTxt "false"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int ;
	queryall_query:includeQueryType bio2rdf_query:secondaryreverseconstruct .

bio2rdf_query:namespacecount a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "false"^^xsd:boolean ;
	dc:title "namespacecount" ;
	queryall_query:handleAllNamespaces "true"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "false"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^namespacecount/([\\w-]+)" ;
	queryall_query:templateString "SELECT (count(?s)) AS ?countS WHERE { ${graphStart} ?s ?p ?o . ${graphEnd} }" ;
	queryall_query:queryUriTemplateString "${authority}namespacecount/${urlEncoded_input_1}" ;
	queryall_query:standardUriTemplateString "${authority}ns/${urlEncoded_input_1}#" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputUrlEncoded_normalisedStandardUri}\"><ns0pred:xNamespaceSubjectUriCount xmlns:ns0pred=\"${defaultHostAddress}bio2rdf_resource:\" rdf:resource=\"${xmlEncoded_inputUrlEncoded_normalisedQueryUri}\"/></rdf:Description>" ;
	queryall_query:inRobotsTxt "true"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:includeThenExclude ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int .

bio2rdf_query:relatedfromlowercase a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "false"^^xsd:boolean ;
	dc:title "relatedfromlowercase" ;
	queryall_query:handleAllNamespaces "true"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^related/([\\w-]+):(.+)" ;
	queryall_query:templateString "" ;
	queryall_query:queryUriTemplateString "${authority}related/${input_1}${separator}${input_2}" ;
	queryall_query:standardUriTemplateString "${authority}${input_1}${separator}${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputUrlEncoded_privateuppercase_normalisedStandardUri}\"><ns0pred:relatedItems xmlns:ns0pred=\"${defaultHostAddress}bio2rdf_resource:\">${xmlEncoded_inputUrlEncoded_privateuppercase_normalisedQueryUri}</ns0pred:relatedItems></rdf:Description>" ;
	queryall_query:inRobotsTxt "true"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int .

bio2rdf_query:links a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "true"^^xsd:boolean ;
	dc:title "links" ;
	queryall_query:handleAllNamespaces "true"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "false"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^links/([\\w-]+):(.+)" ;
	queryall_query:templateString "CONSTRUCT { ?s ?p <${inputUrlEncoded_normalisedStandardUri}> . ?s a ?linkedRecordType . ?s <http://www.w3.org/2000/01/rdf-schema#label> ?label . ?s <http://purl.org/dc/elements/1.1/title> ?title . ?s <http://www.w3.org/2004/02/skos/core#prefLabel> ?skoslabel . } WHERE {  ${graphStart}  ?s ?p <${inputUrlEncoded_endpointSpecificUri}> . OPTIONAL { ?s a ?linkedRecordType . } OPTIONAL { ?s <http://www.w3.org/2000/01/rdf-schema#label> ?label . } OPTIONAL { ?s <http://purl.org/dc/elements/1.1/title> ?title . } OPTIONAL { ?s <http://www.w3.org/2004/02/skos/core#prefLabel> ?skoslabel . } ${graphEnd}  } ${limit} ${sparqlOffset}" ;
	queryall_query:queryUriTemplateString "${authority}links/${input_1}${separator}${input_2}" ;
	queryall_query:standardUriTemplateString "${authority}${input_1}${separator}${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputUrlEncoded_normalisedStandardUri}\"><ns0pred:xLinks xmlns:ns0pred=\"${defaultHostAddress}bio2rdf_resource:\" rdf:resource=\"${xmlEncoded_inputUrlEncoded_normalisedQueryUri}\"/></rdf:Description>" ;
	queryall_query:inRobotsTxt "true"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int .

bio2rdf_query:primaryreverseconstructfrompubcheminchi a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "true"^^xsd:boolean ;
	dc:title "primaryreverseconstructfrompubcheminchi" ;
	queryall_query:handleAllNamespaces "false"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^([\\w-]+):(.+)" ;
	queryall_query:templateString "CONSTRUCT { <${normalisedStandardUri}> <http://bio2rdf.org/bio2rdf_resource:linkedToFrom> ?s . ?s ?p ?o . } WHERE { ${graphStart} ?s <${defaultHostAddress}ns/ns/ns/pubchem#InChI> \"InChI=${input_2}\" . ?s ?p ?o . ${graphEnd}  } ${limit} ${sparqlOffset}" ;
	queryall_query:queryUriTemplateString "${authority}${input_1}${separator}${input_2}" ;
	queryall_query:standardUriTemplateString "${authority}${input_1}${separator}${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_normalisedStandardUri}\"><ns0pred:sameAs xmlns:ns0pred=\"http://www.w3.org/2002/07/owl#\" rdf:resource=\"${xmlEncoded_endpointSpecificUri}\"/></rdf:Description>" ;
	queryall_query:inRobotsTxt "false"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:namespaceToHandle bio2rdf_ns:inchi ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int ;
	queryall_query:includeQueryType bio2rdf_query:primaryreverseconstructfrompubcheminchi .

bio2rdf_query:licensefromlowercase a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "false"^^xsd:boolean ;
	dc:title "licensefromlowercase" ;
	queryall_query:handleAllNamespaces "true"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^license/([\\w-]+):(.+)" ;
	queryall_query:templateString "" ;
	queryall_query:queryUriTemplateString "${authority}license/${input_1}${separator}${input_2}" ;
	queryall_query:standardUriTemplateString "${authority}${input_1}${separator}${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputUrlEncoded_privateuppercase_normalisedStandardUri}\"><ns0pred:rights xmlns:ns0pred=\"http://purl.org/dc/terms/\" rdf:resource=\"${xmlEncoded_endpointUrl}\"/></rdf:Description>" ;
	queryall_query:inRobotsTxt "true"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int ;
	queryall_query:includeQueryType bio2rdf_query:licensefromlowercase .

bio2rdf_query:lsidresolution a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "false"^^xsd:boolean ;
	dc:title "lsidresolution" ;
	queryall_query:handleAllNamespaces "true"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "true"^^xsd:boolean ;
	queryall_query:inputRegex "^lsid/([\\w-]+):(.+)" ;
	queryall_query:templateString "" ;
	queryall_query:queryUriTemplateString "urn:lsid:bio2rdf.org:${input_1}${separator}${input_2}" ;
	queryall_query:standardUriTemplateString "${authority}${input_1}${separator}${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputUrlEncoded_normalisedStandardUri}\"><ns0pred:xLsid xmlns:ns0pred=\"${defaultHostAddress}bio2rdf_resource:\" rdf:resource=\"${xmlEncoded_inputUrlEncoded_normalisedQueryUri}\"/><ns0pred:xProxyLsid xmlns:ns0pred=\"${defaultHostAddress}bio2rdf_resource:\" rdf:resource=\"${defaultHostAddress}urn:lsid:bio2rdf.org:${xmlEncoded_urlEncoded_input_1}:${xmlEncoded_urlEncoded_input_2}\"/></rdf:Description>" ;
	queryall_query:inRobotsTxt "false"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int ;
	queryall_query:includeQueryType bio2rdf_query:lsidresolution .

bio2rdf_query:asn1 a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "false"^^xsd:boolean ;
	dc:title "asn1" ;
	queryall_query:handleAllNamespaces "true"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^asn1/([\\w-]+):(.+)" ;
	queryall_query:templateString "" ;
	queryall_query:queryUriTemplateString "${authority}asn1/${input_1}${separator}${input_2}" ;
	queryall_query:standardUriTemplateString "${authority}${input_1}${separator}${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputUrlEncoded_privateuppercase_normalisedStandardUri}\"><ns0pred:asn1Url xmlns:ns0pred=\"${defaultHostAddress}bio2rdf_resource:\">${xmlEncoded_inputUrlEncoded_privateuppercase_normalisedQueryUri}</ns0pred:asn1Url></rdf:Description>" ;
	queryall_query:inRobotsTxt "true"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int .

bio2rdf_query:html a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "false"^^xsd:boolean ;
	dc:title "html" ;
	queryall_query:handleAllNamespaces "true"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^html/([\\w-]+):(.+)" ;
	queryall_query:templateString "" ;
	queryall_query:queryUriTemplateString "${authority}html/${input_1}${separator}${input_2}" ;
	queryall_query:standardUriTemplateString "${authority}${input_1}${separator}${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputUrlEncoded_normalisedStandardUri}\"><ns0pred:url xmlns:ns0pred=\"${defaultHostAddress}bio2rdf_resource:\">${xmlEncoded_endpointUrl}</ns0pred:url></rdf:Description>" ;
	queryall_query:inRobotsTxt "true"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int ;
	queryall_query:includeQueryType bio2rdf_query:html .

bio2rdf_query:htmlinclude a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "false"^^xsd:boolean ;
	dc:title "html" ;
	queryall_query:handleAllNamespaces "true"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^([\\w-]+):(.+)" ;
	queryall_query:templateString "" ;
	queryall_query:queryUriTemplateString "${authority}html/${input_1}${separator}${input_2}" ;
	queryall_query:standardUriTemplateString "${authority}${input_1}${separator}${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputUrlEncoded_normalisedStandardUri}\"><ns0pred:urlList xmlns:ns0pred=\"${defaultHostAddress}bio2rdf_resource:\" rdf:resource=\"${xmlEncoded_normalisedQueryUri}\"></ns0pred:urlList></rdf:Description>" ;
	queryall_query:inRobotsTxt "true"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int ;
	queryall_query:includeQueryType bio2rdf_query:htmlinclude .

bio2rdf_query:unsafehtml a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "false"^^xsd:boolean ;
	dc:title "unsafe html" ;
	queryall_query:handleAllNamespaces "true"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^html/([\\w-]+):(.+)" ;
	queryall_query:templateString "" ;
	queryall_query:queryUriTemplateString "${authority}html/${input_1}${separator}${input_2}" ;
	queryall_query:standardUriTemplateString "${authority}${input_1}${separator}${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_normalisedStandardUri}\"><ns0pred:url xmlns:ns0pred=\"${defaultHostAddress}bio2rdf_resource:\">${xmlEncoded_normalisedQueryUri}</ns0pred:url></rdf:Description>" ;
	queryall_query:inRobotsTxt "true"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int .

bio2rdf_query:namespaceuricount a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "false"^^xsd:boolean ;
	dc:title "namespaceuricount" ;
	queryall_query:handleAllNamespaces "true"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^namespaceuricount/([\\w-]+)" ;
	queryall_query:templateString "SELECT count(*) WHERE { ${graphStart} ?s ?p ?o . FILTER(isuri(?o)) ${graphEnd} }" ;
	queryall_query:queryUriTemplateString "${authority}namespaceuricount/${urlEncoded_input_1}" ;
	queryall_query:standardUriTemplateString "${authority}ns/${urlEncoded_input_1}#" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputUrlEncoded_normalisedStandardUri}\"><ns0pred:xNamespaceObjectUriCount xmlns:ns0pred=\"${defaultHostAddress}bio2rdf_resource:\" rdf:resource=\"${xmlEncoded_inputUrlEncoded_normalisedQueryUri}\"/></rdf:Description>" ;
	queryall_query:inRobotsTxt "true"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:includeThenExclude ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int ;
	queryall_query:includeQueryType bio2rdf_query:nsinterlinksbetweentypes , bio2rdf_query:namespacecount , bio2rdf_query:namespaceuricount .

bio2rdf_query:ihop a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "false"^^xsd:boolean ;
	dc:title "ihop" ;
	queryall_query:handleAllNamespaces "false"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^ihop/([\\w-]+):(.+)" ;
	queryall_query:templateString "" ;
	queryall_query:queryUriTemplateString "${authority}ihop/${input_1}${separator}${input_2}" ;
	queryall_query:standardUriTemplateString "${authority}${input_1}${separator}${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputUrlEncoded_normalisedStandardUri}\"><ns0pred:ihopUrl xmlns:ns0pred=\"${defaultHostAddress}bio2rdf_resource:\">${xmlEncoded_inputUrlEncoded_normalisedQueryUri} </ns0pred:ihopUrl></rdf:Description>" ;
	queryall_query:inRobotsTxt "true"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:namespaceToHandle bio2rdf_ns:pubmed ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int .

bio2rdf_query:constructfromlowercase a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "true"^^xsd:boolean ;
	dc:title "constructfromlowercase" ;
	queryall_query:handleAllNamespaces "true"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^([\\w-]+):(.+)" ;
	queryall_query:templateString "CONSTRUCT { <${inputUrlEncoded_privateuppercase_normalisedStandardUri}> ?p ?o . } WHERE { ${graphStart} <${inputUrlEncoded_privatelowercase_endpointSpecificUri}> ?p ?o . ${graphEnd}  } ${limit} ${sparqlOffset}" ;
	queryall_query:queryUriTemplateString "${authority}${input_1}${separator}${input_2}" ;
	queryall_query:standardUriTemplateString "${authority}${input_1}${separator}${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputUrlEncoded_privateuppercase_normalisedStandardUri}\"><ns0pred:sameAs xmlns:ns0pred=\"http://www.w3.org/2002/07/owl#\" rdf:resource=\"${xmlEncoded_inputUrlEncoded_privatelowercase_endpointSpecificUri}\"/><ns0pred:sameAs xmlns:ns0pred=\"http://www.w3.org/2002/07/owl#\" rdf:resource=\"${xmlEncoded_inputUrlEncoded_privatelowercase_normalisedStandardUri}\"/></rdf:Description>" ;
	queryall_query:inRobotsTxt "false"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int ;
	queryall_query:includeQueryType bio2rdf_query:constructfromlowercase .

bio2rdf_query:countlinksbynamespacefromlowercase a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "false"^^xsd:boolean ;
	dc:title "countlinksnsfromlowercase" ;
	queryall_query:handleAllNamespaces "true"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^countlinksns/([\\w-]+)/([\\w-]+):(.+)" ;
	queryall_query:templateString "CONSTRUCT { <${inputUrlEncoded_privateuppercase_normalisedQueryUri}> <http://bio2rdf.org/bio2rdf_resource:hasNamespaceLinkCountResult> <${defaultHostAddress}linknsresultref/${urlEncoded_endpointUrl}/${urlEncoded_graphUri}/${urlEncoded_input_2}:${urlEncoded_uppercase_input_3}> . <${defaultHostAddress}linknsresultref/${urlEncoded_endpointUrl}/${urlEncoded_graphUri}/${urlEncoded_input_2}:${urlEncoded_uppercase_input_3}> <http://bio2rdf.org/bio2rdf_resource:sparqlEndpointUrl> <${endpointUrl}> .  <${defaultHostAddress}linknsresultref/${urlEncoded_endpointUrl}/${urlEncoded_graphUri}/${urlEncoded_input_2}:${urlEncoded_uppercase_input_3}> <http://bio2rdf.org/bio2rdf_resource:linksFromNamespace> <${defaultHostAddress}ns:${urlEncoded_input_1}#> .  <${defaultHostAddress}linknsresultref/${urlEncoded_endpointUrl}/${urlEncoded_graphUri}/${urlEncoded_input_2}:${urlEncoded_uppercase_input_3}> <http://bio2rdf.org/bio2rdf_resource:sparqlGraphUri> \"${graphUri}\" .  <${defaultHostAddress}linknsresultref/${urlEncoded_endpointUrl}/${urlEncoded_graphUri}/${urlEncoded_input_2}:${urlEncoded_uppercase_input_3}> <http://bio2rdf.org/bio2rdf_resource:hasLinkCount> `(select (count(?s)) as ?countS where { ${graphStart} ?s ?p <${inputUrlEncoded_privatelowercase_endpointSpecificUri}> . ${graphEnd} })` } where { ?s1 ?p1 ?o1 } limit 1" ;
	queryall_query:queryUriTemplateString "${authority}countlinksns/${input_1}/${input_2}${separator}${input_3}" ;
	queryall_query:standardUriTemplateString "${authority}${input_2}${separator}${input_3}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputUrlEncoded_privateuppercase_normalisedStandardUri}\"><ns0pred:xNamespaceCountLinks xmlns:ns0pred=\"${defaultHostAddress}bio2rdf_resource:\" rdf:resource=\"${xmlEncoded_inputUrlEncoded_privateuppercase_normalisedQueryUri}\"/><ns0pred:xCountLinks xmlns:ns0pred=\"${defaultHostAddress}bio2rdf_resource:\" rdf:resource=\"${defaultHostAddress}countlinks/${xmlEncoded_urlEncoded_input_2}:${xmlEncoded_urlEncoded_uppercase_input_3}\"/><ns0pred:sameAs xmlns:ns0pred=\"http://www.w3.org/2002/07/owl#\" rdf:resource=\"${xmlEncoded_inputUrlEncoded_privatelowercase_endpointSpecificUri}\"/><ns0pred:sameAs xmlns:ns0pred=\"http://www.w3.org/2002/07/owl#\" rdf:resource=\"${xmlEncoded_inputUrlEncoded_privatelowercase_normalisedStandardUri}\"/></rdf:Description>" ;
	queryall_query:inRobotsTxt "true"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int , "2"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int ;
	queryall_query:includeQueryType bio2rdf_query:countlinksbynamespacefromlowercase .

bio2rdf_query:lsidproxyinsertion a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "false"^^xsd:boolean ;
	dc:title "lsidproxyinsertion" ;
	queryall_query:handleAllNamespaces "true"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "false"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^urn:lsid:bio2rdf.org:([\\w-]+):(.+)" ;
	queryall_query:templateString "" ;
	queryall_query:queryUriTemplateString "${authority}urn:lsid:bio2rdf.org:${input_1}${separator}${input_2}" ;
	queryall_query:standardUriTemplateString "${authority}${input_1}${separator}${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputUrlEncoded_normalisedStandardUri}\"><ns0pred:xProxyLsid xmlns:ns0pred=\"${defaultHostAddress}bio2rdf_resource:\" rdf:resource=\"${xmlEncoded_inputUrlEncoded_normalisedQueryUri}\"/></rdf:Description>" ;
	queryall_query:inRobotsTxt "false"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int ;
	queryall_query:includeQueryType bio2rdf_query:lsidproxyinsertion .

bio2rdf_query:linksfromlowercase a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "true"^^xsd:boolean ;
	dc:title "linksfromlowercase" ;
	queryall_query:handleAllNamespaces "true"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "false"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^links/([\\w-]+):(.+)" ;
	queryall_query:templateString "CONSTRUCT { ?s ?p <${inputUrlEncoded_privateuppercase_normalisedStandardUri}> . ?s a ?linkedRecordType . ?s <http://www.w3.org/2000/01/rdf-schema#label> ?label . ?s <http://purl.org/dc/elements/1.1/title> ?title . ?s <http://www.w3.org/2004/02/skos/core#prefLabel> ?skoslabel . } WHERE {  ${graphStart}  ?s ?p <${inputUrlEncoded_privatelowercase_endpointSpecificUri}> . OPTIONAL { ?s a ?linkedRecordType . } OPTIONAL { ?s <http://www.w3.org/2000/01/rdf-schema#label> ?label . } OPTIONAL { ?s <http://purl.org/dc/elements/1.1/title> ?title . } OPTIONAL { ?s <http://www.w3.org/2004/02/skos/core#prefLabel> ?skoslabel . }${graphEnd}  } ${limit} ${sparqlOffset}" ;
	queryall_query:queryUriTemplateString "${authority}links/${input_1}${separator}${input_2}" ;
	queryall_query:standardUriTemplateString "${authority}${input_1}${separator}${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputUrlEncoded_privateuppercase_normalisedStandardUri}\"><ns0pred:xLinks xmlns:ns0pred=\"${defaultHostAddress}bio2rdf_resource:\" rdf:resource=\"${xmlEncoded_inputUrlEncoded_privateuppercase_normalisedQueryUri}\"/><ns0pred:sameAs xmlns:ns0pred=\"http://www.w3.org/2002/07/owl#\" rdf:resource=\"${xmlEncoded_inputUrlEncoded_privatelowercase_endpointSpecificUri}\"/><ns0pred:sameAs xmlns:ns0pred=\"http://www.w3.org/2002/07/owl#\" rdf:resource=\"${xmlEncoded_inputUrlEncoded_privatelowercase_normalisedStandardUri}\"/></rdf:Description>" ;
	queryall_query:inRobotsTxt "true"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int .

bio2rdf_query:unknownquery a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "true"^^xsd:boolean ;
    queryall_query:isPageable "false"^^xsd:boolean ;
	dc:title "unknownquery" ;
	queryall_query:handleAllNamespaces "false"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "false"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^unknownquery/(.+)" ;
	queryall_query:templateString "" ;
	queryall_query:queryUriTemplateString "${defaultHostAddress}${queryString}" ;
	queryall_query:standardUriTemplateString "${defaultHostAddress}${queryString}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputUrlEncoded_normalisedStandardUri}\"><ns0pred:containsUnknownQuery xmlns:ns0pred=\"${defaultHostAddress}bio2rdf_resource:\" rdf:resource=\"${xmlEncoded_inputUrlEncoded_normalisedQueryUri}\"/><rdf:type xmlns:ns0pred=\"${defaultHostAddress}bio2rdf_resource:\" rdf:resource=\"http://bio2rdf.org/bio2rdf_resource:Error\"/><rdf:type xmlns:ns0pred=\"${defaultHostAddress}bio2rdf_resource:\" rdf:resource=\"http://bio2rdf.org/bio2rdf_resource:UnknownQueryError\"/></rdf:Description>" ;
	queryall_query:inRobotsTxt "true"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:hasPublicIdentifierIndex "0"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "0"^^xsd:int ;
	queryall_query:includeQueryType bio2rdf_query:unknownquery .

bio2rdf_query:htmlfromlowercase a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "false"^^xsd:boolean ;
	dc:title "htmlfromlowercase" ;
	queryall_query:handleAllNamespaces "true"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^html/([\\w-]+):(.+)" ;
	queryall_query:templateString "" ;
	queryall_query:queryUriTemplateString "${authority}html/${input_1}${separator}${input_2}" ;
	queryall_query:standardUriTemplateString "${authority}${input_1}${separator}${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputUrlEncoded_privateuppercase_normalisedStandardUri}\"><ns0pred:url xmlns:ns0pred=\"${defaultHostAddress}bio2rdf_resource:\">${xmlEncoded_inputUrlEncoded_privateuppercase_normalisedQueryUri}</ns0pred:url></rdf:Description>" ;
	queryall_query:inRobotsTxt "true"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int .

bio2rdf_query:linkstonamespace a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "true"^^xsd:boolean ;
	dc:title "linkstonamespace" ;
	queryall_query:handleAllNamespaces "true"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^linkstonamespace/([\\w-]+)/([\\w-]+):(.+)" ;
	queryall_query:templateString "CONSTRUCT { <${inputUrlEncoded_normalisedStandardUri}> ?p ?o . } WHERE { ${graphStart} <${inputUrlEncoded_endpointSpecificUri}> ?p ?o . FILTER ( isUri(?o) && regex( str(?o), \"${inputUrlEncoded_endpointSpecificQueryUri}\" ) ) ${graphEnd} } ${limit} ${sparqlOffset}" ;
	queryall_query:queryUriTemplateString "${authority}${input_1}${separator}" ;
	queryall_query:standardUriTemplateString "${authority}${input_2}${separator}${input_3}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputUrlEncoded_normalisedStandardUri}\"><ns0pred:xLinksToNamespace xmlns:ns0pred=\"${defaultHostAddress}bio2rdf_resource:\" rdf:resource=\"${defaultHostAddress}linkstonamespace/${xmlEncoded_urlEncoded_input_1}/${xmlEncoded_urlEncoded_input_2}${separator}${xmlEncoded_urlEncoded_input_3}\"/></rdf:Description>" ;
	queryall_query:inRobotsTxt "true"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int , "2"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "2"^^xsd:int .

bio2rdf_query:unsafelinkstonamespace a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "true"^^xsd:boolean ;
	dc:title "unsafelinkstonamespace" ;
	queryall_query:handleAllNamespaces "true"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^linkstonamespace/([\\w-]+)/([\\w-]+):(.+)" ;
	queryall_query:templateString "CONSTRUCT { <${inputUrlEncoded_normalisedStandardUri}> ?p ?o . } WHERE { ${graphStart} <${inputUrlEncoded_endpointSpecificUri}> ?p ?o . FILTER ( isUri(?o) && regex( str(?o), \"${ntriplesEncoded_endpointSpecificQueryUri}\" ) ) ${graphEnd} } ${limit} ${sparqlOffset}" ;
	queryall_query:queryUriTemplateString "${authority}${input_1}${separator}" ;
	queryall_query:standardUriTemplateString "${authority}${input_2}${separator}${input_3}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputUrlEncoded_normalisedStandardUri}\"><ns0pred:xLinksToNamespace xmlns:ns0pred=\"${defaultHostAddress}bio2rdf_resource:\" rdf:resource=\"${defaultHostAddress}linkstonamespace/${xmlEncoded_urlEncoded_input_1}/${xmlEncoded_urlEncoded_input_2}${separator}${xmlEncoded_urlEncoded_input_3}\"/></rdf:Description>" ;
	queryall_query:inRobotsTxt "true"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int , "2"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "2"^^xsd:int .

bio2rdf_query:homepage a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "false"^^xsd:boolean ;
	dc:title "homepage" ;
	queryall_query:handleAllNamespaces "true"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^homepage/([\\w-]+)" ;
	queryall_query:templateString "" ;
	queryall_query:queryUriTemplateString "${authority}homepage/${input_1}" ;
	queryall_query:standardUriTemplateString "${authority}ns:${input_1}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputUrlEncoded_privateuppercase_normalisedStandardUri}\"><ns0pred:homepageUrl xmlns:ns0pred=\"${defaultHostAddress}bio2rdf_resource:\">${xmlEncoded_inputUrlEncoded_privateuppercase_normalisedQueryUri}</ns0pred:homepageUrl></rdf:Description>" ;
	queryall_query:inRobotsTxt "true"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int .

bio2rdf_query:lsidstandardinsertion a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "false"^^xsd:boolean ;
	dc:title "lsidstandardinsertion" ;
	queryall_query:handleAllNamespaces "true"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "false"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^urn:lsid:bio2rdf.org:([\\w-]+):(.+)" ;
	queryall_query:templateString "" ;
	queryall_query:queryUriTemplateString "urn:lsid:bio2rdf.org:${input_1}${separator}${input_2}" ;
	queryall_query:standardUriTemplateString "${authority}${input_1}${separator}${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputUrlEncoded_normalisedStandardUri}\"><ns0pred:xLsid xmlns:ns0pred=\"${defaultHostAddress}bio2rdf_resource:\" rdf:resource=\"${xmlEncoded_inputUrlEncoded_normalisedQueryUri}\"/></rdf:Description>" ;
	queryall_query:inRobotsTxt "false"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int ;
	queryall_query:includeQueryType bio2rdf_query:lsidstandardinsertion .

bio2rdf_query:license a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "false"^^xsd:boolean ;
	dc:title "license" ;
	queryall_query:handleAllNamespaces "true"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^license/([\\w-]+):(.+)" ;
	queryall_query:templateString "" ;
	queryall_query:queryUriTemplateString "${authority}license/${input_1}${separator}${input_2}" ;
	queryall_query:standardUriTemplateString "${authority}${input_1}${separator}${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputPlusUrlEncoded_normalisedStandardUri}\"><ns0pred:rights xmlns:ns0pred=\"http://purl.org/dc/terms/\" rdf:resource=\"${xmlEncoded_endpointUrl}\"/></rdf:Description>" ;
	queryall_query:inRobotsTxt "true"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int ;
	queryall_query:includeQueryType bio2rdf_query:license .

bio2rdf_query:licenseendpoint a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "false"^^xsd:boolean ;
	dc:title "A direct reference to the endpoint without using a redirect URL" ;
	queryall_query:handleAllNamespaces "true"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^([\\w-]+):(.+)" ;
	queryall_query:templateString "" ;
	queryall_query:queryUriTemplateString "${authority}license/${input_1}${separator}${input_2}" ;
	queryall_query:standardUriTemplateString "${authority}${input_1}${separator}${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputUrlEncoded_normalisedStandardUri}\"><ns0pred:rights xmlns:ns0pred=\"http://purl.org/dc/terms/\" rdf:resource=\"${xmlEncoded_inputUrlEncoded_normalisedQueryUri}\"/></rdf:Description>" ;
	queryall_query:inRobotsTxt "true"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int ;
	queryall_query:includeQueryType bio2rdf_query:licenseendpoint .

bio2rdf_query:plusurlencodedlicense a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "false"^^xsd:boolean ;
	dc:title "license" ;
	queryall_query:handleAllNamespaces "true"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^license/([\\w-]+):(.+)" ;
	queryall_query:templateString "" ;
	queryall_query:queryUriTemplateString "${authority}license/${input_1}${separator}${input_2}" ;
	queryall_query:standardUriTemplateString "${authority}${input_1}${separator}${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputPlusUrlEncoded_normalisedStandardUri}\"><ns0pred:rights xmlns:ns0pred=\"http://purl.org/dc/terms/\" rdf:resource=\"${xmlEncoded_endpointUrl}\"/></rdf:Description>" ;
	queryall_query:inRobotsTxt "true"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int ;
    queryall_query:includeQueryType bio2rdf_query:plusurlencodedlicense .

bio2rdf_query:plusurlencodedlicenseendpoint a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "false"^^xsd:boolean ;
	dc:title "license" ;
	queryall_query:handleAllNamespaces "true"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^([\\w-]+):(.+)" ;
	queryall_query:templateString "" ;
	queryall_query:queryUriTemplateString "${authority}license/${input_1}${separator}${input_2}" ;
	queryall_query:standardUriTemplateString "${authority}${input_1}${separator}${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputPlusUrlEncoded_normalisedStandardUri}\"><ns0pred:rights xmlns:ns0pred=\"http://purl.org/dc/terms/\" rdf:resource=\"${xmlEncoded_inputPlusUrlEncoded_normalisedQueryUri}\"/></rdf:Description>" ;
	queryall_query:inRobotsTxt "true"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int ;
    queryall_query:includeQueryType bio2rdf_query:plusurlencodedlicenseendpoint .


bio2rdf_query:countlinks a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "false"^^xsd:boolean ;
	dc:title "countlinks" ;
	queryall_query:handleAllNamespaces "true"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "false"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^countlinks/([\\w-]+):(.+)" ;
	queryall_query:templateString "CONSTRUCT { <${inputUrlEncoded_normalisedQueryUri}> <http://bio2rdf.org/bio2rdf_resource:hasLinkCountResult> <${defaultHostAddress}linkresultref/${urlEncoded_endpointUrl}/${urlEncoded_graphUri}/${urlEncoded_input_1}:${urlEncoded_input_2}> . <${defaultHostAddress}linkresultref/${urlEncoded_endpointUrl}/${urlEncoded_graphUri}/${urlEncoded_input_1}:${urlEncoded_input_2}> <http://bio2rdf.org/bio2rdf_resource:sparqlEndpointUrl> <${endpointUrl}> .  <${defaultHostAddress}linkresultref/${urlEncoded_endpointUrl}/${urlEncoded_graphUri}/${urlEncoded_input_1}:${urlEncoded_input_2}> <http://bio2rdf.org/bio2rdf_resource:sparqlGraphUri> \"${graphUri}\" . <${defaultHostAddress}linkresultref/${urlEncoded_endpointUrl}/${urlEncoded_graphUri}/${urlEncoded_input_1}:${urlEncoded_input_2}> <http://bio2rdf.org/bio2rdf_resource:hasLinkCount> `(select (count(?s)) as ?countS where { ${graphStart} ?s ?p <${inputUrlEncoded_endpointSpecificUri}> . ${graphEnd} })` } where { ?s1 ?p1 ?o1 } limit 1" ;
	queryall_query:queryUriTemplateString "${authority}countlinks/${input_1}${separator}${input_2}" ;
	queryall_query:standardUriTemplateString "${authority}${input_1}${separator}${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputUrlEncoded_normalisedStandardUri}\"><ns0pred:xCountLinks xmlns:ns0pred=\"${defaultHostAddress}bio2rdf_resource:\" rdf:resource=\"${xmlEncoded_inputUrlEncoded_normalisedQueryUri}\"/></rdf:Description>" ;
	queryall_query:inRobotsTxt "true"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int ;
	queryall_query:includeQueryType bio2rdf_query:construct , bio2rdf_query:countlinks .

bio2rdf_query:virtuosobifcontainsquicksearchbynamespace a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "true"^^xsd:boolean ;
	dc:title "virtuosobifcontainsquicksearchbynamespace" ;
	queryall_query:handleAllNamespaces "true"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^quicksearchns/([\\w-]+)/(.+)" ;
	queryall_query:templateString "CONSTRUCT { <${inputUrlEncoded_normalisedQueryUri}> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://bio2rdf.org/bio2rdf_resource:SearchResults> . <${inputUrlEncoded_normalisedQueryUri}> <http://bio2rdf.org/bio2rdf_resource:hasSearchResult> ?s .  <${inputUrlEncoded_normalisedQueryUri}> <http://www.w3.org/2000/01/rdf-schema#seeAlso> ?s . ?s <http://www.w3.org/2000/01/rdf-schema#label> ?label . ?s <http://purl.org/dc/elements/1.1/title> ?title . ?s <http://purl.org/dc/terms/title> ?dctermstitle . ?s <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> ?type . ?s <http://www.w3.org/2004/02/skos/core#prefLabel> ?skoslabel . ?s ?p ?o .  } WHERE { ${graphStart} ?s ?p ?o . FILTER(bif:contains(?o, '\"${ntriplesEncoded_input_2}\"')) OPTIONAL { ?s <http://www.w3.org/2000/01/rdf-schema#label> ?label . } OPTIONAL { ?s <http://purl.org/dc/elements/1.1/title> ?title . }  OPTIONAL{ ?s <http://purl.org/dc/terms/title> ?dctermstitle . }  OPTIONAL{ ?s <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> ?type . } OPTIONAL { ?s <http://www.w3.org/2004/02/skos/core#prefLabel> ?skoslabel . } ${graphEnd} } ${quicklimit} ${sparqlOffset}" ;
	queryall_query:queryUriTemplateString "${authority}quicksearchns/${urlEncoded_input_1}/${urlEncoded_input_2}" ;
	queryall_query:standardUriTemplateString "${authority}quicksearchns/${urlEncoded_input_1}/${urlEncoded_input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputUrlEncoded_normalisedStandardUri}\"><ns0pred:hasGlobalSearch xmlns:ns0pred=\"${defaultHostAddress}bio2rdf_resource:\" rdf:resource=\"${defaultHostAddress}search/${xmlEncoded_urlEncoded_input_2}\"/></rdf:Description>" ;
	queryall_query:inRobotsTxt "true"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int ;
	queryall_query:includeQueryType bio2rdf_query:virtuosobifcontainsquicksearchbynamespace .

bio2rdf_query:virtuosobifcontainssearchbynamespace a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "true"^^xsd:boolean ;
	dc:title "virtuosobifcontainssearchbynamespace" ;
	queryall_query:handleAllNamespaces "true"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^searchns/([\\w-]+)/(.+)" ;
	queryall_query:templateString "CONSTRUCT { <${inputUrlEncoded_normalisedQueryUri}> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://bio2rdf.org/bio2rdf_resource:SearchResults> . <${inputUrlEncoded_normalisedQueryUri}> <http://bio2rdf.org/bio2rdf_resource:hasSearchResult> ?s .  <${inputUrlEncoded_normalisedQueryUri}> <http://www.w3.org/2000/01/rdf-schema#seeAlso> ?s . ?s <http://www.w3.org/2000/01/rdf-schema#label> ?label . ?s <http://purl.org/dc/elements/1.1/title> ?title . ?s <http://purl.org/dc/terms/title> ?dctermstitle . ?s <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> ?type . ?s <http://www.w3.org/2004/02/skos/core#prefLabel> ?skoslabel . ?s ?p ?o .  } WHERE { ${graphStart} ?s ?p ?o . FILTER(bif:contains(?o, '\"${ntriplesEncoded_input_2}\"')) OPTIONAL { ?s <http://www.w3.org/2000/01/rdf-schema#label> ?label . } OPTIONAL { ?s <http://purl.org/dc/elements/1.1/title> ?title . }  OPTIONAL{ ?s <http://purl.org/dc/terms/title> ?dctermstitle . }  OPTIONAL{ ?s <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> ?type . } OPTIONAL { ?s <http://www.w3.org/2004/02/skos/core#prefLabel> ?skoslabel . } ${graphEnd} } ${limit} ${sparqlOffset}" ;
	queryall_query:queryUriTemplateString "${authority}searchns/${urlEncoded_input_1}/${urlEncoded_input_2}" ;
	queryall_query:standardUriTemplateString "${authority}searchns/${urlEncoded_input_1}/${urlEncoded_input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputUrlEncoded_normalisedStandardUri}\"><ns0pred:hasGlobalSearch xmlns:ns0pred=\"${defaultHostAddress}bio2rdf_resource:\" rdf:resource=\"${defaultHostAddress}search/${xmlEncoded_urlEncoded_input_2}\"/></rdf:Description>" ;
	queryall_query:inRobotsTxt "true"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int ;
	queryall_query:includeQueryType bio2rdf_query:virtuosobifcontainssearchbynamespace .

bio2rdf_query:sparqlregexsearchbynamespace a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "true"^^xsd:boolean ;
	dc:title "sparqlregexsearchbynamespace" ;
	queryall_query:handleAllNamespaces "true"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^searchns/([\\w-]+)/(.+)" ;
	queryall_query:templateString "CONSTRUCT { <${inputUrlEncoded_normalisedQueryUri}> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://bio2rdf.org/bio2rdf_resource:SearchResults> . <${inputUrlEncoded_normalisedQueryUri}> <http://bio2rdf.org/bio2rdf_resource:hasSearchResult> ?s .  <${inputUrlEncoded_normalisedQueryUri}> <http://www.w3.org/2000/01/rdf-schema#seeAlso> ?s . ?s <http://www.w3.org/2000/01/rdf-schema#label> ?label . ?s <http://purl.org/dc/elements/1.1/title> ?title . ?s <http://purl.org/dc/terms/title> ?dctermstitle . ?s <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> ?type . ?s <http://www.w3.org/2004/02/skos/core#prefLabel> ?skoslabel . ?s ?p ?o .  } WHERE { ${graphStart} ?s ?p ?o . FILTER(regex(str(?o), \"${ntriplesEncoded_input_2}\")) OPTIONAL { ?s <http://www.w3.org/2000/01/rdf-schema#label> ?label . } OPTIONAL { ?s <http://purl.org/dc/elements/1.1/title> ?title . } OPTIONAL{ ?s <http://purl.org/dc/terms/title> ?dctermstitle . } OPTIONAL{ ?s <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> ?type . } OPTIONAL { ?s <http://www.w3.org/2004/02/skos/core#prefLabel> ?skoslabel . } ${graphEnd} } ${limit} ${sparqlOffset}" ;
	queryall_query:queryUriTemplateString "${authority}searchns/${urlEncoded_input_1}/${urlEncoded_input_2}" ;
	queryall_query:standardUriTemplateString "${authority}searchns/${urlEncoded_input_1}/${urlEncoded_input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputUrlEncoded_normalisedStandardUri}\"><ns0pred:hasGlobalSearch xmlns:ns0pred=\"${defaultHostAddress}bio2rdf_resource:\" rdf:resource=\"${defaultHostAddress}search/${xmlEncoded_urlEncoded_input_2}\"/></rdf:Description>" ;
	queryall_query:inRobotsTxt "true"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int ;
	queryall_query:includeQueryType bio2rdf_query:sparqlregexsearchbynamespace .

bio2rdf_query:constructnoextras a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "true"^^xsd:boolean ;
	dc:title "constructnoextras" ;
	queryall_query:handleAllNamespaces "true"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "true"^^xsd:boolean ;
	queryall_query:inputRegex "^constructnoextras/([\\w-]+):(.+)" ;
	queryall_query:templateString "CONSTRUCT { <${inputUrlEncoded_normalisedStandardUri}> ?p ?o . } WHERE { ${graphStart} <${inputUrlEncoded_endpointSpecificUri}> ?p ?o . ${graphEnd}  } ${limit} ${sparqlOffset}" ;
	queryall_query:queryUriTemplateString "${authority}constructnoextras/${input_1}${separator}${input_2}" ;
	queryall_query:standardUriTemplateString "${authority}${input_1}${separator}${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "" ;
	queryall_query:inRobotsTxt "false"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int .

bio2rdf_query:constructnoinclude a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "true"^^xsd:boolean ;
	dc:title "constructnoextras" ;
	queryall_query:handleAllNamespaces "true"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "true"^^xsd:boolean ;
	queryall_query:inputRegex "^([\\w-]+):(.+)" ;
	queryall_query:templateString "CONSTRUCT { <${inputUrlEncoded_normalisedStandardUri}> ?p ?o . } WHERE { ${graphStart} <${inputUrlEncoded_endpointSpecificUri}> ?p ?o . ${graphEnd}  } ${limit} ${sparqlOffset}" ;
	queryall_query:queryUriTemplateString "${authority}constructnoextras/${input_1}${separator}${input_2}" ;
	queryall_query:standardUriTemplateString "${authority}${input_1}${separator}${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "" ;
	queryall_query:inRobotsTxt "false"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int .

bio2rdf_query:suppliers a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "false"^^xsd:boolean ;
	dc:title "suppliers" ;
	queryall_query:handleAllNamespaces "true"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^suppliers/([\\w-]+):(.+)" ;
	queryall_query:templateString "" ;
	queryall_query:queryUriTemplateString "${authority}suppliers/${input_1}${separator}${input_2}" ;
	queryall_query:standardUriTemplateString "${authority}${input_1}${separator}${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputUrlEncoded_normalisedStandardUri}\"><ns0pred:suppliers xmlns:ns0pred=\"${defaultHostAddress}bio2rdf_resource:\">${xmlEncoded_inputUrlEncoded_normalisedQueryUri}</ns0pred:suppliers></rdf:Description>" ;
	queryall_query:inRobotsTxt "true"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int .

bio2rdf_query:taglabels a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "true"^^xsd:boolean ;
	dc:title "taglabels" ;
	queryall_query:handleAllNamespaces "false"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^([\\w-]+):(.+)" ;
	queryall_query:templateString "PREFIX tags: <http://www.holygoat.co.uk/owl/redwood/0.1/tags/> PREFIX terms: <http://purl.org/net/terms#> CONSTRUCT { ?taggingInstance rdf:type terms:TermInstance . ?taggingInstance terms:subject <${inputUrlEncoded_normalisedStandardUri}> . ?taggingInstance terms:term ?tagLabelUri . ?tagLabelUri tags:name ?tagLabelName . } WHERE { ${graphStart} ?taggingInstance rdf:type terms:TermInstance . ?taggingInstance terms:taggedBy ?foafUser . ?taggingInstance terms:taggedOn ?taggedOn .         ?taggingInstance terms:subject <${inputUrlEncoded_endpointSpecificUri}> . OPTIONAL{ ?taggingInstance terms:predicate ?termPredicate .} OPTIONAL{?taggingInstance terms:object ?termObject .} ?taggingInstance terms:term ?tagLabelUri . ?tagLabelUri tags:name ?tagLabelName . FILTER(sameTerm(?foafUser, <http://purl.org/net/terms#AnonymousUser>)) ${graphEnd} } ${limit} ${sparqlOffset}" ;
	queryall_query:queryUriTemplateString "${authority}${input_1}${separator}${input_2}" ;
	queryall_query:standardUriTemplateString "${authority}${input_1}${separator}${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "" ;
	queryall_query:inRobotsTxt "false"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:includeThenExclude ;
	queryall_query:namespaceToHandle bio2rdf_ns:geneid , bio2rdf_ns:mquter_gene , bio2rdf_ns:go , bio2rdf_ns:keywords , bio2rdf_ns:term , bio2rdf_ns:terminstance ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int .

bio2rdf_query:primaryreverseconstructfromdcidentifier a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "true"^^xsd:boolean ;
	dc:title "primaryreverseconstructfromdcidentifier" ;
	queryall_query:handleAllNamespaces "true"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^([\\w-]+):(.+)" ;
	queryall_query:templateString "CONSTRUCT { <${normalisedStandardUri}> <http://bio2rdf.org/bio2rdf_resource:linkedToFrom> ?s . ?s ?p ?o} WHERE { ${graphStart} ?s <http://purl.org/dc/elements/1.1/identifier> ?identifier . FILTER(str(?identifier) = \"${input_1}${separator}${input_2}\") . ?s ?p ?o . ${graphEnd}  } ${limit} ${sparqlOffset}" ;
	queryall_query:queryUriTemplateString "${authority}${input_1}${separator}${input_2}" ;
	queryall_query:standardUriTemplateString "${authority}${input_1}${separator}${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputUrlEncoded_normalisedStandardUri}\"><ns0pred:sameAs xmlns:ns0pred=\"http://www.w3.org/2002/07/owl#\" rdf:resource=\"${xmlEncoded_inputUrlEncoded_endpointSpecificUri}\"/></rdf:Description>" ;
	queryall_query:inRobotsTxt "false"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int ;
	queryall_query:includeQueryType bio2rdf_query:primaryreverseconstructfromdcidentifier .

bio2rdf_query:primaryreverseconstructfromdoi a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "true"^^xsd:boolean ;
	dc:title "primaryreverseconstructfromdoi" ;
	queryall_query:handleAllNamespaces "false"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:namespaceToHandle bio2rdf_ns:doi ;
 	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^([\\w-]+):(.+)" ;
	queryall_query:templateString "CONSTRUCT { <${normalisedStandardUri}> <http://bio2rdf.org/bio2rdf_resource:linkedToFrom> ?s . ?s ?p ?o} WHERE { ${graphStart} ?s <http://purl.org/ontology/bibo/doi> ?doi . FILTER(?str(?doi) = \"${input_2}\") . ?s ?p ?o . ${graphEnd}  } ${limit} ${sparqlOffset}" ;
	queryall_query:queryUriTemplateString "${authority}${input_1}${separator}${input_2}" ;
	queryall_query:standardUriTemplateString "${authority}${input_1}${separator}${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputUrlEncoded_normalisedStandardUri}\"><ns0pred:sameAs xmlns:ns0pred=\"http://www.w3.org/2002/07/owl#\" rdf:resource=\"${xmlEncoded_inputUrlEncoded_endpointSpecificUri}\"/></rdf:Description>" ;
	queryall_query:inRobotsTxt "false"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int ;
	queryall_query:includeQueryType bio2rdf_query:primaryreverseconstructfromdoi .

bio2rdf_query:primaryreverseconstructfromdoifornmrshiftdbspectrum a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "true"^^xsd:boolean ;
	dc:title "primaryreverseconstructfromdoifornmrshiftdbspectrum" ;
	queryall_query:handleAllNamespaces "false"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:namespaceToHandle bio2rdf_ns:doi ;
 	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^([\\w-]+):(.+)" ;
	queryall_query:templateString "CONSTRUCT { <${normalisedStandardUri}> <http://bio2rdf.org/bio2rdf_resource:hasNMRSpectrum> ?spectrum . } WHERE { ${graphStart} ?bib <http://purl.org/ontology/bibo/doi> \"${input_2}\" . ?spectrum <http://purl.org/dc/elements/1.1/source> ?bib . ${graphEnd}  } ${limit} ${sparqlOffset}" ;
	queryall_query:queryUriTemplateString "${authority}${input_1}${separator}${input_2}" ;
	queryall_query:standardUriTemplateString "${authority}${input_1}${separator}${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputUrlEncoded_normalisedStandardUri}\"><ns0pred:sameAs xmlns:ns0pred=\"http://www.w3.org/2002/07/owl#\" rdf:resource=\"${xmlEncoded_inputUrlEncoded_endpointSpecificUri}\"/></rdf:Description>" ;
	queryall_query:inRobotsTxt "false"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int ;
	queryall_query:includeQueryType bio2rdf_query:primaryreverseconstructfromdoifornmrshiftdbspectrum .

bio2rdf_query:counttriples a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "false"^^xsd:boolean ;
	dc:title "counttriples" ;
	queryall_query:handleAllNamespaces "true"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "false"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^counttriples/([\\w-]+):(.+)" ;
	queryall_query:templateString "CONSTRUCT { <${inputUrlEncoded_normalisedQueryUri}> <http://bio2rdf.org/bio2rdf_resource:hasTripleCountResult> <${defaultHostAddress}tripleresultref/${urlEncoded_endpointUrl}/${urlEncoded_graphUri}/${urlEncoded_input_1}:${urlEncoded_input_2}> . <${defaultHostAddress}tripleresultref/${urlEncoded_endpointUrl}/${urlEncoded_graphUri}/${urlEncoded_input_1}:${urlEncoded_input_2}> <http://bio2rdf.org/bio2rdf_resource:sparqlEndpointUrl> <${endpointUrl}> .  <${defaultHostAddress}tripleresultref/${urlEncoded_endpointUrl}/${urlEncoded_graphUri}/${urlEncoded_input_1}:${urlEncoded_input_2}> <http://bio2rdf.org/bio2rdf_resource:sparqlGraphUri> \"${graphUri}\" . <${defaultHostAddress}tripleresultref/${urlEncoded_endpointUrl}/${urlEncoded_graphUri}/${urlEncoded_input_1}:${urlEncoded_input_2}> <http://bio2rdf.org/bio2rdf_resource:hasTripleCount> `(select (count(?o)) as ?countO where { ${graphStart} <${inputUrlEncoded_endpointSpecificUri}> ?p ?o . ${graphEnd} })` } where { ?s1 ?p1 ?o1 } limit 1" ;
	queryall_query:queryUriTemplateString "${authority}counttriples/${input_1}${separator}${input_2}" ;
	queryall_query:standardUriTemplateString "${authority}${input_1}${separator}${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputUrlEncoded_normalisedStandardUri}\"><ns0pred:xCountTriples xmlns:ns0pred=\"${defaultHostAddress}bio2rdf_resource:\" rdf:resource=\"${xmlEncoded_inputUrlEncoded_normalisedQueryUri}\"/></rdf:Description>" ;
	queryall_query:inRobotsTxt "true"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int ;
	queryall_query:includeQueryType bio2rdf_query:construct , bio2rdf_query:counttriples .

bio2rdf_query:prosite2goconstruct a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "true"^^xsd:boolean ;
	dc:title "prosite2goconstruct" ;
	queryall_query:handleAllNamespaces "false"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^([\\w-]+):(.+)" ;
	queryall_query:templateString "CONSTRUCT { <${inputUrlEncoded_normalisedStandardUri}> <http://bio2rdf.org/bio2rdf_resource:has_go_annotation> ?goAnnotation .  } WHERE {  ${graphStart}  ?goAnnotation <http://www.geneontology.org/formats/oboInOwl#hasDbXref> ?o . ?o <http://www.geneontology.org/formats/oboInOwl#hasURI> \"${inputUrlEncoded_endpointSpecificUri}\"^^xsd:anyURI . ${graphEnd}  } ${limit} ${sparqlOffset}" ;
	queryall_query:queryUriTemplateString "${authority}${input_1}${separator}${input_2}" ;
	queryall_query:standardUriTemplateString "${authority}${input_1}${separator}${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "" ;
	queryall_query:inRobotsTxt "false"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:namespaceToHandle bio2rdf_ns:prosite ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int .

bio2rdf_query:medline a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "false"^^xsd:boolean ;
	dc:title "medline" ;
	queryall_query:handleAllNamespaces "false"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^medline/([\\w-]+):(.+)" ;
	queryall_query:templateString "" ;
	queryall_query:queryUriTemplateString "${authority}medline/${input_1}${separator}${input_2}" ;
	queryall_query:standardUriTemplateString "${authority}${input_1}${separator}${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputUrlEncoded_normalisedStandardUri}\"><ns0pred:medlineUrl xmlns:ns0pred=\"${defaultHostAddress}bio2rdf_resource:\">${xmlEncoded_inputUrlEncoded_normalisedQueryUri}</ns0pred:medlineUrl></rdf:Description>" ;
	queryall_query:inRobotsTxt "true"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:namespaceToHandle bio2rdf_ns:pubmed ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int .

bio2rdf_query:similardrugsbygeneid a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "false"^^xsd:boolean ;
	dc:title "similardrugsbygeneid" ;
	queryall_query:handleAllNamespaces "false"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^similardrugsbygeneid/([\\w-]+):(.+)" ;
	queryall_query:templateString "" ;
	queryall_query:queryUriTemplateString "${authority}similardrugsbygeneid/${input_1}${separator}${input_2}" ;
	queryall_query:standardUriTemplateString "${authority}${input_1}${separator}${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputUrlEncoded_normalisedStandardUri}\"><ns0pred:hasSimilarDrugsUrl xmlns:ns0pred=\"${defaultHostAddress}bio2rdf_resource:\">${xmlEncoded_inputUrlEncoded_normalisedQueryUri}</ns0pred:hasSimilarDrugsUrl></rdf:Description>" ;
	queryall_query:inRobotsTxt "true"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:namespaceToHandle bio2rdf_ns:geneid ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int ;
	queryall_query:includeQueryType bio2rdf_query:similardrugsbygeneid .
	
bio2rdf_query:pandit a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "false"^^xsd:boolean ;
	dc:title "similardrugsbygeneid" ;
	queryall_query:handleAllNamespaces "false"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "true"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "false"^^xsd:boolean ;
	queryall_query:inputRegex "^pandit/([\\w-]+):(.+)" ;
	queryall_query:templateString "" ;
	queryall_query:queryUriTemplateString "${authority}pandit/${input_1}${separator}${input_2}" ;
	queryall_query:standardUriTemplateString "${authority}${input_1}${separator}${input_2}" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputUrlEncoded_normalisedStandardUri}\"><ns0pred:hasPanditLinkUrl xmlns:ns0pred=\"${defaultHostAddress}bio2rdf_resource:\">${xmlEncoded_inputUrlEncoded_normalisedQueryUri}</ns0pred:hasSimilarDrugsUrl></rdf:Description>" ;
	queryall_query:inRobotsTxt "true"^^xsd:boolean ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:namespaceToHandle bio2rdf_ns:pfam ;
	queryall_query:hasPublicIdentifierIndex "1"^^xsd:int ;
	queryall_query:hasNamespaceInputIndex "1"^^xsd:int ;
	queryall_query:includeQueryType bio2rdf_query:pandit .
	


bio2rdf_query:I18NTest a queryall_query:Query , queryall_query:RegexInputQuery , queryall_query:SparqlProcessorQuery , queryall_query:RdfOutputQuery ;
    queryall_query:isDummyQueryType "false"^^xsd:boolean ;
    queryall_query:isPageable "false"^^xsd:boolean ;
	dc:title "i18n test" ;
	queryall_query:handleAllNamespaces "false"^^xsd:boolean ;
	queryall_query:isNamespaceSpecific "false"^^xsd:boolean ;
	queryall_query:namespaceMatchMethod queryall_query:namespaceMatchAny ;
	queryall_query:includeDefaults "true"^^xsd:boolean ;
	queryall_query:inputRegex "^i18ntest/$" ;
	queryall_query:templateString "" ;
	queryall_query:queryUriTemplateString "${defaultHostAddress}i18test/" ;
	queryall_query:standardUriTemplateString "${defaultHostAddress}i18test/" ;
	queryall_query:outputRdfFormat "application/rdf+xml" ;
	queryall_query:outputRdfString "<rdf:Description rdf:about=\"${xmlEncoded_inputUrlEncoded_normalisedStandardUri}\"><ns0pred:hasTestLiteral xmlns:ns0pred=\"${defaultHostAddress}bio2rdf_resource:\">    Brisbane ] ist die Hauptstadt des Bundesstaates Queensland im Nordosten Australiens. Die Stadt liegt am Brisbane River nahe an dessen Mündung in die Korallensee. Der Ballungsraum hat 2 Mio. Einwohner. Brisbane ist sowohl katholischer als auch anglikanischer Erzbischofssitz. Ein wichtiger Wirtschaftszweig ist die Erdölindustrie. Brisbane wurde 1824 unter dem Namen Moreton Bay als Strafkolonie gegründet und wurde später nach dem damaligen Gouverneur von New South Wales, Sir Thomas Brisbane benannt. Brisbane ist bekannt für seine Hochschulen, sowie auch für die nördlich und südlich der Stadtgrenze beginnenden Ferienparadiese Sunshine Coast und Gold Coast, für die Meereslage und das allgemein gute Wetter. Im von Abkürzungen geprägten australischen Englisch wird Brisbane gelegentlich auch als Brissie bezeichnet. Darüber hinaus existieren scherzhafte Namensabwandlungen wie Bris Vegas oder Brisneyland, die allerdings nur vereinzelt verwendet werden. Brisbane, is the capital and most populous city in the Australian state of Queensland and the third most populous city in Australia. Brisbane's metropolitan area has a population of over 2 million and constitutes the core of the South East Queensland agglomeration, encompassing more than 3 million people. The Brisbane central business district stands on the original European settlement and is situated inside a bend of the Brisbane River approximately 23 kilometres from its mouth at Moreton Bay. The metropolitan area extends in all directions along the floodplain of the Brisbane River valley between the bay and the Great Dividing Range. While the metropolitan area is governed by several municipalities, a large proportion of central Brisbane is governed by the Brisbane City Council which is Australia's largest Local Government Area by population. Brisbane is named after the river on which it sits which, in turn, was named after Sir Thomas Brisbane, the Governor of New South Wales from 1821 to 1825. The first European settlement in Queensland was a penal colony at Redcliffe, 28 kilometres (17 mi) north of the Brisbane central business district, in 1824. That settlement was soon abandoned and moved to North Quay in 1825. Free settlers were permitted from 1842. Brisbane was chosen as the capital when Queensland was proclaimed a separate colony from New South Wales in 1859. The city played a central role in the Allied campaign during World War II as the South West Pacific headquarters for General Douglas MacArthur. Brisbane has hosted many large cultural and sporting events including the 1982 Commonwealth Games, World Expo '88 and the final Goodwill Games in 2001. Brisbane is the largest economy between Sydney and Singapore and in 2008 it was classified as a gamma world city+ in the World Cities Study Group’s inventory by Loughborough University. It was also rated the 16th most livable city in the world in 2009 by The Economist. Este artículo trata sobre la ciudad de Brisbane. Para saber más sobre el río, véase Río Brisbane. Plantilla:Ficha de localidad Brisbane es la tercera ciudad más grande de Australia. Es la capital del estado de Queensland, en el noreste del país y tiene aproximadamente dos millones de habitantes (estimado en el 2009). Se encuentra al este de la Gran Cordillera Divisoria, al sureste de la cordillera Taylor y muy cercana a la bahía Moretón. Es atravesada por el río Brisbane, que ha sido dragado para facilitar el tránsito de barcos. Hacia el oeste el horizonte está dominado por la presencia del monte Cootha en cuyas faldas se encuentra un planetario y los jardines botánicos. En su cima se encuentra un mirador que ofrece unas vistas magníficas de la ciudad y su ondulante río. Las más importantes estaciones de televisión en el estado de Queensland tienen sus estudios en el monte Cootha. El sector de Southbank, que se ubica en la ribera sur del río Brisbane, se renovó intensamente para acoger la Exposición Internacional de 1988, pasando a convertirse de sus orígenes industriales a un agradable parque de hermosos jardines, donde también se encuentra una playa pública artificial, restaurantes y bares, espacios de esparcimiento y el museo marítimo. Con la construcción del puente peatonal Good Will se puede llegar fácilmente desde el centro de la ciudad a Southbank en tan sólo unos minutos. El área es una de las favoritas de los habitantes de Brisbane para celebrar asados familiares los fines de semana. El municipio de Brisbane ha anunciado un plan de desarrollo que considera la construcción de puentes peatonales adicionales con el fin de hacer la ciudad más accesible a peatones y ciclistas, así como también para incentivar las actividades físicas. La economía se basa en diversas industrias petroquímicas, metalúrgicas, construcciones mecánicas, alimentarias y ferrometalúrgicas. Destaca también su puerto, por el cual exporta carbón y metales. Es también un importante centro cultural y turístico, además de ser centro de nudo ferroviario y aéreo para Queensland. En sus proximidades se encuentra la terminal de un gasoducto y la del oleoducto de Moonie. Brisbane on Queenslandin osavaltion pääkaupunki ja sen suurin kaupunki, mutta myös koko Australian kolmanneksi suurin kaupunki vajaalla kahdella miljoonalla asukkaallaan. Kaupunki sijaitsee Tyynenmeren läheisyydessä Brisbanejoen rannalla Moreton Bayn ja Australian Kordillieerien välisellä rannikkotasangolla Queenslandin kaakkoisosassa. Brisbane è la città più popolosa nello stato australiano del Queensland e la terza città più popolosa dell'Australia. L'area metropolitana di Brisbane ha una popolazione di circa 2 milioni di abitanti. Un residente di Brisbane è comunemente chiamato \"Brisbanite\". Il distretto centrale degli affari di Brisbane è situato sull'insediamento originale, posto all'interno di un'ansa del fiume Brisbane, approssimativamente a 23 km dalla sua foce a Moreton Bay. L'area metropolitana si estende in tutte le direzioni lungo la piana alluvionale della valle del fiume Brisbane, tra la baia e la Gran Catena Divisoria. Poiché la città è governata da numerose municipalità, queste sono accentrate attorno al Concilio della Città di Brisbane che ha giurisdizione sulla più vasta area e popolazione nella Brisbane metropolitana ed è anche l'Area di Governo australiano locale più grande per popolazione. Brisbane prende il nome dal fiume sul quale è sita che, a sua volta, fu chiamato così da Sir Thomas Brisbane, il Governatore del Nuovo Galles del Sud dal 1821 al 1825. Il primo insediamento europeo nel Queensland fu una colonia penale a Redcliffe, 28 km a nord del distretto degli affari di Brisbane, nel 1824. Quell'insediamento fu presto abbandonato e trasferito a North Quay nel 1825. Brisbane fu scelta come capitale quando il Queensland venne proclamato colonia separata dal Nuovo Galles del Sud nel 1859. La città ha giocato un ruolo chiave durante la Seconda Guerra Mondiale, in quanto quartier generale del Pacifico del Sud-Ovest del Generale Douglas MacArthur. Brisbane ha ospitato molti grandi eventi culturali e sportivi fra cui i Giochi del Commonwealth nel 1982, l'Esposizione universale nel 1988 e la finale dei Goodwill Games nel 2001. Nel 2008, Brisbane è stata classificata come \"gamma world city+\" nell'inventario del World Cities Study Group dall'università di Loughborough. È stata anche dichiarata 16ima città più abitabile nel mondo nel 2009 da \"The Economist\". ブリスベン（Brisbane）はオーストラリア連邦クイーンズランド州南東部（サウス・イースト・クイーンズランド地域）に位置する州都。 シドニー、メルボルンに次ぐオーストラリア第三の都市であり、オセアニア有数の世界都市。現地での発音はTemplate:IPA（ブリズベン）であるが、ここでは日本の外務省の表記にならった。 Brisbane is een stad in het oosten van Australië. Het is de hoofdstad van de deelstaat Queensland. De stad is gelegen aan de oostkust van Australië aan de Brisbane River, zo'n 20 kilometer verwijderd van Moreton Bay. Brisbane heeft 1.676.389 inwoners (2006) en is daarmee de derde stad van Australië, na Sydney en Melbourne. Brisbane is vooral bij jonge toeristen populair vanwege de twee grote uitgaansgebieden in de stad. In deze gebieden zijn veel clubs, bars, eet- en uitgaansgelegenheden. De stad heeft een subtropisch klimaat met warme zomers en zeer milde winters. Brisbane ging in 1824 als strafkolonie van start en is vernoemd naar Sir Thomas Brisbane, toenmalig gouverneur van de deelstaat Nieuw-Zuid-Wales. Toen Queensland in 1859 tot aparte deelstaat werd uitgeroepen werd Brisbane tot hoofdstad gekozen. Tot de Tweede Wereldoorlog ontwikkelde de stad zich langzaam. Tijdens WOII was het geallieerde hoofdkwartier van Generaal Douglas MacArthur in Brisbane gevestigd en speelde de stad een centrale rol in de strijd in het zuidwestelijk deel van de Stille Oceaan. In 1982 organiseerde Brisbane de Gemenebestspelen en in 1988 vond de Wereldtentoonstelling er plaats. Vanaf die periode heeft de stad een snelle groei doorgemaakt en is zij uitgegroeid tot de huidige metropool. Brisbane [/Mal:IPA/] er hovedstaden i den australske delstaten Queensland. Byen har ca. 1,8 millioner innbyggere, er Australias raskest voksende by og den tredje største byen i Australia etter Sydney og Melbourne. Gjennom byen renner Brisbane River. Brisbane [ˈbɹɪzbən ˈbɹɪzbən] – miasto w Australii, stolica stanu Queensland, położone u ujścia rzeki Brisbane do zatoki Moreton. Klimat subtropikalny z gorącymi, wilgotnymi latami i ciepłymi, łagodnymi zimami. Ważny ośrodek handlowy, naukowy (3 uniwersytety) i kulturalny (muzea, galeria sztuki); liczne parki (herbarium). Brisbane jest ośrodkiem przemysłu rafineryjnego, gumowego, stoczniowego i maszynowego. Odbywało się tu wiele znaczących wydarzeń kulturalnych i sportowych, m. in. Igrzyska Wspólnoty Narodów (Commonwealth Games) w 1982 r. , Wystawa Światowa (World Expo) w 1988 r. oraz Igrzyska Dobrej Woli w 2001 r. W mieście znajduje się polski konsulat honorowy. Brisbane é a capital do estado de Queensland e terceira maior cidade da Austrália. Brisbane [uttal:ˈbɹɪzbən uttal:ˈbɹɪzbən] är en stad i Australien med 1,9 miljoner invånare. Den är huvudstad i delstaten Queensland samt den tredje största staden i Australien och största stad i Queensland. Brisbane är byggd utefter Brisbane River, som slingrar sig igenom staden och korsas av flera broar. Namnet har staden fått efter Sir Thomas Brisbane, som var guvernör i New South Wales åren 1821-1825. 布里斯班（Template:Lang-en），是澳大利亞昆士蘭州府城，位於澳大利亞本土的東北部，北緣陽光海岸， 南鄰國際觀光勝地黃金海岸市。大都會區人口（包括週圍的衛星城市）200萬餘，是澳大利亞人口第三大都會，僅次於雪梨與墨爾本。 布里斯本靠近太平洋，東面濱臨塔斯曼海，是一個從海岸線、河川和港口往西部內陸發展的都市。其市中心位於布里斯本河畔（Brisbane River），該州即以此為政治和交通主軸再向南北伸展開發。布里斯本國內外機場和國際海港座落於布里斯本河口兩旁。 布里斯本是1982年英聯邦運動會、1988年世界博覽會，以及2001年世界友誼運動會（Goodwill Games）的主辦城市。 Бри́сбен — крупный город на восточном побережье Австралии. Административный центр штата Квинсленд. Население — 1,8 млн человек, это третий по численности город страны. Расположен в излучине Реки Брисбен приблизительно 23 км от ее устья. Brisbane est la capitale et la ville la plus peuplée de l'État du Queensland, en Australie. Située à environ 950 kilomètres au nord de Sydney, sur le fleuve Brisbane, elle s'étend sur une plaine humide bordée de collines, limitée par Moreton Bay et par les premiers contreforts de la cordillère australienne. À quelques kilomètres du centre-ville, le mont Coot-Tha accueille une plate-forme panoramique, un planetarium et des jardins botaniques. Le site de Brisbane est appelé « Mian-Jin » par les aborigènes Turrbal, ce qui signifie « L'endroit pointu ». Troisième ville d'Australie en termes de population, elle compterait 2 millions d'habitants en tenant compte de sa périphérie (Grand Brisbane). La ville doit son nom à sir Thomas Brisbane, le gouverneur de Nouvelle-Galles du Sud de 1821 à 1825. Fondée en 1824 à Redcliffe, à 28 kilomètres du centre-ville actuel, la colonie pénale de Brisbane fut ensuite déplacée en amont, dans une boucle du fleuve Brisbane. Les premiers colons libres purent s'installer à Brisbane en 1842, peu après la fermeture du centre pénitentiaire. En 1859, la scission du nord de la Nouvelle-Galles du Sud donna lieu à la création du Queensland, dont Brisbane devint la capitale. La ville joua un grand rôle pour les forces alliées pendant la Seconde Guerre mondiale et servit de quartier général au général Douglas MacArthur qui commandait les forces alliées du sud-ouest du Pacifique. Plus récemment Brisbane a accueilli les jeux du Commonwealth de 1982, l'exposition universelle Expo '88, et les Goodwill Games de 2001. L'économie de Brisbane est basée sur les industries pétrochimiques, métallurgiques, agroalimentaires et mécaniques. Son port permet l'exportation des ressources naturelles de l'État (charbon, argent, plomb, zinc). La ville est également un important centre culturel et touristique, à peu de distance des stations balnéaires de la Sunshine Coast et de la Gold Coast.</ns0pred:hasTestLiteral></rdf:Description>" ; 
	queryall_query:inRobotsTxt "false"^^xsd:boolean ; 
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude ;
	queryall_query:includeQueryType bio2rdf_query:I18NTest .





