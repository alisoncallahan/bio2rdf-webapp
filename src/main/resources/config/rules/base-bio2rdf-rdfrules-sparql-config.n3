@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix dc: <http://purl.org/dc/elements/1.1/>.
@prefix queryall_profile: <http://purl.org/queryall/profile:> .
@prefix queryall_rdfrule: <http://purl.org/queryall/rdfrule:> .
@prefix bio2rdf_provider: <http://bio2rdf.org/provider:> .
@prefix bio2rdf_query: <http://bio2rdf.org/query:> .
@prefix bio2rdf_rdfrule: <http://bio2rdf.org/rdfrule:> .
@prefix bio2rdf_ns: <http://bio2rdf.org/ns:> .

bio2rdf_rdfrule:sparqlowlsameastrivialdelete a queryall_rdfrule:NormalisationRule , queryall_rdfrule:TransformationRule , queryall_rdfrule:SparqlNormalisationRule , queryall_rdfrule:SparqlConstructRule ;
    queryall_rdfrule:sparqlMode queryall_rdfrule:onlyDeleteMatchingTriples ;
    queryall_rdfrule:sparqlConstructQueryTarget "?myUri <http://www.w3.org/2002/07/owl#sameAs> ?myUri ." ;
    queryall_rdfrule:sparqlWherePattern "?myUri <http://www.w3.org/2002/07/owl#sameAs> ?myUri ." ;
	queryall_rdfrule:stage queryall_rdfrule:afterResultsToPool ;
	dc:title "Deletes trivial owl:sameAs rdf triples that are generated by some providers" ;
	queryall_rdfrule:order "100"^^xsd:int ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude .

bio2rdf_rdfrule:removeemptynamespaceucscuris a queryall_rdfrule:NormalisationRule , queryall_rdfrule:TransformationRule , queryall_rdfrule:SparqlNormalisationRule , queryall_rdfrule:SparqlConstructRule ;
    queryall_rdfrule:sparqlMode queryall_rdfrule:onlyDeleteMatchingTriples ;
    queryall_rdfrule:sparqlConstructQueryTarget "?myUri ?property <http://bio2rdf.org/ucsc:> . " ;
    queryall_rdfrule:sparqlWherePattern "?myUri ?property <http://bio2rdf.org/ucsc:> . " ;
	queryall_rdfrule:stage queryall_rdfrule:afterResultsToPool ;
	dc:title "Deletes statements that include the empty URI http://bio2rdf.org/ucsc: due to broken RDF generation scripts" ;
	queryall_rdfrule:order "100"^^xsd:int ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude .

bio2rdf_rdfrule:sparqllinkedtofromunretrievedblanknoderemoval a queryall_rdfrule:NormalisationRule , queryall_rdfrule:TransformationRule , queryall_rdfrule:SparqlNormalisationRule , queryall_rdfrule:SparqlConstructRule ;
    queryall_rdfrule:sparqlMode queryall_rdfrule:onlyDeleteMatchingTriples ;
    queryall_rdfrule:sparqlConstructQueryTarget "?myUri <http://bio2rdf.org/bio2rdf_resource:linkedToFrom> ?blanknode . ";
    queryall_rdfrule:sparqlWherePattern "?myUri <http://bio2rdf.org/bio2rdf_resource:linkedToFrom> ?blanknode . FILTER(isBlank(?blanknode)) OPTIONAL { ?blanknode ?pred ?obj } .
         FILTER (!bound(?obj)) " ;
	queryall_rdfrule:stage queryall_rdfrule:afterResultsToPool ;
	dc:title "Deletes references to blank nodes that were created using the linkedToFrom rule if there is no other information about the blank node, as it is completely useless in these cases." ;
	queryall_rdfrule:order "100"^^xsd:int ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude .
 
bio2rdf_rdfrule:sparqlobodbxrefunretrievedblanknoderemoval a queryall_rdfrule:NormalisationRule , queryall_rdfrule:TransformationRule , queryall_rdfrule:SparqlNormalisationRule , queryall_rdfrule:SparqlConstructRule ;
    queryall_rdfrule:sparqlMode queryall_rdfrule:onlyDeleteMatchingTriples ;
    queryall_rdfrule:sparqlConstructQueryTarget "?myUri <http://bio2rdf.org/obo_resource:dbxref> ?blanknode . " ;
    queryall_rdfrule:sparqlWherePattern "?myUri <http://bio2rdf.org/obo_resource:dbxref> ?blanknode . FILTER(isBlank(?blanknode)) OPTIONAL { ?blanknode ?pred ?obj } .
         FILTER (!bound(?obj))" ;
	queryall_rdfrule:stage queryall_rdfrule:afterResultsToPool ;
	dc:title "Deletes references to blank nodes that were in OBO as dbxrefs rule if there is no other information about the blank node, as it is completely useless in these cases." ;
	queryall_rdfrule:order "100"^^xsd:int ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude .

bio2rdf_rdfrule:sparqlownequivalentclassblanknoderemoval a queryall_rdfrule:NormalisationRule , queryall_rdfrule:TransformationRule , queryall_rdfrule:SparqlNormalisationRule , queryall_rdfrule:SparqlConstructRule ;
    queryall_rdfrule:sparqlMode queryall_rdfrule:onlyDeleteMatchingTriples ;
    queryall_rdfrule:sparqlConstructQueryTarget "?myUri <http://www.w3.org/2002/07/owl#equivalentClass> ?blanknode ." ;
    queryall_rdfrule:sparqlWherePattern "?myUri <http://www.w3.org/2002/07/owl#equivalentClass> ?blanknode . FILTER(isBlank(?blanknode)) OPTIONAL { ?blanknode ?pred ?obj } .
         FILTER (!bound(?obj)) " ;
	queryall_rdfrule:stage queryall_rdfrule:afterResultsToPool ;
	dc:title "Deletes references to blank nodes that were in OBO as dbxrefs rule if there is no other information about the blank node, as it is completely useless in these cases." ;
	queryall_rdfrule:order "100"^^xsd:int ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude .

bio2rdf_rdfrule:sparqlremoveplaintextemailaddresses a queryall_rdfrule:NormalisationRule , queryall_rdfrule:TransformationRule , queryall_rdfrule:SparqlNormalisationRule , queryall_rdfrule:SparqlConstructRule ;
    queryall_rdfrule:sparqlMode queryall_rdfrule:onlyDeleteMatchingTriples ;
    queryall_rdfrule:sparqlConstructQueryTarget "?myUri <http://xmlns.com/foaf/0.1/mbox> ?email . " ;
    queryall_rdfrule:sparqlWherePattern "?myUri <http://xmlns.com/foaf/0.1/mbox> ?email . FILTER(REGEX(str(?email), \"mailto:.*\") || REGEX(str(?email), \".*@.*\") ) " ;
	queryall_rdfrule:stage queryall_rdfrule:afterResultsToPool ;
	dc:title "Remove plain text email addresses that are marked up using the FOAF mbox predicate so that they can't be harvested by spammers." ;
	queryall_rdfrule:order "100"^^xsd:int ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude .

bio2rdf_rdfrule:sparqlremovelsid a queryall_rdfrule:NormalisationRule , queryall_rdfrule:TransformationRule , queryall_rdfrule:SparqlNormalisationRule , queryall_rdfrule:SparqlConstructRule ;
    queryall_rdfrule:sparqlMode queryall_rdfrule:onlyDeleteMatchingTriples ;
    queryall_rdfrule:sparqlConstructQueryTarget "?myUri <http://bio2rdf.org/bio2rdf_resource:lsid> ?lsid . " ;
    queryall_rdfrule:sparqlWherePattern " ?myUri <http://bio2rdf.org/bio2rdf_resource:lsid> ?lsid . " ;
	queryall_rdfrule:stage queryall_rdfrule:afterResultsToPool ;
	dc:title "Remove LSID links" ;
	queryall_rdfrule:order "100"^^xsd:int ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude .

bio2rdf_rdfrule:neurocommonsgeneaddsymboluri a queryall_rdfrule:NormalisationRule , queryall_rdfrule:TransformationRule , queryall_rdfrule:SparqlNormalisationRule , queryall_rdfrule:SparqlConstructRule ;
	queryall_rdfrule:hasRelatedNamespace bio2rdf_ns:symbol , bio2rdf_ns:geneid ;
    queryall_rdfrule:sparqlMode queryall_rdfrule:addAllMatchingTriples ;
    queryall_rdfrule:sparqlConstructQueryTarget "?myUri <http://bio2rdf.org/bio2rdf_resource:dbxref> ?symbolUri . " ;
    queryall_rdfrule:sparqlWherePattern " ?myUri ?symbolPredicate ?primarysymbol . filter(sameTerm(?symbolPredicate, iri(\"http://purl.org/science/owl/sciencecommons/ggp_has_primary_symbol\"))) . bind(iri(concat(\"http://bio2rdf.org/symbol:\", encode_for_uri(lcase(str(?primarySymbol))))) AS ?symbolUri)" ;
	queryall_rdfrule:stage queryall_rdfrule:afterResultsToPool ;
	dc:title "Add symbol URI based on Neurocommons gene symbol literals" ;
	queryall_rdfrule:order "100"^^xsd:int ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude .

bio2rdf_rdfrule:bioontology_obo_aeo_sparql a queryall_rdfrule:NormalisationRule , queryall_rdfrule:TransformationRule , queryall_rdfrule:SparqlNormalisationRule , queryall_rdfrule:SparqlConstructRule ;
	queryall_rdfrule:hasRelatedNamespace bio2rdf_ns:obo_aeo ;
	queryall_rdfrule:stage queryall_rdfrule:afterResultsImport ;
    queryall_rdfrule:sparqlConstructQueryTarget "" ;
    queryall_rdfrule:sparqlWherePattern " " ;
	dc:title "Converts between the URIs used by the BioOntology SPARQL endpoint for the OBO AEO ontology and the Bio2RDF normalised URIs" ;
	queryall_rdfrule:order "100"^^xsd:int ;
	queryall_profile:profileIncludeExcludeOrder queryall_profile:excludeThenInclude .

	